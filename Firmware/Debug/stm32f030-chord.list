
stm32f030-chord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003140  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001434  08003200  08003200  00013200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004634  08004634  00020120  2**0
                  CONTENTS
  4 .ARM          00000000  08004634  08004634  00020120  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004634  08004634  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004634  08004634  00014634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004638  08004638  00014638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  0800463c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000120  0800475c  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  0800475c  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b7c  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aed  00000000  00000000  00026cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00003e9e  00000000  00000000  000287b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003c8  00000000  00000000  0002c650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ca0  00000000  00000000  0002ca18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00009236  00000000  00000000  0002d6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008efd  00000000  00000000  000368ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0002cfca  00000000  00000000  0003f7eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0006c7b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000083c  00000000  00000000  0006c808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000120 	.word	0x20000120
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080031e8 	.word	0x080031e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000124 	.word	0x20000124
 8000104:	080031e8 	.word	0x080031e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <adc_configure>:
#include <main.h>
#include <stm32f0xx.h>

void adc_configure() {
	for(uint8_t i = 0; i < ADC_DATA_SIZE; i++) {
		adcData[i] = 0xFFFF;
 80003f4:	2301      	movs	r3, #1
	}
	// Pins
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80003f6:	2180      	movs	r1, #128	; 0x80
		adcData[i] = 0xFFFF;
 80003f8:	4a5b      	ldr	r2, [pc, #364]	; (8000568 <adc_configure+0x174>)
 80003fa:	425b      	negs	r3, r3
void adc_configure() {
 80003fc:	b510      	push	{r4, lr}
		adcData[i] = 0xFFFF;
 80003fe:	8013      	strh	r3, [r2, #0]
 8000400:	8053      	strh	r3, [r2, #2]
 8000402:	8093      	strh	r3, [r2, #4]
 8000404:	80d3      	strh	r3, [r2, #6]
 8000406:	8113      	strh	r3, [r2, #8]
 8000408:	8153      	strh	r3, [r2, #10]
 800040a:	8193      	strh	r3, [r2, #12]
 800040c:	81d3      	strh	r3, [r2, #14]
 800040e:	8213      	strh	r3, [r2, #16]
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000410:	4b56      	ldr	r3, [pc, #344]	; (800056c <adc_configure+0x178>)
 8000412:	0289      	lsls	r1, r1, #10
 8000414:	6958      	ldr	r0, [r3, #20]
	GPIOA->MODER |= (3 << GPIO_MODER_MODER0_Pos) | (3 << GPIO_MODER_MODER1_Pos);
 8000416:	240f      	movs	r4, #15
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000418:	4301      	orrs	r1, r0
	GPIOA->MODER |= (3 << GPIO_MODER_MODER0_Pos) | (3 << GPIO_MODER_MODER1_Pos);
 800041a:	2090      	movs	r0, #144	; 0x90
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 800041c:	6159      	str	r1, [r3, #20]
	GPIOA->MODER |= (3 << GPIO_MODER_MODER0_Pos) | (3 << GPIO_MODER_MODER1_Pos);
 800041e:	05c0      	lsls	r0, r0, #23
 8000420:	6801      	ldr	r1, [r0, #0]
 8000422:	4321      	orrs	r1, r4
 8000424:	6001      	str	r1, [r0, #0]

	// Enable DMA & ADC clock
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8000426:	2001      	movs	r0, #1
 8000428:	6959      	ldr	r1, [r3, #20]
 800042a:	4301      	orrs	r1, r0
 800042c:	6159      	str	r1, [r3, #20]
	RCC->APB2ENR |= RCC_APB2ENR_ADCEN;
 800042e:	2180      	movs	r1, #128	; 0x80
 8000430:	699c      	ldr	r4, [r3, #24]
 8000432:	0089      	lsls	r1, r1, #2
 8000434:	4321      	orrs	r1, r4
 8000436:	6199      	str	r1, [r3, #24]

	DMA1_Channel1->CPAR = (uint32_t) (&(ADC1->DR));
 8000438:	4b4d      	ldr	r3, [pc, #308]	; (8000570 <adc_configure+0x17c>)
 800043a:	494e      	ldr	r1, [pc, #312]	; (8000574 <adc_configure+0x180>)
 800043c:	6099      	str	r1, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t)(adcData);
	DMA1_Channel1->CNDTR = ADC_DATA_SIZE;
 800043e:	2109      	movs	r1, #9
	DMA1_Channel1->CMAR = (uint32_t)(adcData);
 8000440:	60da      	str	r2, [r3, #12]
	DMA1_Channel1->CNDTR = ADC_DATA_SIZE;
 8000442:	6059      	str	r1, [r3, #4]
	DMA1_Channel1->CCR |= DMA_CCR_MINC |
 8000444:	681c      	ldr	r4, [r3, #0]
 8000446:	494c      	ldr	r1, [pc, #304]	; (8000578 <adc_configure+0x184>)
 8000448:	4321      	orrs	r1, r4
 800044a:	6019      	str	r1, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800044c:	f3bf 8f5f 	dmb	sy
			(1 << DMA_CCR_PSIZE_Pos) |
			DMA_CCR_CIRC |
			(3 << DMA_CCR_PL_Pos);
	__DMB();

	ADC1->CHSELR |= 	ADC_CHSELR_CHSEL0 | ADC_CHSELR_CHSEL1 | ADC_CHSELR_CHSEL2 | ADC_CHSELR_CHSEL3
 8000450:	4b4a      	ldr	r3, [pc, #296]	; (800057c <adc_configure+0x188>)
 8000452:	494b      	ldr	r1, [pc, #300]	; (8000580 <adc_configure+0x18c>)
 8000454:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8000456:	4321      	orrs	r1, r4
 8000458:	6299      	str	r1, [r3, #40]	; 0x28
			 	 	 | ADC_CHSELR_CHSEL4 | ADC_CHSELR_CHSEL5 | ADC_CHSELR_CHSEL6 | ADC_CHSELR_CHSEL7
					 | ADC_CHSELR_CHSEL8;
	//Async clock, 12 bits, right-align, continuous mode
	ADC1->CFGR1 |= ADC_CFGR1_CONT | ADC_CFGR1_DMACFG;
 800045a:	68dc      	ldr	r4, [r3, #12]
 800045c:	4949      	ldr	r1, [pc, #292]	; (8000584 <adc_configure+0x190>)
 800045e:	4321      	orrs	r1, r4
	ADC1->CFGR1 |= 0 << ADC_CFGR1_RES_Pos; // 12 bits.
	ADC1->SMPR |= 7;
 8000460:	2407      	movs	r4, #7
	ADC1->CFGR1 |= ADC_CFGR1_CONT | ADC_CFGR1_DMACFG;
 8000462:	60d9      	str	r1, [r3, #12]
	ADC1->CFGR1 |= 0 << ADC_CFGR1_RES_Pos; // 12 bits.
 8000464:	68d9      	ldr	r1, [r3, #12]
 8000466:	60d9      	str	r1, [r3, #12]
	ADC1->SMPR |= 7;
 8000468:	6959      	ldr	r1, [r3, #20]
 800046a:	4321      	orrs	r1, r4
 800046c:	6159      	str	r1, [r3, #20]

	// Make sure the ADC is disabled.
	if((ADC1->CR & ADC_CR_ADEN) != 0) {
 800046e:	6899      	ldr	r1, [r3, #8]
 8000470:	4208      	tst	r0, r1
 8000472:	d003      	beq.n	800047c <adc_configure+0x88>
		ADC1->CR |= ADC_CR_ADDIS;
 8000474:	6899      	ldr	r1, [r3, #8]
 8000476:	3001      	adds	r0, #1
 8000478:	4301      	orrs	r1, r0
 800047a:	6099      	str	r1, [r3, #8]
	}
	WAITNBIT(ADC1->CR, ADC_CR_ADEN);
 800047c:	2001      	movs	r0, #1
 800047e:	493f      	ldr	r1, [pc, #252]	; (800057c <adc_configure+0x188>)
 8000480:	688b      	ldr	r3, [r1, #8]
 8000482:	4218      	tst	r0, r3
 8000484:	d1fc      	bne.n	8000480 <adc_configure+0x8c>
	ADC1->CFGR1 &= ~ADC_CFGR1_DMAEN;
 8000486:	68cb      	ldr	r3, [r1, #12]
 8000488:	4383      	bics	r3, r0
 800048a:	60cb      	str	r3, [r1, #12]

	// Calibrate.
	ADC1->CR |= ADC_CR_ADCAL;
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	6888      	ldr	r0, [r1, #8]
 8000490:	061b      	lsls	r3, r3, #24
 8000492:	4303      	orrs	r3, r0
 8000494:	608b      	str	r3, [r1, #8]
	WAITNBIT(ADC1->CR, ADC_CR_ADCAL);
 8000496:	4939      	ldr	r1, [pc, #228]	; (800057c <adc_configure+0x188>)
 8000498:	688b      	ldr	r3, [r1, #8]
 800049a:	2b00      	cmp	r3, #0
 800049c:	dbfc      	blt.n	8000498 <adc_configure+0xa4>

	// Clear ADC RDY
	if((ADC1->ISR & ADC_ISR_ADRDY) != 0) {
 800049e:	2301      	movs	r3, #1
 80004a0:	6808      	ldr	r0, [r1, #0]
 80004a2:	4203      	tst	r3, r0
 80004a4:	d002      	beq.n	80004ac <adc_configure+0xb8>
		ADC1->ISR |= ADC_ISR_ADRDY;
 80004a6:	6808      	ldr	r0, [r1, #0]
 80004a8:	4303      	orrs	r3, r0
 80004aa:	600b      	str	r3, [r1, #0]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004ac:	2180      	movs	r1, #128	; 0x80
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004ae:	20c3      	movs	r0, #195	; 0xc3
 80004b0:	24ff      	movs	r4, #255	; 0xff
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004b2:	4b35      	ldr	r3, [pc, #212]	; (8000588 <adc_configure+0x194>)
 80004b4:	0149      	lsls	r1, r1, #5
 80004b6:	6019      	str	r1, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004b8:	0080      	lsls	r0, r0, #2
 80004ba:	5819      	ldr	r1, [r3, r0]
 80004bc:	43a1      	bics	r1, r4
 80004be:	5019      	str	r1, [r3, r0]
	}

	NVIC_EnableIRQ(ADC1_COMP_IRQn);
	NVIC_SetPriority(ADC1_COMP_IRQn,0);
	ADC1->IER |= ADC_IER_OVRIE;
 80004c0:	2010      	movs	r0, #16
 80004c2:	4b2e      	ldr	r3, [pc, #184]	; (800057c <adc_configure+0x188>)
 80004c4:	6859      	ldr	r1, [r3, #4]
 80004c6:	4301      	orrs	r1, r0
 80004c8:	6059      	str	r1, [r3, #4]
 80004ca:	f3bf 8f5f 	dmb	sy

	__DMB();

	//Enable DMA and ADC.
	ADC1->CFGR1 |= ADC_CFGR1_DMAEN;
 80004ce:	68d9      	ldr	r1, [r3, #12]
 80004d0:	380f      	subs	r0, #15
	DMA1_Channel1->CCR |= DMA_CCR_EN;
 80004d2:	4c27      	ldr	r4, [pc, #156]	; (8000570 <adc_configure+0x17c>)
	ADC1->CFGR1 |= ADC_CFGR1_DMAEN;
 80004d4:	4301      	orrs	r1, r0
 80004d6:	60d9      	str	r1, [r3, #12]
	DMA1_Channel1->CCR |= DMA_CCR_EN;
 80004d8:	6821      	ldr	r1, [r4, #0]
 80004da:	4301      	orrs	r1, r0
 80004dc:	6021      	str	r1, [r4, #0]
	ADC1->CR |= ADC_CR_ADEN;
 80004de:	6899      	ldr	r1, [r3, #8]
 80004e0:	4301      	orrs	r1, r0
 80004e2:	6099      	str	r1, [r3, #8]
	WAITBIT(ADC1->ISR, ADC_ISR_ADRDY);
 80004e4:	6819      	ldr	r1, [r3, #0]
 80004e6:	4208      	tst	r0, r1
 80004e8:	d0fc      	beq.n	80004e4 <adc_configure+0xf0>
	ADC1->CR |= ADC_CR_ADSTART;
 80004ea:	2004      	movs	r0, #4
 80004ec:	6899      	ldr	r1, [r3, #8]
 80004ee:	4301      	orrs	r1, r0

	// Wait while the whole buffer is filled
	while(1) {
		uint8_t allGood = 1;
		for(uint8_t i = 0; i < ADC_DATA_SIZE; i++) {
			if (adcData[i] == 0xFFFF) {allGood = 0;}
 80004f0:	4826      	ldr	r0, [pc, #152]	; (800058c <adc_configure+0x198>)
	ADC1->CR |= ADC_CR_ADSTART;
 80004f2:	6099      	str	r1, [r3, #8]
			if (adcData[i] == 0xFFFF) {allGood = 0;}
 80004f4:	8813      	ldrh	r3, [r2, #0]
 80004f6:	8851      	ldrh	r1, [r2, #2]
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	4281      	cmp	r1, r0
 80004fc:	d032      	beq.n	8000564 <adc_configure+0x170>
 80004fe:	4924      	ldr	r1, [pc, #144]	; (8000590 <adc_configure+0x19c>)
 8000500:	468c      	mov	ip, r1
 8000502:	4463      	add	r3, ip
 8000504:	1e59      	subs	r1, r3, #1
 8000506:	418b      	sbcs	r3, r1
		uint8_t allGood = 1;
 8000508:	b2db      	uxtb	r3, r3
			if (adcData[i] == 0xFFFF) {allGood = 0;}
 800050a:	4c21      	ldr	r4, [pc, #132]	; (8000590 <adc_configure+0x19c>)
 800050c:	8891      	ldrh	r1, [r2, #4]
 800050e:	46a4      	mov	ip, r4
 8000510:	4461      	add	r1, ip
 8000512:	1e4c      	subs	r4, r1, #1
 8000514:	41a1      	sbcs	r1, r4
 8000516:	4249      	negs	r1, r1
 8000518:	400b      	ands	r3, r1
 800051a:	88d1      	ldrh	r1, [r2, #6]
 800051c:	4461      	add	r1, ip
 800051e:	1e4c      	subs	r4, r1, #1
 8000520:	41a1      	sbcs	r1, r4
 8000522:	4249      	negs	r1, r1
 8000524:	400b      	ands	r3, r1
 8000526:	8911      	ldrh	r1, [r2, #8]
 8000528:	4461      	add	r1, ip
 800052a:	1e4c      	subs	r4, r1, #1
 800052c:	41a1      	sbcs	r1, r4
 800052e:	4249      	negs	r1, r1
 8000530:	400b      	ands	r3, r1
 8000532:	8951      	ldrh	r1, [r2, #10]
 8000534:	4461      	add	r1, ip
 8000536:	1e4c      	subs	r4, r1, #1
 8000538:	41a1      	sbcs	r1, r4
 800053a:	4249      	negs	r1, r1
 800053c:	400b      	ands	r3, r1
 800053e:	8991      	ldrh	r1, [r2, #12]
 8000540:	4281      	cmp	r1, r0
 8000542:	d008      	beq.n	8000556 <adc_configure+0x162>
 8000544:	89d1      	ldrh	r1, [r2, #14]
 8000546:	4281      	cmp	r1, r0
 8000548:	d006      	beq.n	8000558 <adc_configure+0x164>
 800054a:	8a11      	ldrh	r1, [r2, #16]
 800054c:	4281      	cmp	r1, r0
 800054e:	d0d1      	beq.n	80004f4 <adc_configure+0x100>
		}
		if(allGood == 1) {break;}
 8000550:	2b01      	cmp	r3, #1
 8000552:	d1cf      	bne.n	80004f4 <adc_configure+0x100>
	}
}
 8000554:	bd10      	pop	{r4, pc}
			if (adcData[i] == 0xFFFF) {allGood = 0;}
 8000556:	89d3      	ldrh	r3, [r2, #14]
 8000558:	8a13      	ldrh	r3, [r2, #16]
 800055a:	8813      	ldrh	r3, [r2, #0]
 800055c:	8851      	ldrh	r1, [r2, #2]
 800055e:	b29b      	uxth	r3, r3
 8000560:	4281      	cmp	r1, r0
 8000562:	d1cc      	bne.n	80004fe <adc_configure+0x10a>
 8000564:	2300      	movs	r3, #0
 8000566:	e7d0      	b.n	800050a <adc_configure+0x116>
 8000568:	200001ac 	.word	0x200001ac
 800056c:	40021000 	.word	0x40021000
 8000570:	40020008 	.word	0x40020008
 8000574:	40012440 	.word	0x40012440
 8000578:	000035a0 	.word	0x000035a0
 800057c:	40012400 	.word	0x40012400
 8000580:	000001ff 	.word	0x000001ff
 8000584:	00002002 	.word	0x00002002
 8000588:	e000e100 	.word	0xe000e100
 800058c:	0000ffff 	.word	0x0000ffff
 8000590:	ffff0001 	.word	0xffff0001

08000594 <butled_configure>:
GPIO_TypeDef* const BUTLED_PORT[5] = {GPIOB, GPIOB, GPIOA, GPIOA, GPIOB};
const uint32_t BUTLED_ON[5] = {GPIO_BSRR_BS_13, GPIO_BSRR_BS_15, GPIO_BSRR_BS_12, GPIO_BSRR_BS_15, GPIO_BSRR_BS_3};
const uint32_t BUTLED_OFF[5] = {GPIO_BSRR_BR_13, GPIO_BSRR_BR_15, GPIO_BSRR_BR_12, GPIO_BSRR_BR_15, GPIO_BSRR_BR_3};

void butled_configure() {
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000594:	2280      	movs	r2, #128	; 0x80
void butled_configure() {
 8000596:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000598:	46c6      	mov	lr, r8
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 800059a:	4b58      	ldr	r3, [pc, #352]	; (80006fc <butled_configure+0x168>)
 800059c:	0292      	lsls	r2, r2, #10
 800059e:	6959      	ldr	r1, [r3, #20]
void butled_configure() {
 80005a0:	b500      	push	{lr}
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80005a2:	430a      	orrs	r2, r1
 80005a4:	615a      	str	r2, [r3, #20]
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	6959      	ldr	r1, [r3, #20]
 80005aa:	02d2      	lsls	r2, r2, #11
 80005ac:	430a      	orrs	r2, r1
 80005ae:	615a      	str	r2, [r3, #20]
	RCC->AHBENR |= RCC_AHBENR_GPIOFEN;
 80005b0:	2280      	movs	r2, #128	; 0x80
 80005b2:	6959      	ldr	r1, [r3, #20]
 80005b4:	03d2      	lsls	r2, r2, #15
 80005b6:	430a      	orrs	r2, r1

	// Buttons: PB12, PB14, PF6, PF7, PB6 (Set to GPIO Input with pullup, minimal speed)
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER12_Msk, 0);
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER14_Msk, 0);
 80005b8:	4951      	ldr	r1, [pc, #324]	; (8000700 <butled_configure+0x16c>)
	RCC->AHBENR |= RCC_AHBENR_GPIOFEN;
 80005ba:	615a      	str	r2, [r3, #20]
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER14_Msk, 0);
 80005bc:	468c      	mov	ip, r1
	MODIFY_REG(GPIOF->MODER, GPIO_MODER_MODER6_Msk, 0);
	MODIFY_REG(GPIOF->MODER, GPIO_MODER_MODER7_Msk, 0);
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER6_Msk, 0);

	MODIFY_REG(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR12_Msk, 0);
	MODIFY_REG(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR14_Msk, 0);
 80005be:	4665      	mov	r5, ip
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER12_Msk, 0);
 80005c0:	4b50      	ldr	r3, [pc, #320]	; (8000704 <butled_configure+0x170>)
 80005c2:	4851      	ldr	r0, [pc, #324]	; (8000708 <butled_configure+0x174>)
 80005c4:	681a      	ldr	r2, [r3, #0]
	MODIFY_REG(GPIOF->OSPEEDR, GPIO_OSPEEDR_OSPEEDR6_Msk, 0);
	MODIFY_REG(GPIOF->OSPEEDR, GPIO_OSPEEDR_OSPEEDR7_Msk, 0);
	MODIFY_REG(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR6_Msk, 0);

	MODIFY_REG(GPIOB->PUPDR, GPIO_PUPDR_PUPDR12_Msk, 0b01 << GPIO_PUPDR_PUPDR12_Pos);
 80005c6:	2780      	movs	r7, #128	; 0x80
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER12_Msk, 0);
 80005c8:	4002      	ands	r2, r0
 80005ca:	601a      	str	r2, [r3, #0]
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER14_Msk, 0);
 80005cc:	681a      	ldr	r2, [r3, #0]
	MODIFY_REG(GPIOF->MODER, GPIO_MODER_MODER7_Msk, 0);
 80005ce:	4e4f      	ldr	r6, [pc, #316]	; (800070c <butled_configure+0x178>)
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER14_Msk, 0);
 80005d0:	400a      	ands	r2, r1
 80005d2:	601a      	str	r2, [r3, #0]
	MODIFY_REG(GPIOF->MODER, GPIO_MODER_MODER6_Msk, 0);
 80005d4:	4a4e      	ldr	r2, [pc, #312]	; (8000710 <butled_configure+0x17c>)
 80005d6:	494f      	ldr	r1, [pc, #316]	; (8000714 <butled_configure+0x180>)
 80005d8:	6814      	ldr	r4, [r2, #0]
	MODIFY_REG(GPIOB->PUPDR, GPIO_PUPDR_PUPDR12_Msk, 0b01 << GPIO_PUPDR_PUPDR12_Pos);
 80005da:	047f      	lsls	r7, r7, #17
	MODIFY_REG(GPIOF->MODER, GPIO_MODER_MODER6_Msk, 0);
 80005dc:	400c      	ands	r4, r1
 80005de:	6014      	str	r4, [r2, #0]
	MODIFY_REG(GPIOF->MODER, GPIO_MODER_MODER7_Msk, 0);
 80005e0:	6814      	ldr	r4, [r2, #0]
 80005e2:	4034      	ands	r4, r6
 80005e4:	6014      	str	r4, [r2, #0]
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER6_Msk, 0);
 80005e6:	681c      	ldr	r4, [r3, #0]
 80005e8:	400c      	ands	r4, r1
 80005ea:	601c      	str	r4, [r3, #0]
	MODIFY_REG(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR12_Msk, 0);
 80005ec:	689c      	ldr	r4, [r3, #8]
 80005ee:	4004      	ands	r4, r0
 80005f0:	609c      	str	r4, [r3, #8]
	MODIFY_REG(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR14_Msk, 0);
 80005f2:	689c      	ldr	r4, [r3, #8]
 80005f4:	402c      	ands	r4, r5
 80005f6:	609c      	str	r4, [r3, #8]
	MODIFY_REG(GPIOF->OSPEEDR, GPIO_OSPEEDR_OSPEEDR6_Msk, 0);
 80005f8:	6894      	ldr	r4, [r2, #8]
 80005fa:	400c      	ands	r4, r1
 80005fc:	6094      	str	r4, [r2, #8]
	MODIFY_REG(GPIOF->OSPEEDR, GPIO_OSPEEDR_OSPEEDR7_Msk, 0);
 80005fe:	6894      	ldr	r4, [r2, #8]
 8000600:	4034      	ands	r4, r6
 8000602:	6094      	str	r4, [r2, #8]
	MODIFY_REG(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR6_Msk, 0);
 8000604:	689c      	ldr	r4, [r3, #8]
 8000606:	400c      	ands	r4, r1
 8000608:	609c      	str	r4, [r3, #8]
	MODIFY_REG(GPIOB->PUPDR, GPIO_PUPDR_PUPDR12_Msk, 0b01 << GPIO_PUPDR_PUPDR12_Pos);
 800060a:	68dc      	ldr	r4, [r3, #12]
 800060c:	4004      	ands	r4, r0
 800060e:	433c      	orrs	r4, r7
 8000610:	60dc      	str	r4, [r3, #12]
	MODIFY_REG(GPIOB->PUPDR, GPIO_PUPDR_PUPDR14_Msk, 0b01 << GPIO_PUPDR_PUPDR14_Pos);
 8000612:	4664      	mov	r4, ip
 8000614:	68dd      	ldr	r5, [r3, #12]
 8000616:	4025      	ands	r5, r4
 8000618:	2480      	movs	r4, #128	; 0x80
 800061a:	0564      	lsls	r4, r4, #21
 800061c:	46a0      	mov	r8, r4
 800061e:	4325      	orrs	r5, r4
	MODIFY_REG(GPIOF->PUPDR, GPIO_PUPDR_PUPDR6_Msk, 0b01 << GPIO_PUPDR_PUPDR6_Pos);
 8000620:	2480      	movs	r4, #128	; 0x80
	MODIFY_REG(GPIOB->PUPDR, GPIO_PUPDR_PUPDR14_Msk, 0b01 << GPIO_PUPDR_PUPDR14_Pos);
 8000622:	60dd      	str	r5, [r3, #12]
	MODIFY_REG(GPIOF->PUPDR, GPIO_PUPDR_PUPDR6_Msk, 0b01 << GPIO_PUPDR_PUPDR6_Pos);
 8000624:	68d5      	ldr	r5, [r2, #12]
 8000626:	0164      	lsls	r4, r4, #5
 8000628:	400d      	ands	r5, r1
 800062a:	4325      	orrs	r5, r4
 800062c:	60d5      	str	r5, [r2, #12]
	MODIFY_REG(GPIOF->PUPDR, GPIO_PUPDR_PUPDR7_Msk, 0b01 << GPIO_PUPDR_PUPDR7_Pos);
 800062e:	68d5      	ldr	r5, [r2, #12]
 8000630:	4035      	ands	r5, r6
 8000632:	2680      	movs	r6, #128	; 0x80
 8000634:	01f6      	lsls	r6, r6, #7
 8000636:	432e      	orrs	r6, r5
 8000638:	60d6      	str	r6, [r2, #12]
	MODIFY_REG(GPIOB->PUPDR, GPIO_PUPDR_PUPDR6_Msk, 0b01 << GPIO_PUPDR_PUPDR6_Pos);
 800063a:	68da      	ldr	r2, [r3, #12]

	// Button LEDS: PB13, PB15, PA12, PA15, PB3 (Set to GPIO Output Push-Pull min speed)
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER13_Msk, 0b01 << GPIO_MODER_MODER13_Pos);
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER15_Msk, 0b01 << GPIO_MODER_MODER15_Pos);
 800063c:	2580      	movs	r5, #128	; 0x80
	MODIFY_REG(GPIOB->PUPDR, GPIO_PUPDR_PUPDR6_Msk, 0b01 << GPIO_PUPDR_PUPDR6_Pos);
 800063e:	4011      	ands	r1, r2
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER13_Msk, 0b01 << GPIO_MODER_MODER13_Pos);
 8000640:	2280      	movs	r2, #128	; 0x80
	MODIFY_REG(GPIOB->PUPDR, GPIO_PUPDR_PUPDR6_Msk, 0b01 << GPIO_PUPDR_PUPDR6_Pos);
 8000642:	4321      	orrs	r1, r4
 8000644:	60d9      	str	r1, [r3, #12]
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER13_Msk, 0b01 << GPIO_MODER_MODER13_Pos);
 8000646:	6819      	ldr	r1, [r3, #0]
 8000648:	4e33      	ldr	r6, [pc, #204]	; (8000718 <butled_configure+0x184>)
 800064a:	04d2      	lsls	r2, r2, #19
 800064c:	4031      	ands	r1, r6
 800064e:	430a      	orrs	r2, r1
 8000650:	601a      	str	r2, [r3, #0]
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER15_Msk, 0b01 << GPIO_MODER_MODER15_Pos);
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	05ed      	lsls	r5, r5, #23
 8000656:	0092      	lsls	r2, r2, #2
 8000658:	0892      	lsrs	r2, r2, #2
 800065a:	432a      	orrs	r2, r5
 800065c:	601a      	str	r2, [r3, #0]
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER12_Msk, 0b01 << GPIO_MODER_MODER12_Pos);
 800065e:	2290      	movs	r2, #144	; 0x90
 8000660:	05d2      	lsls	r2, r2, #23
 8000662:	6811      	ldr	r1, [r2, #0]
	MODIFY_REG(GPIOA->OTYPER, GPIO_OTYPER_OT_15, 0);
	MODIFY_REG(GPIOB->OTYPER, GPIO_OTYPER_OT_3, 0);

	GPIOB->BSRR |= GPIO_BSRR_BR_13;
	GPIOB->BSRR |= GPIO_BSRR_BR_15;
	GPIOA->BSRR |= GPIO_BSRR_BR_12;
 8000664:	4644      	mov	r4, r8
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER12_Msk, 0b01 << GPIO_MODER_MODER12_Pos);
 8000666:	4001      	ands	r1, r0
 8000668:	430f      	orrs	r7, r1
 800066a:	6017      	str	r7, [r2, #0]
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER15_Msk, 0b01 << GPIO_MODER_MODER15_Pos);
 800066c:	6811      	ldr	r1, [r2, #0]
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER3_Msk,  0b01 << GPIO_MODER_MODER3_Pos);
 800066e:	2740      	movs	r7, #64	; 0x40
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER15_Msk, 0b01 << GPIO_MODER_MODER15_Pos);
 8000670:	0089      	lsls	r1, r1, #2
 8000672:	0889      	lsrs	r1, r1, #2
 8000674:	4329      	orrs	r1, r5
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER3_Msk,  0b01 << GPIO_MODER_MODER3_Pos);
 8000676:	25c0      	movs	r5, #192	; 0xc0
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER15_Msk, 0b01 << GPIO_MODER_MODER15_Pos);
 8000678:	6011      	str	r1, [r2, #0]
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER3_Msk,  0b01 << GPIO_MODER_MODER3_Pos);
 800067a:	6819      	ldr	r1, [r3, #0]
 800067c:	43a9      	bics	r1, r5
 800067e:	4339      	orrs	r1, r7
 8000680:	6019      	str	r1, [r3, #0]
	MODIFY_REG(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR13_Msk, 0);
 8000682:	6899      	ldr	r1, [r3, #8]
 8000684:	400e      	ands	r6, r1
 8000686:	609e      	str	r6, [r3, #8]
	MODIFY_REG(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR15_Msk, 0);
 8000688:	6899      	ldr	r1, [r3, #8]
 800068a:	0089      	lsls	r1, r1, #2
 800068c:	0889      	lsrs	r1, r1, #2
 800068e:	6099      	str	r1, [r3, #8]
	MODIFY_REG(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEEDR12_Msk, 0);
 8000690:	6891      	ldr	r1, [r2, #8]
 8000692:	4008      	ands	r0, r1
 8000694:	6090      	str	r0, [r2, #8]
	MODIFY_REG(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEEDR15_Msk, 0);
 8000696:	6891      	ldr	r1, [r2, #8]
	MODIFY_REG(GPIOB->OTYPER, GPIO_OTYPER_OT_13, 0);
 8000698:	4820      	ldr	r0, [pc, #128]	; (800071c <butled_configure+0x188>)
	MODIFY_REG(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEEDR15_Msk, 0);
 800069a:	0089      	lsls	r1, r1, #2
 800069c:	0889      	lsrs	r1, r1, #2
 800069e:	6091      	str	r1, [r2, #8]
	MODIFY_REG(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR3_Msk, 0);
 80006a0:	6899      	ldr	r1, [r3, #8]
 80006a2:	43a9      	bics	r1, r5
 80006a4:	6099      	str	r1, [r3, #8]
	MODIFY_REG(GPIOB->OTYPER, GPIO_OTYPER_OT_13, 0);
 80006a6:	6859      	ldr	r1, [r3, #4]
	MODIFY_REG(GPIOB->OTYPER, GPIO_OTYPER_OT_15, 0);
 80006a8:	4d1d      	ldr	r5, [pc, #116]	; (8000720 <butled_configure+0x18c>)
	MODIFY_REG(GPIOB->OTYPER, GPIO_OTYPER_OT_13, 0);
 80006aa:	4001      	ands	r1, r0
 80006ac:	6059      	str	r1, [r3, #4]
	MODIFY_REG(GPIOB->OTYPER, GPIO_OTYPER_OT_15, 0);
 80006ae:	6858      	ldr	r0, [r3, #4]
	MODIFY_REG(GPIOA->OTYPER, GPIO_OTYPER_OT_12, 0);
 80006b0:	491c      	ldr	r1, [pc, #112]	; (8000724 <butled_configure+0x190>)
	MODIFY_REG(GPIOB->OTYPER, GPIO_OTYPER_OT_15, 0);
 80006b2:	4028      	ands	r0, r5
 80006b4:	6058      	str	r0, [r3, #4]
	MODIFY_REG(GPIOA->OTYPER, GPIO_OTYPER_OT_12, 0);
 80006b6:	6850      	ldr	r0, [r2, #4]
 80006b8:	4008      	ands	r0, r1
 80006ba:	6050      	str	r0, [r2, #4]
	MODIFY_REG(GPIOB->OTYPER, GPIO_OTYPER_OT_3, 0);
 80006bc:	2008      	movs	r0, #8
	MODIFY_REG(GPIOA->OTYPER, GPIO_OTYPER_OT_15, 0);
 80006be:	6851      	ldr	r1, [r2, #4]
 80006c0:	4029      	ands	r1, r5
 80006c2:	6051      	str	r1, [r2, #4]
	MODIFY_REG(GPIOB->OTYPER, GPIO_OTYPER_OT_3, 0);
 80006c4:	6859      	ldr	r1, [r3, #4]
 80006c6:	4381      	bics	r1, r0
 80006c8:	6059      	str	r1, [r3, #4]
	GPIOB->BSRR |= GPIO_BSRR_BR_13;
 80006ca:	2180      	movs	r1, #128	; 0x80
 80006cc:	6998      	ldr	r0, [r3, #24]
 80006ce:	0589      	lsls	r1, r1, #22
 80006d0:	4301      	orrs	r1, r0
 80006d2:	6199      	str	r1, [r3, #24]
	GPIOB->BSRR |= GPIO_BSRR_BR_15;
 80006d4:	2180      	movs	r1, #128	; 0x80
 80006d6:	6998      	ldr	r0, [r3, #24]
 80006d8:	0609      	lsls	r1, r1, #24
 80006da:	4308      	orrs	r0, r1
 80006dc:	6198      	str	r0, [r3, #24]
	GPIOA->BSRR |= GPIO_BSRR_BR_12;
 80006de:	6990      	ldr	r0, [r2, #24]
 80006e0:	4304      	orrs	r4, r0
 80006e2:	6194      	str	r4, [r2, #24]
	GPIOA->BSRR |= GPIO_BSRR_BR_15;
 80006e4:	6990      	ldr	r0, [r2, #24]
 80006e6:	4301      	orrs	r1, r0
 80006e8:	6191      	str	r1, [r2, #24]
	GPIOB->BSRR |= GPIO_BSRR_BR_3;
 80006ea:	2280      	movs	r2, #128	; 0x80
 80006ec:	6999      	ldr	r1, [r3, #24]
 80006ee:	0312      	lsls	r2, r2, #12
 80006f0:	430a      	orrs	r2, r1
 80006f2:	619a      	str	r2, [r3, #24]
}
 80006f4:	bc80      	pop	{r7}
 80006f6:	46b8      	mov	r8, r7
 80006f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	40021000 	.word	0x40021000
 8000700:	cfffffff 	.word	0xcfffffff
 8000704:	48000400 	.word	0x48000400
 8000708:	fcffffff 	.word	0xfcffffff
 800070c:	ffff3fff 	.word	0xffff3fff
 8000710:	48001400 	.word	0x48001400
 8000714:	ffffcfff 	.word	0xffffcfff
 8000718:	f3ffffff 	.word	0xf3ffffff
 800071c:	ffffdfff 	.word	0xffffdfff
 8000720:	ffff7fff 	.word	0xffff7fff
 8000724:	ffffefff 	.word	0xffffefff

08000728 <butled_on>:

void butled_on(uint8_t butled) {
	BUTLED_PORT[butled]->BSRR |= BUTLED_ON[butled];
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <butled_on+0x14>)
 800072a:	0080      	lsls	r0, r0, #2
 800072c:	58c2      	ldr	r2, [r0, r3]
 800072e:	4904      	ldr	r1, [pc, #16]	; (8000740 <butled_on+0x18>)
 8000730:	6993      	ldr	r3, [r2, #24]
 8000732:	5841      	ldr	r1, [r0, r1]
 8000734:	430b      	orrs	r3, r1
 8000736:	6193      	str	r3, [r2, #24]
}
 8000738:	4770      	bx	lr
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	08003228 	.word	0x08003228
 8000740:	08003214 	.word	0x08003214

08000744 <butled_off>:

void butled_off(uint8_t butled) {
	BUTLED_PORT[butled]->BSRR |= BUTLED_OFF[butled];
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <butled_off+0x14>)
 8000746:	0080      	lsls	r0, r0, #2
 8000748:	58c2      	ldr	r2, [r0, r3]
 800074a:	4904      	ldr	r1, [pc, #16]	; (800075c <butled_off+0x18>)
 800074c:	6993      	ldr	r3, [r2, #24]
 800074e:	5841      	ldr	r1, [r0, r1]
 8000750:	430b      	orrs	r3, r1
 8000752:	6193      	str	r3, [r2, #24]
}
 8000754:	4770      	bx	lr
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	08003228 	.word	0x08003228
 800075c:	08003200 	.word	0x08003200

08000760 <but_check>:

uint8_t but_check(uint8_t butled) {
	return ((BUT_PORT[butled]->IDR) & BUT_PIN[butled]) != 0 ? 0 : 1;
 8000760:	4a05      	ldr	r2, [pc, #20]	; (8000778 <but_check+0x18>)
 8000762:	0080      	lsls	r0, r0, #2
 8000764:	5882      	ldr	r2, [r0, r2]
 8000766:	4905      	ldr	r1, [pc, #20]	; (800077c <but_check+0x1c>)
 8000768:	6912      	ldr	r2, [r2, #16]
 800076a:	5840      	ldr	r0, [r0, r1]
 800076c:	4010      	ands	r0, r2
 800076e:	4243      	negs	r3, r0
 8000770:	4158      	adcs	r0, r3
 8000772:	b2c0      	uxtb	r0, r0
}
 8000774:	4770      	bx	lr
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	08003250 	.word	0x08003250
 800077c:	0800323c 	.word	0x0800323c

08000780 <but_update>:

void but_update() {
	for(uint8_t i = 0; i < 5; i++) {
		but_rel[i] = 0;
 8000780:	2300      	movs	r3, #0
	return ((BUT_PORT[butled]->IDR) & BUT_PIN[butled]) != 0 ? 0 : 1;
 8000782:	2180      	movs	r1, #128	; 0x80
		but_rel[i] = 0;
 8000784:	4a2e      	ldr	r2, [pc, #184]	; (8000840 <but_update+0xc0>)
void but_update() {
 8000786:	b510      	push	{r4, lr}
		but_rel[i] = 0;
 8000788:	7013      	strb	r3, [r2, #0]
	return ((BUT_PORT[butled]->IDR) & BUT_PIN[butled]) != 0 ? 0 : 1;
 800078a:	4b2e      	ldr	r3, [pc, #184]	; (8000844 <but_update+0xc4>)
 800078c:	0149      	lsls	r1, r1, #5
 800078e:	691b      	ldr	r3, [r3, #16]
 8000790:	400b      	ands	r3, r1
 8000792:	4259      	negs	r1, r3
 8000794:	4159      	adcs	r1, r3
 8000796:	b2c9      	uxtb	r1, r1
		uint8_t b = but_check(i);
		if(!b && but_pstat[i]) {but_rel[i] = 1;}
 8000798:	2b00      	cmp	r3, #0
 800079a:	d141      	bne.n	8000820 <but_update+0xa0>
 800079c:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <but_update+0xc8>)
		but_pstat[i] = b;
 800079e:	7019      	strb	r1, [r3, #0]
		but_rel[i] = 0;
 80007a0:	2100      	movs	r1, #0
	return ((BUT_PORT[butled]->IDR) & BUT_PIN[butled]) != 0 ? 0 : 1;
 80007a2:	2080      	movs	r0, #128	; 0x80
		but_rel[i] = 0;
 80007a4:	7051      	strb	r1, [r2, #1]
	return ((BUT_PORT[butled]->IDR) & BUT_PIN[butled]) != 0 ? 0 : 1;
 80007a6:	4927      	ldr	r1, [pc, #156]	; (8000844 <but_update+0xc4>)
 80007a8:	01c0      	lsls	r0, r0, #7
 80007aa:	6909      	ldr	r1, [r1, #16]
 80007ac:	4001      	ands	r1, r0
 80007ae:	4248      	negs	r0, r1
 80007b0:	4148      	adcs	r0, r1
 80007b2:	b2c0      	uxtb	r0, r0
		if(!b && but_pstat[i]) {but_rel[i] = 1;}
 80007b4:	2900      	cmp	r1, #0
 80007b6:	d002      	beq.n	80007be <but_update+0x3e>
 80007b8:	7859      	ldrb	r1, [r3, #1]
 80007ba:	2900      	cmp	r1, #0
 80007bc:	d13d      	bne.n	800083a <but_update+0xba>
		but_rel[i] = 0;
 80007be:	2100      	movs	r1, #0
 80007c0:	7091      	strb	r1, [r2, #2]
	return ((BUT_PORT[butled]->IDR) & BUT_PIN[butled]) != 0 ? 0 : 1;
 80007c2:	4922      	ldr	r1, [pc, #136]	; (800084c <but_update+0xcc>)
		but_pstat[i] = b;
 80007c4:	7058      	strb	r0, [r3, #1]
	return ((BUT_PORT[butled]->IDR) & BUT_PIN[butled]) != 0 ? 0 : 1;
 80007c6:	6908      	ldr	r0, [r1, #16]
 80007c8:	2140      	movs	r1, #64	; 0x40
 80007ca:	4001      	ands	r1, r0
 80007cc:	4248      	negs	r0, r1
 80007ce:	4148      	adcs	r0, r1
 80007d0:	b2c0      	uxtb	r0, r0
		if(!b && but_pstat[i]) {but_rel[i] = 1;}
 80007d2:	2900      	cmp	r1, #0
 80007d4:	d002      	beq.n	80007dc <but_update+0x5c>
 80007d6:	7899      	ldrb	r1, [r3, #2]
 80007d8:	2900      	cmp	r1, #0
 80007da:	d12b      	bne.n	8000834 <but_update+0xb4>
		but_rel[i] = 0;
 80007dc:	2100      	movs	r1, #0
 80007de:	70d1      	strb	r1, [r2, #3]
	return ((BUT_PORT[butled]->IDR) & BUT_PIN[butled]) != 0 ? 0 : 1;
 80007e0:	491a      	ldr	r1, [pc, #104]	; (800084c <but_update+0xcc>)
		but_pstat[i] = b;
 80007e2:	7098      	strb	r0, [r3, #2]
	return ((BUT_PORT[butled]->IDR) & BUT_PIN[butled]) != 0 ? 0 : 1;
 80007e4:	6908      	ldr	r0, [r1, #16]
 80007e6:	2180      	movs	r1, #128	; 0x80
 80007e8:	4001      	ands	r1, r0
 80007ea:	4248      	negs	r0, r1
 80007ec:	4148      	adcs	r0, r1
 80007ee:	b2c0      	uxtb	r0, r0
		if(!b && but_pstat[i]) {but_rel[i] = 1;}
 80007f0:	2900      	cmp	r1, #0
 80007f2:	d002      	beq.n	80007fa <but_update+0x7a>
 80007f4:	78d9      	ldrb	r1, [r3, #3]
 80007f6:	2900      	cmp	r1, #0
 80007f8:	d119      	bne.n	800082e <but_update+0xae>
		but_rel[i] = 0;
 80007fa:	2100      	movs	r1, #0
 80007fc:	7111      	strb	r1, [r2, #4]
	return ((BUT_PORT[butled]->IDR) & BUT_PIN[butled]) != 0 ? 0 : 1;
 80007fe:	4911      	ldr	r1, [pc, #68]	; (8000844 <but_update+0xc4>)
		but_pstat[i] = b;
 8000800:	70d8      	strb	r0, [r3, #3]
	return ((BUT_PORT[butled]->IDR) & BUT_PIN[butled]) != 0 ? 0 : 1;
 8000802:	6908      	ldr	r0, [r1, #16]
 8000804:	2140      	movs	r1, #64	; 0x40
 8000806:	4001      	ands	r1, r0
 8000808:	4248      	negs	r0, r1
 800080a:	4148      	adcs	r0, r1
 800080c:	b2c0      	uxtb	r0, r0
		if(!b && but_pstat[i]) {but_rel[i] = 1;}
 800080e:	2900      	cmp	r1, #0
 8000810:	d004      	beq.n	800081c <but_update+0x9c>
 8000812:	7919      	ldrb	r1, [r3, #4]
 8000814:	2900      	cmp	r1, #0
 8000816:	d001      	beq.n	800081c <but_update+0x9c>
 8000818:	2101      	movs	r1, #1
 800081a:	7111      	strb	r1, [r2, #4]
		but_pstat[i] = b;
 800081c:	7118      	strb	r0, [r3, #4]
	}
}
 800081e:	bd10      	pop	{r4, pc}
		if(!b && but_pstat[i]) {but_rel[i] = 1;}
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <but_update+0xc8>)
 8000822:	7818      	ldrb	r0, [r3, #0]
 8000824:	2800      	cmp	r0, #0
 8000826:	d0ba      	beq.n	800079e <but_update+0x1e>
 8000828:	2001      	movs	r0, #1
 800082a:	7010      	strb	r0, [r2, #0]
 800082c:	e7b7      	b.n	800079e <but_update+0x1e>
 800082e:	2101      	movs	r1, #1
 8000830:	70d1      	strb	r1, [r2, #3]
 8000832:	e7e2      	b.n	80007fa <but_update+0x7a>
 8000834:	2101      	movs	r1, #1
 8000836:	7091      	strb	r1, [r2, #2]
 8000838:	e7d0      	b.n	80007dc <but_update+0x5c>
 800083a:	2101      	movs	r1, #1
 800083c:	7051      	strb	r1, [r2, #1]
 800083e:	e7be      	b.n	80007be <but_update+0x3e>
 8000840:	20000144 	.word	0x20000144
 8000844:	48000400 	.word	0x48000400
 8000848:	2000013c 	.word	0x2000013c
 800084c:	48001400 	.word	0x48001400

08000850 <but_released>:

uint8_t but_released(uint8_t but) {
	return but_rel[but];
 8000850:	4b01      	ldr	r3, [pc, #4]	; (8000858 <but_released+0x8>)
 8000852:	5c18      	ldrb	r0, [r3, r0]
}
 8000854:	4770      	bx	lr
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	20000144 	.word	0x20000144

0800085c <clock_configure>:
#include <main.h>
#include <stm32f0xx.h>

void clock_configure(void) {
	// Set flash latency to 1 (since target clock > 24 MHz)
	FLASH->ACR |= FLASH_ACR_LATENCY;
 800085c:	2101      	movs	r1, #1
 800085e:	4a27      	ldr	r2, [pc, #156]	; (80008fc <clock_configure+0xa0>)
void clock_configure(void) {
 8000860:	b510      	push	{r4, lr}
	FLASH->ACR |= FLASH_ACR_LATENCY;
 8000862:	6813      	ldr	r3, [r2, #0]
 8000864:	430b      	orrs	r3, r1
 8000866:	6013      	str	r3, [r2, #0]
	WAITBIT(FLASH->ACR, FLASH_ACR_LATENCY);
 8000868:	6813      	ldr	r3, [r2, #0]
 800086a:	4219      	tst	r1, r3
 800086c:	d0fc      	beq.n	8000868 <clock_configure+0xc>


	// Set CSS to ON, enable HSE
	RCC->CR |= RCC_CR_CSSON | RCC_CR_HSEON;
 800086e:	2290      	movs	r2, #144	; 0x90
 8000870:	4b23      	ldr	r3, [pc, #140]	; (8000900 <clock_configure+0xa4>)
 8000872:	0312      	lsls	r2, r2, #12
 8000874:	6819      	ldr	r1, [r3, #0]
 8000876:	430a      	orrs	r2, r1
	WAITBIT(RCC->CR, RCC_CR_HSERDY);
 8000878:	2180      	movs	r1, #128	; 0x80
	RCC->CR |= RCC_CR_CSSON | RCC_CR_HSEON;
 800087a:	601a      	str	r2, [r3, #0]
	WAITBIT(RCC->CR, RCC_CR_HSERDY);
 800087c:	0289      	lsls	r1, r1, #10
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	420a      	tst	r2, r1
 8000882:	d0fc      	beq.n	800087e <clock_configure+0x22>

	// PLL: x6, Prediv = 0, Source = HSE (6 * 8 = 48 Mhz)
	MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, RCC_CFGR2_PREDIV_DIV1);
 8000884:	210f      	movs	r1, #15
 8000886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000888:	438a      	bics	r2, r1
 800088a:	62da      	str	r2, [r3, #44]	; 0x2c
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLMUL | RCC_CFGR_PLLSRC, RCC_CFGR_PLLMUL6 | RCC_CFGR_PLLSRC_HSE_PREDIV);
 800088c:	685a      	ldr	r2, [r3, #4]
 800088e:	491d      	ldr	r1, [pc, #116]	; (8000904 <clock_configure+0xa8>)
 8000890:	4011      	ands	r1, r2
 8000892:	2288      	movs	r2, #136	; 0x88
 8000894:	0352      	lsls	r2, r2, #13
 8000896:	430a      	orrs	r2, r1
 8000898:	605a      	str	r2, [r3, #4]

	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLMUL | RCC_CFGR_PLLSRC, RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLSRC_HSI_DIV2);
	*/

	//Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	6819      	ldr	r1, [r3, #0]
 800089e:	0452      	lsls	r2, r2, #17
 80008a0:	430a      	orrs	r2, r1
	WAITBIT(RCC->CR, RCC_CR_PLLRDY);
 80008a2:	2180      	movs	r1, #128	; 0x80
	RCC->CR |= RCC_CR_PLLON;
 80008a4:	601a      	str	r2, [r3, #0]
	WAITBIT(RCC->CR, RCC_CR_PLLRDY);
 80008a6:	4a16      	ldr	r2, [pc, #88]	; (8000900 <clock_configure+0xa4>)
 80008a8:	0489      	lsls	r1, r1, #18
 80008aa:	6813      	ldr	r3, [r2, #0]
 80008ac:	420b      	tst	r3, r1
 80008ae:	d0fc      	beq.n	80008aa <clock_configure+0x4e>

	// HPRE: Div1, PPRE: Div1 (AHB, APB bus clock = 48 Mhz)
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE | RCC_CFGR_PPRE, RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE_DIV1);
 80008b0:	6853      	ldr	r3, [r2, #4]
 80008b2:	4915      	ldr	r1, [pc, #84]	; (8000908 <clock_configure+0xac>)
 80008b4:	400b      	ands	r3, r1

	// Set clock source to PLL
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_CFGR_SW_PLL);
 80008b6:	2103      	movs	r1, #3
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE | RCC_CFGR_PPRE, RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE_DIV1);
 80008b8:	6053      	str	r3, [r2, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_CFGR_SW_PLL);
 80008ba:	6853      	ldr	r3, [r2, #4]
 80008bc:	438b      	bics	r3, r1
 80008be:	3901      	subs	r1, #1
 80008c0:	430b      	orrs	r3, r1
 80008c2:	6053      	str	r3, [r2, #4]
	WAITVAL(RCC->CFGR, RCC_CFGR_SWS, RCC_CFGR_SWS_PLL);
 80008c4:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <clock_configure+0xa4>)
 80008c6:	310a      	adds	r1, #10
 80008c8:	6853      	ldr	r3, [r2, #4]
 80008ca:	400b      	ands	r3, r1
 80008cc:	2b08      	cmp	r3, #8
 80008ce:	d1fb      	bne.n	80008c8 <clock_configure+0x6c>

	// ADC Clock
	RCC->CR2 |= RCC_CR2_HSI14ON;
 80008d0:	2101      	movs	r1, #1
 80008d2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80008d4:	430b      	orrs	r3, r1
 80008d6:	6353      	str	r3, [r2, #52]	; 0x34
	WAITBIT(RCC->CR2, RCC_CR2_HSI14RDY);
 80008d8:	2202      	movs	r2, #2
 80008da:	4909      	ldr	r1, [pc, #36]	; (8000900 <clock_configure+0xa4>)
 80008dc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80008de:	421a      	tst	r2, r3
 80008e0:	d0fc      	beq.n	80008dc <clock_configure+0x80>
	// MODIFY_REG(RCC->CR2, RCC_CR2_HSI14CAL, 16 << RCC_CR2_HSI14CAL_Pos); // Not required?

	SystemCoreClockUpdate();
 80008e2:	f002 f8b1 	bl	8002a48 <SystemCoreClockUpdate>
  __ASM volatile ("cpsid i" : : : "memory");
 80008e6:	b672      	cpsid	i

	__disable_irq();
	SysTick->LOAD = 6000;
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <clock_configure+0xb0>)
 80008ea:	4a09      	ldr	r2, [pc, #36]	; (8000910 <clock_configure+0xb4>)
 80008ec:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
 80008ee:	2201      	movs	r2, #1
 80008f0:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0UL;
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80008f6:	b662      	cpsie	i
	__enable_irq();
}
 80008f8:	bd10      	pop	{r4, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	40022000 	.word	0x40022000
 8000900:	40021000 	.word	0x40021000
 8000904:	ffc2ffff 	.word	0xffc2ffff
 8000908:	fffff80f 	.word	0xfffff80f
 800090c:	e000e010 	.word	0xe000e010
 8000910:	00001770 	.word	0x00001770

08000914 <_delayMs>:

void _delayMs(uint32_t del) {
	SysTick->VAL = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	4a06      	ldr	r2, [pc, #24]	; (8000930 <_delayMs+0x1c>)
 8000918:	6093      	str	r3, [r2, #8]
	while (del) {
 800091a:	2800      	cmp	r0, #0
 800091c:	d007      	beq.n	800092e <_delayMs+0x1a>
		if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800091e:	2180      	movs	r1, #128	; 0x80
 8000920:	0249      	lsls	r1, r1, #9
 8000922:	6813      	ldr	r3, [r2, #0]
 8000924:	420b      	tst	r3, r1
 8000926:	d0fc      	beq.n	8000922 <_delayMs+0xe>
		{
			del--;
 8000928:	3801      	subs	r0, #1
 800092a:	2800      	cmp	r0, #0
 800092c:	d1f9      	bne.n	8000922 <_delayMs+0xe>
	    }
	}
}
 800092e:	4770      	bx	lr
 8000930:	e000e010 	.word	0xe000e010

08000934 <eeprom_read8>:

#include "main.h"
#include "i2c.h"
#include "eeprom.h"

uint8_t eeprom_read8(uint8_t addr) {
 8000934:	b510      	push	{r4, lr}
	RETERR(i2c1_transmission_start(0b1010000, I2C_WRITE, 1, 10000), 0);
 8000936:	2201      	movs	r2, #1
uint8_t eeprom_read8(uint8_t addr) {
 8000938:	0004      	movs	r4, r0
	RETERR(i2c1_transmission_start(0b1010000, I2C_WRITE, 1, 10000), 0);
 800093a:	2100      	movs	r1, #0
 800093c:	2050      	movs	r0, #80	; 0x50
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <eeprom_read8+0x4c>)
 8000940:	f000 f920 	bl	8000b84 <i2c1_transmission_start>
 8000944:	2800      	cmp	r0, #0
 8000946:	d001      	beq.n	800094c <eeprom_read8+0x18>
 8000948:	2000      	movs	r0, #0
	RETERR(i2c1_transmission_write8(addr), 0);
	RETERR(i2c1_transmission_end(I2C_WRITE), 0);
	RETERR(i2c1_transmission_start(0b1010000, I2C_READ, 1, 10000), 0);
	RETERR(i2c1_transmission_end(I2C_READ), 0);
	return i2c1_dr();
}
 800094a:	bd10      	pop	{r4, pc}
	RETERR(i2c1_transmission_write8(addr), 0);
 800094c:	0020      	movs	r0, r4
 800094e:	f000 f9a3 	bl	8000c98 <i2c1_transmission_write8>
 8000952:	2800      	cmp	r0, #0
 8000954:	d1f8      	bne.n	8000948 <eeprom_read8+0x14>
	RETERR(i2c1_transmission_end(I2C_WRITE), 0);
 8000956:	f000 f959 	bl	8000c0c <i2c1_transmission_end>
 800095a:	2800      	cmp	r0, #0
 800095c:	d1f4      	bne.n	8000948 <eeprom_read8+0x14>
	RETERR(i2c1_transmission_start(0b1010000, I2C_READ, 1, 10000), 0);
 800095e:	2201      	movs	r2, #1
 8000960:	2101      	movs	r1, #1
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <eeprom_read8+0x4c>)
 8000964:	3050      	adds	r0, #80	; 0x50
 8000966:	f000 f90d 	bl	8000b84 <i2c1_transmission_start>
 800096a:	2800      	cmp	r0, #0
 800096c:	d1ec      	bne.n	8000948 <eeprom_read8+0x14>
	RETERR(i2c1_transmission_end(I2C_READ), 0);
 800096e:	3001      	adds	r0, #1
 8000970:	f000 f94c 	bl	8000c0c <i2c1_transmission_end>
 8000974:	2800      	cmp	r0, #0
 8000976:	d1e7      	bne.n	8000948 <eeprom_read8+0x14>
	return i2c1_dr();
 8000978:	f000 fa04 	bl	8000d84 <i2c1_dr>
 800097c:	e7e5      	b.n	800094a <eeprom_read8+0x16>
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	00002710 	.word	0x00002710

08000984 <eeprom_write8>:
uint8_t eeprom_write8(uint8_t addr, uint8_t data) {
 8000984:	b570      	push	{r4, r5, r6, lr}
	RETERR(i2c1_transmission_start(0b1010000 , I2C_WRITE, 2, 10000), i2c1_get_error());
 8000986:	2202      	movs	r2, #2
uint8_t eeprom_write8(uint8_t addr, uint8_t data) {
 8000988:	0004      	movs	r4, r0
 800098a:	000d      	movs	r5, r1
	RETERR(i2c1_transmission_start(0b1010000 , I2C_WRITE, 2, 10000), i2c1_get_error());
 800098c:	2050      	movs	r0, #80	; 0x50
 800098e:	2100      	movs	r1, #0
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <eeprom_write8+0x38>)
 8000992:	f000 f8f7 	bl	8000b84 <i2c1_transmission_start>
 8000996:	2800      	cmp	r0, #0
 8000998:	d10c      	bne.n	80009b4 <eeprom_write8+0x30>
	RETERR(i2c1_transmission_write8(addr), i2c1_get_error());
 800099a:	0020      	movs	r0, r4
 800099c:	f000 f97c 	bl	8000c98 <i2c1_transmission_write8>
 80009a0:	2800      	cmp	r0, #0
 80009a2:	d107      	bne.n	80009b4 <eeprom_write8+0x30>
	RETERR(i2c1_transmission_write8(data), i2c1_get_error());
 80009a4:	0028      	movs	r0, r5
 80009a6:	f000 f977 	bl	8000c98 <i2c1_transmission_write8>
 80009aa:	2800      	cmp	r0, #0
 80009ac:	d102      	bne.n	80009b4 <eeprom_write8+0x30>
	i2c1_transmission_end(I2C_WRITE);
 80009ae:	2000      	movs	r0, #0
 80009b0:	f000 f92c 	bl	8000c0c <i2c1_transmission_end>
	return i2c1_get_error();
 80009b4:	f000 f8e0 	bl	8000b78 <i2c1_get_error>
}
 80009b8:	bd70      	pop	{r4, r5, r6, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	00002710 	.word	0x00002710

080009c0 <eeprom_write_buffer>:
	RETERR(i2c1_transmission_read8(&v), 0);
	RETERR(i2c1_transmission_end(I2C_READ), 0);
	return (v) | ((uint16_t)i2c1_dr() << 8);
}

uint8_t eeprom_write_buffer(uint8_t addr, const volatile uint8_t* buf, uint16_t len) {
 80009c0:	b570      	push	{r4, r5, r6, lr}
 80009c2:	0005      	movs	r5, r0
 80009c4:	000e      	movs	r6, r1
 80009c6:	1e14      	subs	r4, r2, #0
	if(len == 0) {return i2c1_get_error();}
 80009c8:	d022      	beq.n	8000a10 <eeprom_write_buffer+0x50>
	RETERR(i2c1_transmission_start(0b1010000 , I2C_WRITE, 1 + len, 10000), i2c1_get_error());
 80009ca:	3201      	adds	r2, #1
 80009cc:	2100      	movs	r1, #0
 80009ce:	2050      	movs	r0, #80	; 0x50
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <eeprom_write_buffer+0x60>)
 80009d2:	b2d2      	uxtb	r2, r2
 80009d4:	f000 f8d6 	bl	8000b84 <i2c1_transmission_start>
 80009d8:	2800      	cmp	r0, #0
 80009da:	d119      	bne.n	8000a10 <eeprom_write_buffer+0x50>
	RETERR(i2c1_transmission_write8(addr), i2c1_get_error());
 80009dc:	0028      	movs	r0, r5
 80009de:	f000 f95b 	bl	8000c98 <i2c1_transmission_write8>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	d114      	bne.n	8000a10 <eeprom_write_buffer+0x50>
	RETERR(i2c1_transmission_write8(buf[0]), i2c1_get_error());
 80009e6:	7830      	ldrb	r0, [r6, #0]
 80009e8:	b2c0      	uxtb	r0, r0
 80009ea:	f000 f955 	bl	8000c98 <i2c1_transmission_write8>
 80009ee:	2800      	cmp	r0, #0
 80009f0:	d10e      	bne.n	8000a10 <eeprom_write_buffer+0x50>
	//i2c1_transmission_ack_disable();
	for(uint8_t i = 1; i < len; i++) {
 80009f2:	2501      	movs	r5, #1
 80009f4:	2c01      	cmp	r4, #1
 80009f6:	d804      	bhi.n	8000a02 <eeprom_write_buffer+0x42>
 80009f8:	e00d      	b.n	8000a16 <eeprom_write_buffer+0x56>
 80009fa:	1c6b      	adds	r3, r5, #1
 80009fc:	b2dd      	uxtb	r5, r3
 80009fe:	42a5      	cmp	r5, r4
 8000a00:	d209      	bcs.n	8000a16 <eeprom_write_buffer+0x56>
		RETERR(i2c1_transmission_write8(buf[i]), i2c1_get_error());
 8000a02:	1973      	adds	r3, r6, r5
 8000a04:	7818      	ldrb	r0, [r3, #0]
 8000a06:	b2c0      	uxtb	r0, r0
 8000a08:	f000 f946 	bl	8000c98 <i2c1_transmission_write8>
 8000a0c:	2800      	cmp	r0, #0
 8000a0e:	d0f4      	beq.n	80009fa <eeprom_write_buffer+0x3a>
	}
	i2c1_transmission_end(I2C_WRITE);
	return i2c1_get_error();
 8000a10:	f000 f8b2 	bl	8000b78 <i2c1_get_error>
}
 8000a14:	bd70      	pop	{r4, r5, r6, pc}
	i2c1_transmission_end(I2C_WRITE);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f000 f8f8 	bl	8000c0c <i2c1_transmission_end>
 8000a1c:	e7f8      	b.n	8000a10 <eeprom_write_buffer+0x50>
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	00002710 	.word	0x00002710

08000a24 <eeprom_read_buffer>:

uint8_t eeprom_read_buffer(uint8_t addr, volatile uint8_t* buf, uint16_t len) {
 8000a24:	b570      	push	{r4, r5, r6, lr}
	RETERR(i2c1_transmission_start(0b1010000 , I2C_WRITE, 1, 10000), 0);
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <eeprom_read_buffer+0x3c>)
uint8_t eeprom_read_buffer(uint8_t addr, volatile uint8_t* buf, uint16_t len) {
 8000a28:	0004      	movs	r4, r0
 8000a2a:	000e      	movs	r6, r1
 8000a2c:	0015      	movs	r5, r2
	RETERR(i2c1_transmission_start(0b1010000 , I2C_WRITE, 1, 10000), 0);
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2201      	movs	r2, #1
 8000a32:	2050      	movs	r0, #80	; 0x50
 8000a34:	f000 f8a6 	bl	8000b84 <i2c1_transmission_start>
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	d001      	beq.n	8000a40 <eeprom_read_buffer+0x1c>
 8000a3c:	2000      	movs	r0, #0
	RETERR(i2c1_transmission_write8(addr), 0);
	RETERR(i2c1_transmission_end(I2C_WRITE), 0);
	return i2c1_read(0b1010000, len, buf, 10000);
}
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
	RETERR(i2c1_transmission_write8(addr), 0);
 8000a40:	0020      	movs	r0, r4
 8000a42:	f000 f929 	bl	8000c98 <i2c1_transmission_write8>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	d1f8      	bne.n	8000a3c <eeprom_read_buffer+0x18>
	RETERR(i2c1_transmission_end(I2C_WRITE), 0);
 8000a4a:	f000 f8df 	bl	8000c0c <i2c1_transmission_end>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	d1f4      	bne.n	8000a3c <eeprom_read_buffer+0x18>
	return i2c1_read(0b1010000, len, buf, 10000);
 8000a52:	0032      	movs	r2, r6
 8000a54:	0029      	movs	r1, r5
 8000a56:	4b02      	ldr	r3, [pc, #8]	; (8000a60 <eeprom_read_buffer+0x3c>)
 8000a58:	3050      	adds	r0, #80	; 0x50
 8000a5a:	f000 f939 	bl	8000cd0 <i2c1_read>
 8000a5e:	e7ee      	b.n	8000a3e <eeprom_read_buffer+0x1a>
 8000a60:	00002710 	.word	0x00002710

08000a64 <i2c1_init>:

volatile uint8_t _i2c1_error = 0;
//volatile uint32_t _i2c_dmaint = 0;

void i2c1_init() {
	_i2c1_error = 0;
 8000a64:	2200      	movs	r2, #0
 8000a66:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <i2c1_init+0xc8>)
void i2c1_init() {
 8000a68:	b570      	push	{r4, r5, r6, lr}
	_i2c1_error = 0;
 8000a6a:	701a      	strb	r2, [r3, #0]

	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	4a30      	ldr	r2, [pc, #192]	; (8000b30 <i2c1_init+0xcc>)
 8000a70:	02db      	lsls	r3, r3, #11
 8000a72:	6951      	ldr	r1, [r2, #20]
	// Set PB6, PB7 to AF
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER8,	0b10 << GPIO_MODER_MODER8_Pos);
 8000a74:	482f      	ldr	r0, [pc, #188]	; (8000b34 <i2c1_init+0xd0>)
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000a76:	430b      	orrs	r3, r1
 8000a78:	6153      	str	r3, [r2, #20]
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER8,	0b10 << GPIO_MODER_MODER8_Pos);
 8000a7a:	4b2f      	ldr	r3, [pc, #188]	; (8000b38 <i2c1_init+0xd4>)
	MODIFY_REG(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_Msk | GPIO_AFRH_AFSEL9_Msk, (1 << GPIO_AFRH_AFSEL8_Pos) | (1 << GPIO_AFRH_AFSEL9_Pos));

	// Enable I2C1 clock, reset it
	RCC->CFGR3 |= RCC_CFGR3_I2C1SW_SYSCLK;
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
	I2C1->CR1 &= ~I2C_CR1_PE;
 8000a7c:	2501      	movs	r5, #1
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER8,	0b10 << GPIO_MODER_MODER8_Pos);
 8000a7e:	6819      	ldr	r1, [r3, #0]
	I2C1->CR1 &= ~I2C_CR1_PE;
 8000a80:	4c2e      	ldr	r4, [pc, #184]	; (8000b3c <i2c1_init+0xd8>)
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER8,	0b10 << GPIO_MODER_MODER8_Pos);
 8000a82:	4008      	ands	r0, r1
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	0289      	lsls	r1, r1, #10
 8000a88:	4301      	orrs	r1, r0
 8000a8a:	6019      	str	r1, [r3, #0]
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER9,	0b10 << GPIO_MODER_MODER9_Pos);
 8000a8c:	6819      	ldr	r1, [r3, #0]
 8000a8e:	482c      	ldr	r0, [pc, #176]	; (8000b40 <i2c1_init+0xdc>)
 8000a90:	4008      	ands	r0, r1
 8000a92:	2180      	movs	r1, #128	; 0x80
 8000a94:	0309      	lsls	r1, r1, #12
 8000a96:	4301      	orrs	r1, r0
 8000a98:	6019      	str	r1, [r3, #0]
	MODIFY_REG(GPIOB->OTYPER, GPIO_OTYPER_OT_8, GPIO_OTYPER_OT_8);
 8000a9a:	2180      	movs	r1, #128	; 0x80
 8000a9c:	6858      	ldr	r0, [r3, #4]
 8000a9e:	0049      	lsls	r1, r1, #1
 8000aa0:	4301      	orrs	r1, r0
 8000aa2:	6059      	str	r1, [r3, #4]
	MODIFY_REG(GPIOB->OTYPER, GPIO_OTYPER_OT_9, GPIO_OTYPER_OT_9);
 8000aa4:	2180      	movs	r1, #128	; 0x80
 8000aa6:	6858      	ldr	r0, [r3, #4]
 8000aa8:	0089      	lsls	r1, r1, #2
 8000aaa:	4301      	orrs	r1, r0
 8000aac:	6059      	str	r1, [r3, #4]
	MODIFY_REG(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR8, 0b11 << GPIO_OSPEEDR_OSPEEDR8_Pos);
 8000aae:	21c0      	movs	r1, #192	; 0xc0
 8000ab0:	6898      	ldr	r0, [r3, #8]
 8000ab2:	0289      	lsls	r1, r1, #10
 8000ab4:	4301      	orrs	r1, r0
 8000ab6:	6099      	str	r1, [r3, #8]
	MODIFY_REG(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR9, 0b11 << GPIO_OSPEEDR_OSPEEDR9_Pos);
 8000ab8:	21c0      	movs	r1, #192	; 0xc0
 8000aba:	6898      	ldr	r0, [r3, #8]
 8000abc:	0309      	lsls	r1, r1, #12
 8000abe:	4301      	orrs	r1, r0
	MODIFY_REG(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_Msk | GPIO_AFRH_AFSEL9_Msk, (1 << GPIO_AFRH_AFSEL8_Pos) | (1 << GPIO_AFRH_AFSEL9_Pos));
 8000ac0:	20ff      	movs	r0, #255	; 0xff
	MODIFY_REG(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR9, 0b11 << GPIO_OSPEEDR_OSPEEDR9_Pos);
 8000ac2:	6099      	str	r1, [r3, #8]
	MODIFY_REG(GPIOB->AFR[1], GPIO_AFRH_AFSEL8_Msk | GPIO_AFRH_AFSEL9_Msk, (1 << GPIO_AFRH_AFSEL8_Pos) | (1 << GPIO_AFRH_AFSEL9_Pos));
 8000ac4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000ac6:	4381      	bics	r1, r0
 8000ac8:	38ee      	subs	r0, #238	; 0xee
 8000aca:	4301      	orrs	r1, r0
 8000acc:	6259      	str	r1, [r3, #36]	; 0x24
	RCC->CFGR3 |= RCC_CFGR3_I2C1SW_SYSCLK;
 8000ace:	2110      	movs	r1, #16
 8000ad0:	6b13      	ldr	r3, [r2, #48]	; 0x30
	_delayMs(1);
 8000ad2:	3810      	subs	r0, #16
	RCC->CFGR3 |= RCC_CFGR3_I2C1SW_SYSCLK;
 8000ad4:	430b      	orrs	r3, r1
 8000ad6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	69d1      	ldr	r1, [r2, #28]
 8000adc:	039b      	lsls	r3, r3, #14
 8000ade:	430b      	orrs	r3, r1
 8000ae0:	61d3      	str	r3, [r2, #28]
	I2C1->CR1 &= ~I2C_CR1_PE;
 8000ae2:	6823      	ldr	r3, [r4, #0]
 8000ae4:	43ab      	bics	r3, r5
 8000ae6:	6023      	str	r3, [r4, #0]
	_delayMs(1);
 8000ae8:	f7ff ff14 	bl	8000914 <_delayMs>

	// No global call, enable clock stretch, disable I2C
	MODIFY_REG(I2C1->CR1, I2C_CR1_GCEN | I2C_CR1_NOSTRETCH | I2C_CR1_PE, 0);
 8000aec:	6823      	ldr	r3, [r4, #0]
 8000aee:	4a15      	ldr	r2, [pc, #84]	; (8000b44 <i2c1_init+0xe0>)
 8000af0:	20c5      	movs	r0, #197	; 0xc5
 8000af2:	4013      	ands	r3, r2
 8000af4:	6023      	str	r3, [r4, #0]

	I2C1->TIMINGR = (uint32_t)0x00B01A4B; // W. H. A. T.
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <i2c1_init+0xe4>)
 8000af8:	21c0      	movs	r1, #192	; 0xc0
 8000afa:	6123      	str	r3, [r4, #16]
	I2C1->OAR1 |= I2C_OAR1_OA1EN;
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	68a2      	ldr	r2, [r4, #8]
 8000b00:	021b      	lsls	r3, r3, #8
 8000b02:	4313      	orrs	r3, r2
	I2C1->CR1 |= I2C_CR1_PE;

	I2C1->CR1 |= I2C_CR1_ERRIE | I2C_CR1_NACKIE;
 8000b04:	2290      	movs	r2, #144	; 0x90
	I2C1->OAR1 |= I2C_OAR1_OA1EN;
 8000b06:	60a3      	str	r3, [r4, #8]
	I2C1->CR1 |= I2C_CR1_PE;
 8000b08:	6823      	ldr	r3, [r4, #0]
 8000b0a:	0080      	lsls	r0, r0, #2
 8000b0c:	432b      	orrs	r3, r5
 8000b0e:	6023      	str	r3, [r4, #0]
	I2C1->CR1 |= I2C_CR1_ERRIE | I2C_CR1_NACKIE;
 8000b10:	6823      	ldr	r3, [r4, #0]
 8000b12:	0609      	lsls	r1, r1, #24
 8000b14:	4313      	orrs	r3, r2
 8000b16:	6023      	str	r3, [r4, #0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	4a0c      	ldr	r2, [pc, #48]	; (8000b4c <i2c1_init+0xe8>)
 8000b1c:	041b      	lsls	r3, r3, #16
 8000b1e:	6013      	str	r3, [r2, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b20:	5813      	ldr	r3, [r2, r0]
 8000b22:	021b      	lsls	r3, r3, #8
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	430b      	orrs	r3, r1
 8000b28:	5013      	str	r3, [r2, r0]
	for(uint8_t i = 0; i < 0xFE; i++) {}

	NVIC_EnableIRQ(I2C1_IRQn);
	NVIC_SetPriority(I2C1_IRQn, 3);
}
 8000b2a:	bd70      	pop	{r4, r5, r6, pc}
 8000b2c:	20000149 	.word	0x20000149
 8000b30:	40021000 	.word	0x40021000
 8000b34:	fffcffff 	.word	0xfffcffff
 8000b38:	48000400 	.word	0x48000400
 8000b3c:	40005400 	.word	0x40005400
 8000b40:	fff3ffff 	.word	0xfff3ffff
 8000b44:	fff5fffe 	.word	0xfff5fffe
 8000b48:	00b01a4b 	.word	0x00b01a4b
 8000b4c:	e000e100 	.word	0xe000e100

08000b50 <I2C1_IRQHandler>:
	}
	return _i2c1_error;
}

void I2C1_IRQHandler(void) {
	_i2c1_error |= ((I2C1->ISR) >> 8) & 0b11111;
 8000b50:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <I2C1_IRQHandler+0x1c>)
 8000b52:	4807      	ldr	r0, [pc, #28]	; (8000b70 <I2C1_IRQHandler+0x20>)
 8000b54:	6993      	ldr	r3, [r2, #24]
 8000b56:	7801      	ldrb	r1, [r0, #0]
 8000b58:	04db      	lsls	r3, r3, #19
 8000b5a:	0edb      	lsrs	r3, r3, #27
 8000b5c:	430b      	orrs	r3, r1
 8000b5e:	7003      	strb	r3, [r0, #0]
	//DMA1_Channel6->CCR &= ~DMA_CCR_EN;
	// SmBus errors are just ignored
	I2C1->ICR |=  I2C_ICR_NACKCF | I2C_ICR_BERRCF | I2C_ICR_ARLOCF | I2C_ICR_OVRCF | I2C_ICR_TIMOUTCF;
 8000b60:	69d1      	ldr	r1, [r2, #28]
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <I2C1_IRQHandler+0x24>)
 8000b64:	430b      	orrs	r3, r1
 8000b66:	61d3      	str	r3, [r2, #28]
}
 8000b68:	4770      	bx	lr
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	40005400 	.word	0x40005400
 8000b70:	20000149 	.word	0x20000149
 8000b74:	00001710 	.word	0x00001710

08000b78 <i2c1_get_error>:
}
void i2c1_reset_error() {
	_i2c1_error = 0;
}
uint8_t i2c1_get_error() {
	return _i2c1_error;
 8000b78:	4b01      	ldr	r3, [pc, #4]	; (8000b80 <i2c1_get_error+0x8>)
 8000b7a:	7818      	ldrb	r0, [r3, #0]
 8000b7c:	b2c0      	uxtb	r0, r0
}
 8000b7e:	4770      	bx	lr
 8000b80:	20000149 	.word	0x20000149

08000b84 <i2c1_transmission_start>:

// Manual transmission functions
uint8_t i2c1_transmission_busy() {
	return ((I2C1->ISR) & I2C_ISR_BUSY) == I2C_ISR_BUSY ? 1 : 0;
}
uint8_t i2c1_transmission_start(uint8_t addr, _i2c_wrmode mode, uint8_t nBytes, uint16_t busy_timeout) {
 8000b84:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Return if any error occurred earlier immediately, wait while I2C is busy
	if(_i2c1_error != 0) {return _i2c1_error;}
 8000b86:	4f1e      	ldr	r7, [pc, #120]	; (8000c00 <i2c1_transmission_start+0x7c>)
 8000b88:	783c      	ldrb	r4, [r7, #0]
 8000b8a:	2c00      	cmp	r4, #0
 8000b8c:	d12c      	bne.n	8000be8 <i2c1_transmission_start+0x64>
	uint16_t tmo_busy = busy_timeout;
	while((((I2C1->ISR) & I2C_ISR_BUSY) == I2C_ISR_BUSY) && (tmo_busy > 0)) {tmo_busy--;}
 8000b8e:	2580      	movs	r5, #128	; 0x80
 8000b90:	4e1c      	ldr	r6, [pc, #112]	; (8000c04 <i2c1_transmission_start+0x80>)
 8000b92:	022d      	lsls	r5, r5, #8
 8000b94:	69b4      	ldr	r4, [r6, #24]
 8000b96:	422c      	tst	r4, r5
 8000b98:	d105      	bne.n	8000ba6 <i2c1_transmission_start+0x22>
 8000b9a:	e028      	b.n	8000bee <i2c1_transmission_start+0x6a>
 8000b9c:	69b4      	ldr	r4, [r6, #24]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	422c      	tst	r4, r5
 8000ba4:	d023      	beq.n	8000bee <i2c1_transmission_start+0x6a>
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d1f8      	bne.n	8000b9c <i2c1_transmission_start+0x18>
	if(tmo_busy == 0) {_i2c1_error |= I2C_ERR_BUSY;}
 8000baa:	2440      	movs	r4, #64	; 0x40
 8000bac:	783b      	ldrb	r3, [r7, #0]
 8000bae:	4323      	orrs	r3, r4
 8000bb0:	703b      	strb	r3, [r7, #0]

	if(_i2c1_error != 0) {return _i2c1_error;}
 8000bb2:	783b      	ldrb	r3, [r7, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d117      	bne.n	8000be8 <i2c1_transmission_start+0x64>

	// Send start condition
	I2C1->CR2 = (nBytes << 16) | (addr << 1) | I2C_CR2_START | (mode == I2C_READ ? I2C_CR2_RD_WRN : 0);
 8000bb8:	0412      	lsls	r2, r2, #16
 8000bba:	0040      	lsls	r0, r0, #1
 8000bbc:	4310      	orrs	r0, r2
 8000bbe:	2901      	cmp	r1, #1
 8000bc0:	d102      	bne.n	8000bc8 <i2c1_transmission_start+0x44>
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	4318      	orrs	r0, r3
 8000bc8:	2280      	movs	r2, #128	; 0x80
 8000bca:	490e      	ldr	r1, [pc, #56]	; (8000c04 <i2c1_transmission_start+0x80>)
 8000bcc:	0192      	lsls	r2, r2, #6
 8000bce:	4310      	orrs	r0, r2
 8000bd0:	6048      	str	r0, [r1, #4]
	while(((I2C1->ISR) & bit) != bit) {
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <i2c1_transmission_start+0x84>)
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	e003      	b.n	8000be0 <i2c1_transmission_start+0x5c>
		if((timeOut++ > I2C1_TMO_VAL) && (I2C1_TMO_VAL != 0)) {
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d009      	beq.n	8000bf4 <i2c1_transmission_start+0x70>
	while(((I2C1->ISR) & bit) != bit) {
 8000be0:	698a      	ldr	r2, [r1, #24]
 8000be2:	4210      	tst	r0, r2
 8000be4:	d0f8      	beq.n	8000bd8 <i2c1_transmission_start+0x54>
	return _i2c1_error;
 8000be6:	783b      	ldrb	r3, [r7, #0]
	i2c1_waitBit(I2C_ISR_TXE);
	return _i2c1_error;
 8000be8:	7838      	ldrb	r0, [r7, #0]
 8000bea:	b2c0      	uxtb	r0, r0
}
 8000bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(tmo_busy == 0) {_i2c1_error |= I2C_ERR_BUSY;}
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1df      	bne.n	8000bb2 <i2c1_transmission_start+0x2e>
 8000bf2:	e7da      	b.n	8000baa <i2c1_transmission_start+0x26>
			_i2c1_error |= I2C_ERR_TMO;
 8000bf4:	2220      	movs	r2, #32
 8000bf6:	783b      	ldrb	r3, [r7, #0]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	703b      	strb	r3, [r7, #0]
	return _i2c1_error;
 8000bfc:	783b      	ldrb	r3, [r7, #0]
 8000bfe:	e7f3      	b.n	8000be8 <i2c1_transmission_start+0x64>
 8000c00:	20000149 	.word	0x20000149
 8000c04:	40005400 	.word	0x40005400
 8000c08:	0000c352 	.word	0x0000c352

08000c0c <i2c1_transmission_end>:
uint8_t i2c1_transmission_end(_i2c_wrmode mode) {
 8000c0c:	b510      	push	{r4, lr}
	if(mode == I2C_WRITE) {
 8000c0e:	2800      	cmp	r0, #0
 8000c10:	d012      	beq.n	8000c38 <i2c1_transmission_end+0x2c>
		// Send stop condition
		I2C1->CR2 |= I2C_CR2_STOP;
		(void) I2C1->ISR;
		I2C1->ICR |= I2C_ICR_STOPCF;
	} else {
		WAITBIT(I2C1->ISR, I2C_ISR_RXNE);
 8000c12:	2104      	movs	r1, #4
 8000c14:	4a1e      	ldr	r2, [pc, #120]	; (8000c90 <i2c1_transmission_end+0x84>)
 8000c16:	6993      	ldr	r3, [r2, #24]
 8000c18:	4219      	tst	r1, r3
 8000c1a:	d0fc      	beq.n	8000c16 <i2c1_transmission_end+0xa>
		I2C1->CR2 |= I2C_CR2_STOP;
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	6851      	ldr	r1, [r2, #4]
 8000c20:	01db      	lsls	r3, r3, #7
 8000c22:	430b      	orrs	r3, r1
		(void) I2C1->ISR;
		I2C1->ICR |= I2C_ICR_STOPCF;
 8000c24:	2120      	movs	r1, #32
		I2C1->CR2 |= I2C_CR2_STOP;
 8000c26:	6053      	str	r3, [r2, #4]
		(void) I2C1->ISR;
 8000c28:	6993      	ldr	r3, [r2, #24]
		I2C1->ICR |= I2C_ICR_STOPCF;
 8000c2a:	69d3      	ldr	r3, [r2, #28]
 8000c2c:	430b      	orrs	r3, r1
 8000c2e:	4919      	ldr	r1, [pc, #100]	; (8000c94 <i2c1_transmission_end+0x88>)
 8000c30:	61d3      	str	r3, [r2, #28]

	}
	return _i2c1_error;
 8000c32:	7808      	ldrb	r0, [r1, #0]
 8000c34:	b2c0      	uxtb	r0, r0
}
 8000c36:	bd10      	pop	{r4, pc}
			(((I2C1->ISR) & I2C_ISR_TC) != I2C_ISR_TC) &&
 8000c38:	4815      	ldr	r0, [pc, #84]	; (8000c90 <i2c1_transmission_end+0x84>)
 8000c3a:	6983      	ldr	r3, [r0, #24]
		while(
 8000c3c:	065b      	lsls	r3, r3, #25
 8000c3e:	d424      	bmi.n	8000c8a <i2c1_transmission_end+0x7e>
		uint16_t tmo = 1000;
 8000c40:	23fa      	movs	r3, #250	; 0xfa
			(((I2C1->ISR) & I2C_ISR_TC) != I2C_ISR_TC) &&
 8000c42:	2440      	movs	r4, #64	; 0x40
 8000c44:	4913      	ldr	r1, [pc, #76]	; (8000c94 <i2c1_transmission_end+0x88>)
		uint16_t tmo = 1000;
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	e006      	b.n	8000c58 <i2c1_transmission_end+0x4c>
			(_i2c1_error == 0) &&
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d018      	beq.n	8000c80 <i2c1_transmission_end+0x74>
			(((I2C1->ISR) & I2C_ISR_TC) != I2C_ISR_TC) &&
 8000c4e:	6982      	ldr	r2, [r0, #24]
		) {tmo--;};
 8000c50:	3b01      	subs	r3, #1
 8000c52:	b29b      	uxth	r3, r3
		while(
 8000c54:	4214      	tst	r4, r2
 8000c56:	d102      	bne.n	8000c5e <i2c1_transmission_end+0x52>
			(_i2c1_error == 0) &&
 8000c58:	780a      	ldrb	r2, [r1, #0]
			(((I2C1->ISR) & I2C_ISR_TC) != I2C_ISR_TC) &&
 8000c5a:	2a00      	cmp	r2, #0
 8000c5c:	d0f5      	beq.n	8000c4a <i2c1_transmission_end+0x3e>
		if(tmo == 0) {_i2c1_error |= I2C_ERR_TMO;}
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d00e      	beq.n	8000c80 <i2c1_transmission_end+0x74>
		if(_i2c1_error != 0) {return _i2c1_error;}
 8000c62:	780b      	ldrb	r3, [r1, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1e4      	bne.n	8000c32 <i2c1_transmission_end+0x26>
		I2C1->CR2 |= I2C_CR2_STOP;
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <i2c1_transmission_end+0x84>)
 8000c6c:	01d2      	lsls	r2, r2, #7
 8000c6e:	6858      	ldr	r0, [r3, #4]
 8000c70:	4302      	orrs	r2, r0
		I2C1->ICR |= I2C_ICR_STOPCF;
 8000c72:	2020      	movs	r0, #32
		I2C1->CR2 |= I2C_CR2_STOP;
 8000c74:	605a      	str	r2, [r3, #4]
		(void) I2C1->ISR;
 8000c76:	699a      	ldr	r2, [r3, #24]
		I2C1->ICR |= I2C_ICR_STOPCF;
 8000c78:	69da      	ldr	r2, [r3, #28]
 8000c7a:	4302      	orrs	r2, r0
 8000c7c:	61da      	str	r2, [r3, #28]
 8000c7e:	e7d8      	b.n	8000c32 <i2c1_transmission_end+0x26>
		if(tmo == 0) {_i2c1_error |= I2C_ERR_TMO;}
 8000c80:	2220      	movs	r2, #32
 8000c82:	780b      	ldrb	r3, [r1, #0]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	700b      	strb	r3, [r1, #0]
 8000c88:	e7eb      	b.n	8000c62 <i2c1_transmission_end+0x56>
 8000c8a:	4902      	ldr	r1, [pc, #8]	; (8000c94 <i2c1_transmission_end+0x88>)
 8000c8c:	e7e9      	b.n	8000c62 <i2c1_transmission_end+0x56>
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	40005400 	.word	0x40005400
 8000c94:	20000149 	.word	0x20000149

08000c98 <i2c1_transmission_write8>:
uint8_t i2c1_transmission_write8(uint8_t byte) {
	I2C1->TXDR = byte;
 8000c98:	490a      	ldr	r1, [pc, #40]	; (8000cc4 <i2c1_transmission_write8+0x2c>)
	while(((I2C1->ISR) & bit) != bit) {
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <i2c1_transmission_write8+0x30>)
	I2C1->TXDR = byte;
 8000c9c:	6288      	str	r0, [r1, #40]	; 0x28
	while(((I2C1->ISR) & bit) != bit) {
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	e003      	b.n	8000caa <i2c1_transmission_write8+0x12>
		if((timeOut++ > I2C1_TMO_VAL) && (I2C1_TMO_VAL != 0)) {
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d006      	beq.n	8000cb8 <i2c1_transmission_write8+0x20>
	while(((I2C1->ISR) & bit) != bit) {
 8000caa:	698a      	ldr	r2, [r1, #24]
 8000cac:	4210      	tst	r0, r2
 8000cae:	d0f8      	beq.n	8000ca2 <i2c1_transmission_write8+0xa>
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <i2c1_transmission_write8+0x34>)
	return _i2c1_error;
 8000cb2:	7818      	ldrb	r0, [r3, #0]
 8000cb4:	b2c0      	uxtb	r0, r0
	return i2c1_waitBit(I2C_ISR_TXE);
}
 8000cb6:	4770      	bx	lr
			_i2c1_error |= I2C_ERR_TMO;
 8000cb8:	2120      	movs	r1, #32
 8000cba:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <i2c1_transmission_write8+0x34>)
 8000cbc:	781a      	ldrb	r2, [r3, #0]
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	701a      	strb	r2, [r3, #0]
			break;
 8000cc2:	e7f6      	b.n	8000cb2 <i2c1_transmission_write8+0x1a>
 8000cc4:	40005400 	.word	0x40005400
 8000cc8:	0000c352 	.word	0x0000c352
 8000ccc:	20000149 	.word	0x20000149

08000cd0 <i2c1_read>:
	}

	return i2c1_transmission_end(I2C_WRITE);
}
// Main read function
uint8_t i2c1_read(uint8_t addr, uint16_t sz, uint8_t* buf, uint16_t busy_timeout) {
 8000cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cd2:	46ce      	mov	lr, r9
 8000cd4:	4647      	mov	r7, r8
 8000cd6:	4689      	mov	r9, r1
 8000cd8:	0015      	movs	r5, r2
 8000cda:	b580      	push	{r7, lr}
	RETERR(i2c1_transmission_start(addr, I2C_READ, sz, busy_timeout), _i2c1_error);
 8000cdc:	b2ca      	uxtb	r2, r1
 8000cde:	2101      	movs	r1, #1
 8000ce0:	f7ff ff50 	bl	8000b84 <i2c1_transmission_start>
 8000ce4:	2800      	cmp	r0, #0
 8000ce6:	d140      	bne.n	8000d6a <i2c1_read+0x9a>

	// Send data
	for(uint16_t i = 0; i < (sz-1); i++) {
 8000ce8:	464b      	mov	r3, r9
 8000cea:	1e5f      	subs	r7, r3, #1
 8000cec:	2f00      	cmp	r7, #0
 8000cee:	dd40      	ble.n	8000d72 <i2c1_read+0xa2>
			_i2c1_error |= I2C_ERR_TMO;
 8000cf0:	2320      	movs	r3, #32
	for(uint16_t i = 0; i < (sz-1); i++) {
 8000cf2:	2000      	movs	r0, #0
	while(((I2C1->ISR) & bit) != bit) {
 8000cf4:	2604      	movs	r6, #4
			_i2c1_error |= I2C_ERR_TMO;
 8000cf6:	4698      	mov	r8, r3
 8000cf8:	4a1f      	ldr	r2, [pc, #124]	; (8000d78 <i2c1_read+0xa8>)
	while(((I2C1->ISR) & bit) != bit) {
 8000cfa:	4920      	ldr	r1, [pc, #128]	; (8000d7c <i2c1_read+0xac>)
	for(uint16_t i = 0; i < (sz-1); i++) {
 8000cfc:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <i2c1_read+0xb0>)
 8000cfe:	e003      	b.n	8000d08 <i2c1_read+0x38>
		if((timeOut++ > I2C1_TMO_VAL) && (I2C1_TMO_VAL != 0)) {
 8000d00:	3b01      	subs	r3, #1
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d027      	beq.n	8000d58 <i2c1_read+0x88>
	while(((I2C1->ISR) & bit) != bit) {
 8000d08:	698c      	ldr	r4, [r1, #24]
 8000d0a:	4226      	tst	r6, r4
 8000d0c:	d0f8      	beq.n	8000d00 <i2c1_read+0x30>
	return _i2c1_error;
 8000d0e:	7813      	ldrb	r3, [r2, #0]
	RETERR(i2c1_waitBit(I2C_ISR_RXNE), _i2c1_error);
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d101      	bne.n	8000d18 <i2c1_read+0x48>
	*byte = I2C1->RXDR;
 8000d14:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000d16:	542b      	strb	r3, [r5, r0]
	for(uint16_t i = 0; i < (sz-1); i++) {
 8000d18:	3001      	adds	r0, #1
 8000d1a:	b280      	uxth	r0, r0
	return _i2c1_error;
 8000d1c:	7813      	ldrb	r3, [r2, #0]
	for(uint16_t i = 0; i < (sz-1); i++) {
 8000d1e:	42b8      	cmp	r0, r7
 8000d20:	dbec      	blt.n	8000cfc <i2c1_read+0x2c>
		WAITBIT(I2C1->ISR, I2C_ISR_RXNE);
 8000d22:	2004      	movs	r0, #4
 8000d24:	4915      	ldr	r1, [pc, #84]	; (8000d7c <i2c1_read+0xac>)
 8000d26:	698b      	ldr	r3, [r1, #24]
 8000d28:	4218      	tst	r0, r3
 8000d2a:	d0fc      	beq.n	8000d26 <i2c1_read+0x56>
		I2C1->CR2 |= I2C_CR2_STOP;
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	6848      	ldr	r0, [r1, #4]
 8000d30:	01db      	lsls	r3, r3, #7
 8000d32:	4303      	orrs	r3, r0
		I2C1->ICR |= I2C_ICR_STOPCF;
 8000d34:	2020      	movs	r0, #32
		I2C1->CR2 |= I2C_CR2_STOP;
 8000d36:	604b      	str	r3, [r1, #4]
		(void) I2C1->ISR;
 8000d38:	698b      	ldr	r3, [r1, #24]
		I2C1->ICR |= I2C_ICR_STOPCF;
 8000d3a:	69cb      	ldr	r3, [r1, #28]
 8000d3c:	4303      	orrs	r3, r0
 8000d3e:	61cb      	str	r3, [r1, #28]
	return _i2c1_error;
 8000d40:	7813      	ldrb	r3, [r2, #0]
 8000d42:	b2d8      	uxtb	r0, r3
		i2c1_transmission_read8(&(buf[i]));
	}

	// Stop
	RETERR(i2c1_transmission_end(I2C_READ), _i2c1_error);
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10d      	bne.n	8000d64 <i2c1_read+0x94>
	buf[sz-1] = I2C1->RXDR;
 8000d48:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000d4a:	444d      	add	r5, r9
 8000d4c:	3d01      	subs	r5, #1
 8000d4e:	702b      	strb	r3, [r5, #0]
	return 0;
}
 8000d50:	bcc0      	pop	{r6, r7}
 8000d52:	46b9      	mov	r9, r7
 8000d54:	46b0      	mov	r8, r6
 8000d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			_i2c1_error |= I2C_ERR_TMO;
 8000d58:	4644      	mov	r4, r8
 8000d5a:	7813      	ldrb	r3, [r2, #0]
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	7013      	strb	r3, [r2, #0]
			break;
 8000d62:	e7d4      	b.n	8000d0e <i2c1_read+0x3e>
	RETERR(i2c1_transmission_end(I2C_READ), _i2c1_error);
 8000d64:	7810      	ldrb	r0, [r2, #0]
 8000d66:	b2c0      	uxtb	r0, r0
 8000d68:	e7f2      	b.n	8000d50 <i2c1_read+0x80>
	RETERR(i2c1_transmission_start(addr, I2C_READ, sz, busy_timeout), _i2c1_error);
 8000d6a:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <i2c1_read+0xa8>)
 8000d6c:	7818      	ldrb	r0, [r3, #0]
 8000d6e:	b2c0      	uxtb	r0, r0
 8000d70:	e7ee      	b.n	8000d50 <i2c1_read+0x80>
 8000d72:	4a01      	ldr	r2, [pc, #4]	; (8000d78 <i2c1_read+0xa8>)
 8000d74:	e7d5      	b.n	8000d22 <i2c1_read+0x52>
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	20000149 	.word	0x20000149
 8000d7c:	40005400 	.word	0x40005400
 8000d80:	0000c352 	.word	0x0000c352

08000d84 <i2c1_dr>:

uint8_t i2c1_dr() {
	return I2C1->RXDR;
 8000d84:	4b01      	ldr	r3, [pc, #4]	; (8000d8c <i2c1_dr+0x8>)
 8000d86:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000d88:	b2c0      	uxtb	r0, r0
}
 8000d8a:	4770      	bx	lr
 8000d8c:	40005400 	.word	0x40005400

08000d90 <lfo_update>:
16138, 16756, 17397, 18063, 18755, 19473, 20218, 20992, 21795, 22629,
23496, 24395, 25329, 26298, 27305, 28350, 29435, 30562, 31731, 32946,
34207, 35516, 36876, 38287, 39753, 41274, 42854, 44494, 46197, 47966,
49802, 51708, 53687};

void lfo_update() {
 8000d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d92:	46ce      	mov	lr, r9
 8000d94:	4647      	mov	r7, r8
 8000d96:	b580      	push	{r7, lr}
	 uint32_t hystValue = adcData[ADC_LFO_TGT] % LFO_TGT_DIV;
 8000d98:	4d69      	ldr	r5, [pc, #420]	; (8000f40 <lfo_update+0x1b0>)
	 uint32_t curTarget = adcData[ADC_LFO_TGT] / LFO_TGT_DIV;
 8000d9a:	496a      	ldr	r1, [pc, #424]	; (8000f44 <lfo_update+0x1b4>)
	 uint32_t hystValue = adcData[ADC_LFO_TGT] % LFO_TGT_DIV;
 8000d9c:	89af      	ldrh	r7, [r5, #12]
	 uint32_t curTarget = adcData[ADC_LFO_TGT] / LFO_TGT_DIV;
 8000d9e:	89a8      	ldrh	r0, [r5, #12]
	 uint32_t hystValue = adcData[ADC_LFO_TGT] % LFO_TGT_DIV;
 8000da0:	b2bf      	uxth	r7, r7
	 uint32_t curTarget = adcData[ADC_LFO_TGT] / LFO_TGT_DIV;
 8000da2:	b280      	uxth	r0, r0
 8000da4:	f7ff f9b0 	bl	8000108 <__udivsi3>
	if (_lfo_first_time == 1 || ((curTarget != _lfo_target) && (hystValue > LFO_TGT_HYST) && (hystValue < LFO_TGT_DIV - LFO_TGT_HYST))) {
 8000da8:	4b67      	ldr	r3, [pc, #412]	; (8000f48 <lfo_update+0x1b8>)
 8000daa:	4e68      	ldr	r6, [pc, #416]	; (8000f4c <lfo_update+0x1bc>)
 8000dac:	4698      	mov	r8, r3
 8000dae:	781b      	ldrb	r3, [r3, #0]
	 uint32_t curTarget = adcData[ADC_LFO_TGT] / LFO_TGT_DIV;
 8000db0:	b284      	uxth	r4, r0
	if (_lfo_first_time == 1 || ((curTarget != _lfo_target) && (hystValue > LFO_TGT_HYST) && (hystValue < LFO_TGT_DIV - LFO_TGT_HYST))) {
 8000db2:	4699      	mov	r9, r3
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d015      	beq.n	8000de4 <lfo_update+0x54>
 8000db8:	7833      	ldrb	r3, [r6, #0]
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d100      	bne.n	8000dc0 <lfo_update+0x30>
 8000dbe:	e098      	b.n	8000ef2 <lfo_update+0x162>
	 uint32_t hystValue = adcData[ADC_LFO_TGT] % LFO_TGT_DIV;
 8000dc0:	0038      	movs	r0, r7
 8000dc2:	4960      	ldr	r1, [pc, #384]	; (8000f44 <lfo_update+0x1b4>)
 8000dc4:	f7ff fa26 	bl	8000214 <__aeabi_uidivmod>
	if (_lfo_first_time == 1 || ((curTarget != _lfo_target) && (hystValue > LFO_TGT_HYST) && (hystValue < LFO_TGT_DIV - LFO_TGT_HYST))) {
 8000dc8:	238d      	movs	r3, #141	; 0x8d
 8000dca:	39c9      	subs	r1, #201	; 0xc9
 8000dcc:	b289      	uxth	r1, r1
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	4299      	cmp	r1, r3
 8000dd2:	d300      	bcc.n	8000dd6 <lfo_update+0x46>
 8000dd4:	e08d      	b.n	8000ef2 <lfo_update+0x162>

		if(!_lfo_first_time) {pwmled_timer = 2000;}
 8000dd6:	464b      	mov	r3, r9
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d103      	bne.n	8000de4 <lfo_update+0x54>
 8000ddc:	22fa      	movs	r2, #250	; 0xfa
 8000dde:	4b5c      	ldr	r3, [pc, #368]	; (8000f50 <lfo_update+0x1c0>)
 8000de0:	00d2      	lsls	r2, r2, #3
 8000de2:	601a      	str	r2, [r3, #0]

		_lfo_first_time = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	4642      	mov	r2, r8
 8000de8:	7013      	strb	r3, [r2, #0]
		_lfo_prevRate = adcData[ADC_LFO_RATE];
 8000dea:	8968      	ldrh	r0, [r5, #10]
 8000dec:	4a59      	ldr	r2, [pc, #356]	; (8000f54 <lfo_update+0x1c4>)
 8000dee:	b280      	uxth	r0, r0
 8000df0:	8010      	strh	r0, [r2, #0]
		_lfo_prevWf = adcData[ADC_LFO_WF];
 8000df2:	886f      	ldrh	r7, [r5, #2]
 8000df4:	4a58      	ldr	r2, [pc, #352]	; (8000f58 <lfo_update+0x1c8>)
 8000df6:	b2bf      	uxth	r7, r7
 8000df8:	8017      	strh	r7, [r2, #0]

		_lfo_rate_active = 0;
 8000dfa:	4958      	ldr	r1, [pc, #352]	; (8000f5c <lfo_update+0x1cc>)
		_lfo_wf_active = 0;
 8000dfc:	4a58      	ldr	r2, [pc, #352]	; (8000f60 <lfo_update+0x1d0>)

		_lfo_target = curTarget;
 8000dfe:	b2e4      	uxtb	r4, r4
		_lfo_rate_active = 0;
 8000e00:	700b      	strb	r3, [r1, #0]
		_lfo_wf_active = 0;
 8000e02:	7013      	strb	r3, [r2, #0]
		_lfo_target = curTarget;
 8000e04:	7034      	strb	r4, [r6, #0]

	}

	int16_t h;
	h = adcData[ADC_LFO_RATE] - _lfo_prevRate;
 8000e06:	896b      	ldrh	r3, [r5, #10]
	if (h > LFO_POT_HYST || h < -LFO_POT_HYST) {_lfo_rate_active = 1;}
 8000e08:	33f5      	adds	r3, #245	; 0xf5
 8000e0a:	33ff      	adds	r3, #255	; 0xff
 8000e0c:	1a1b      	subs	r3, r3, r0
 8000e0e:	20fa      	movs	r0, #250	; 0xfa
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	0080      	lsls	r0, r0, #2
 8000e14:	4283      	cmp	r3, r0
 8000e16:	d800      	bhi.n	8000e1a <lfo_update+0x8a>
 8000e18:	e072      	b.n	8000f00 <lfo_update+0x170>
 8000e1a:	2401      	movs	r4, #1
 8000e1c:	700c      	strb	r4, [r1, #0]
	h = adcData[ADC_LFO_WF] - _lfo_prevWf;
 8000e1e:	886b      	ldrh	r3, [r5, #2]
	if (h > LFO_POT_HYST || h < -LFO_POT_HYST) {_lfo_wf_active = 1;}
 8000e20:	33f5      	adds	r3, #245	; 0xf5
 8000e22:	33ff      	adds	r3, #255	; 0xff
 8000e24:	1bdb      	subs	r3, r3, r7
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	4283      	cmp	r3, r0
 8000e2a:	d800      	bhi.n	8000e2e <lfo_update+0x9e>
 8000e2c:	e078      	b.n	8000f20 <lfo_update+0x190>
 8000e2e:	7014      	strb	r4, [r2, #0]

	if (_lfo_rate_active == 1) {_lfo_rate[_lfo_target] = adcData[ADC_LFO_RATE];}
 8000e30:	7833      	ldrb	r3, [r6, #0]
 8000e32:	896a      	ldrh	r2, [r5, #10]
 8000e34:	4c4b      	ldr	r4, [pc, #300]	; (8000f64 <lfo_update+0x1d4>)
 8000e36:	b292      	uxth	r2, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	52e2      	strh	r2, [r4, r3]
	if (_lfo_wf_active == 1) {_lfo_wf[_lfo_target] = adcData[ADC_LFO_WF];}
 8000e3c:	7833      	ldrb	r3, [r6, #0]
 8000e3e:	886a      	ldrh	r2, [r5, #2]
 8000e40:	4949      	ldr	r1, [pc, #292]	; (8000f68 <lfo_update+0x1d8>)
 8000e42:	b292      	uxth	r2, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	525a      	strh	r2, [r3, r1]

	for(uint8_t i = 0; i < 6; i++) {
		//Calculate LFO_PH_INC
		uint16_t val = _lfo_rate[i];
 8000e48:	8821      	ldrh	r1, [r4, #0]
		uint16_t lut_low = _lfo_freq_lut[val >> 4];
 8000e4a:	4a48      	ldr	r2, [pc, #288]	; (8000f6c <lfo_update+0x1dc>)
 8000e4c:	090b      	lsrs	r3, r1, #4
 8000e4e:	0058      	lsls	r0, r3, #1
		uint16_t lut_high = _lfo_freq_lut[(val >> 4) + 1];
 8000e50:	3301      	adds	r3, #1
 8000e52:	005b      	lsls	r3, r3, #1
		_lfo_ph_inc[i] = lut_low + ((lut_low - lut_high) * (val & 0b1111) >> 4);
 8000e54:	5a85      	ldrh	r5, [r0, r2]
 8000e56:	5a98      	ldrh	r0, [r3, r2]
 8000e58:	230f      	movs	r3, #15
 8000e5a:	1a28      	subs	r0, r5, r0
 8000e5c:	4019      	ands	r1, r3
 8000e5e:	4341      	muls	r1, r0
 8000e60:	4843      	ldr	r0, [pc, #268]	; (8000f70 <lfo_update+0x1e0>)
 8000e62:	1109      	asrs	r1, r1, #4
 8000e64:	1949      	adds	r1, r1, r5
 8000e66:	6001      	str	r1, [r0, #0]
		uint16_t val = _lfo_rate[i];
 8000e68:	8861      	ldrh	r1, [r4, #2]
		uint16_t lut_low = _lfo_freq_lut[val >> 4];
 8000e6a:	090d      	lsrs	r5, r1, #4
 8000e6c:	006e      	lsls	r6, r5, #1
		uint16_t lut_high = _lfo_freq_lut[(val >> 4) + 1];
 8000e6e:	3501      	adds	r5, #1
 8000e70:	006d      	lsls	r5, r5, #1
		_lfo_ph_inc[i] = lut_low + ((lut_low - lut_high) * (val & 0b1111) >> 4);
 8000e72:	5ab6      	ldrh	r6, [r6, r2]
 8000e74:	5aad      	ldrh	r5, [r5, r2]
 8000e76:	4019      	ands	r1, r3
 8000e78:	1b75      	subs	r5, r6, r5
 8000e7a:	4369      	muls	r1, r5
 8000e7c:	1109      	asrs	r1, r1, #4
 8000e7e:	1989      	adds	r1, r1, r6
 8000e80:	6041      	str	r1, [r0, #4]
		uint16_t val = _lfo_rate[i];
 8000e82:	88a1      	ldrh	r1, [r4, #4]
		uint16_t lut_low = _lfo_freq_lut[val >> 4];
 8000e84:	090d      	lsrs	r5, r1, #4
 8000e86:	006e      	lsls	r6, r5, #1
		uint16_t lut_high = _lfo_freq_lut[(val >> 4) + 1];
 8000e88:	3501      	adds	r5, #1
 8000e8a:	006d      	lsls	r5, r5, #1
		_lfo_ph_inc[i] = lut_low + ((lut_low - lut_high) * (val & 0b1111) >> 4);
 8000e8c:	5ab6      	ldrh	r6, [r6, r2]
 8000e8e:	5aad      	ldrh	r5, [r5, r2]
 8000e90:	4019      	ands	r1, r3
 8000e92:	1b75      	subs	r5, r6, r5
 8000e94:	4369      	muls	r1, r5
 8000e96:	1109      	asrs	r1, r1, #4
 8000e98:	1989      	adds	r1, r1, r6
 8000e9a:	6081      	str	r1, [r0, #8]
		uint16_t val = _lfo_rate[i];
 8000e9c:	88e1      	ldrh	r1, [r4, #6]
		uint16_t lut_low = _lfo_freq_lut[val >> 4];
 8000e9e:	090d      	lsrs	r5, r1, #4
 8000ea0:	006e      	lsls	r6, r5, #1
		uint16_t lut_high = _lfo_freq_lut[(val >> 4) + 1];
 8000ea2:	3501      	adds	r5, #1
 8000ea4:	006d      	lsls	r5, r5, #1
		_lfo_ph_inc[i] = lut_low + ((lut_low - lut_high) * (val & 0b1111) >> 4);
 8000ea6:	5ab6      	ldrh	r6, [r6, r2]
 8000ea8:	5aad      	ldrh	r5, [r5, r2]
 8000eaa:	4019      	ands	r1, r3
 8000eac:	1b75      	subs	r5, r6, r5
 8000eae:	4369      	muls	r1, r5
 8000eb0:	1109      	asrs	r1, r1, #4
 8000eb2:	1989      	adds	r1, r1, r6
 8000eb4:	60c1      	str	r1, [r0, #12]
		uint16_t val = _lfo_rate[i];
 8000eb6:	8921      	ldrh	r1, [r4, #8]
		uint16_t lut_low = _lfo_freq_lut[val >> 4];
 8000eb8:	090d      	lsrs	r5, r1, #4
 8000eba:	006e      	lsls	r6, r5, #1
		uint16_t lut_high = _lfo_freq_lut[(val >> 4) + 1];
 8000ebc:	3501      	adds	r5, #1
 8000ebe:	006d      	lsls	r5, r5, #1
		_lfo_ph_inc[i] = lut_low + ((lut_low - lut_high) * (val & 0b1111) >> 4);
 8000ec0:	5ab6      	ldrh	r6, [r6, r2]
 8000ec2:	5aad      	ldrh	r5, [r5, r2]
 8000ec4:	4019      	ands	r1, r3
 8000ec6:	1b75      	subs	r5, r6, r5
 8000ec8:	4369      	muls	r1, r5
 8000eca:	1109      	asrs	r1, r1, #4
 8000ecc:	1989      	adds	r1, r1, r6
 8000ece:	6101      	str	r1, [r0, #16]
		uint16_t val = _lfo_rate[i];
 8000ed0:	8965      	ldrh	r5, [r4, #10]
		uint16_t lut_low = _lfo_freq_lut[val >> 4];
 8000ed2:	0929      	lsrs	r1, r5, #4
 8000ed4:	004c      	lsls	r4, r1, #1
		uint16_t lut_high = _lfo_freq_lut[(val >> 4) + 1];
 8000ed6:	3101      	adds	r1, #1
 8000ed8:	0049      	lsls	r1, r1, #1
		_lfo_ph_inc[i] = lut_low + ((lut_low - lut_high) * (val & 0b1111) >> 4);
 8000eda:	5aa4      	ldrh	r4, [r4, r2]
 8000edc:	5a8a      	ldrh	r2, [r1, r2]
 8000ede:	402b      	ands	r3, r5
 8000ee0:	1aa2      	subs	r2, r4, r2
 8000ee2:	4353      	muls	r3, r2
 8000ee4:	111b      	asrs	r3, r3, #4
 8000ee6:	191b      	adds	r3, r3, r4
 8000ee8:	6143      	str	r3, [r0, #20]
	}
}
 8000eea:	bcc0      	pop	{r6, r7}
 8000eec:	46b9      	mov	r9, r7
 8000eee:	46b0      	mov	r8, r6
 8000ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <lfo_update+0x1c4>)
 8000ef4:	4919      	ldr	r1, [pc, #100]	; (8000f5c <lfo_update+0x1cc>)
 8000ef6:	8818      	ldrh	r0, [r3, #0]
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <lfo_update+0x1c8>)
 8000efa:	4a19      	ldr	r2, [pc, #100]	; (8000f60 <lfo_update+0x1d0>)
 8000efc:	881f      	ldrh	r7, [r3, #0]
 8000efe:	e782      	b.n	8000e06 <lfo_update+0x76>
	h = adcData[ADC_LFO_WF] - _lfo_prevWf;
 8000f00:	886b      	ldrh	r3, [r5, #2]
	if (h > LFO_POT_HYST || h < -LFO_POT_HYST) {_lfo_wf_active = 1;}
 8000f02:	33f5      	adds	r3, #245	; 0xf5
 8000f04:	33ff      	adds	r3, #255	; 0xff
 8000f06:	1bdb      	subs	r3, r3, r7
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	4283      	cmp	r3, r0
 8000f0c:	d810      	bhi.n	8000f30 <lfo_update+0x1a0>
	if (_lfo_rate_active == 1) {_lfo_rate[_lfo_target] = adcData[ADC_LFO_RATE];}
 8000f0e:	780b      	ldrb	r3, [r1, #0]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d005      	beq.n	8000f20 <lfo_update+0x190>
 8000f14:	7813      	ldrb	r3, [r2, #0]
 8000f16:	4c13      	ldr	r4, [pc, #76]	; (8000f64 <lfo_update+0x1d4>)
	if (_lfo_wf_active == 1) {_lfo_wf[_lfo_target] = adcData[ADC_LFO_WF];}
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d000      	beq.n	8000f1e <lfo_update+0x18e>
 8000f1c:	e794      	b.n	8000e48 <lfo_update+0xb8>
 8000f1e:	e78d      	b.n	8000e3c <lfo_update+0xac>
 8000f20:	7813      	ldrb	r3, [r2, #0]
	if (_lfo_rate_active == 1) {_lfo_rate[_lfo_target] = adcData[ADC_LFO_RATE];}
 8000f22:	7832      	ldrb	r2, [r6, #0]
 8000f24:	8969      	ldrh	r1, [r5, #10]
 8000f26:	4c0f      	ldr	r4, [pc, #60]	; (8000f64 <lfo_update+0x1d4>)
 8000f28:	b289      	uxth	r1, r1
 8000f2a:	0052      	lsls	r2, r2, #1
 8000f2c:	52a1      	strh	r1, [r4, r2]
 8000f2e:	e7f3      	b.n	8000f18 <lfo_update+0x188>
 8000f30:	780b      	ldrb	r3, [r1, #0]
	if (h > LFO_POT_HYST || h < -LFO_POT_HYST) {_lfo_wf_active = 1;}
 8000f32:	2101      	movs	r1, #1
 8000f34:	7011      	strb	r1, [r2, #0]
	if (_lfo_rate_active == 1) {_lfo_rate[_lfo_target] = adcData[ADC_LFO_RATE];}
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d100      	bne.n	8000f3c <lfo_update+0x1ac>
 8000f3a:	e779      	b.n	8000e30 <lfo_update+0xa0>
 8000f3c:	4c09      	ldr	r4, [pc, #36]	; (8000f64 <lfo_update+0x1d4>)
 8000f3e:	e77d      	b.n	8000e3c <lfo_update+0xac>
 8000f40:	200001ac 	.word	0x200001ac
 8000f44:	000002ab 	.word	0x000002ab
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	20000153 	.word	0x20000153
 8000f50:	20000328 	.word	0x20000328
 8000f54:	200001d8 	.word	0x200001d8
 8000f58:	200001e8 	.word	0x200001e8
 8000f5c:	20000152 	.word	0x20000152
 8000f60:	20000154 	.word	0x20000154
 8000f64:	20000010 	.word	0x20000010
 8000f68:	2000001c 	.word	0x2000001c
 8000f6c:	08003264 	.word	0x08003264
 8000f70:	200001c0 	.word	0x200001c0

08000f74 <lfo_process>:

void lfo_process() {
 8000f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f76:	46d6      	mov	lr, sl
 8000f78:	464f      	mov	r7, r9
 8000f7a:	4646      	mov	r6, r8
 8000f7c:	b5c0      	push	{r6, r7, lr}
	_lfo_current++;
 8000f7e:	4a89      	ldr	r2, [pc, #548]	; (80011a4 <lfo_process+0x230>)
 8000f80:	7813      	ldrb	r3, [r2, #0]
 8000f82:	3301      	adds	r3, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	7013      	strb	r3, [r2, #0]
	if(_lfo_current >= 6) {_lfo_current = 0;}
 8000f88:	7813      	ldrb	r3, [r2, #0]
 8000f8a:	2b05      	cmp	r3, #5
 8000f8c:	d901      	bls.n	8000f92 <lfo_process+0x1e>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	7013      	strb	r3, [r2, #0]
	uint8_t i = _lfo_current;
 8000f92:	7814      	ldrb	r4, [r2, #0]
	//for(uint8_t i = 0; i < 6; i++) {
		_lfo_phase[i] += _lfo_ph_inc[i];
 8000f94:	4b84      	ldr	r3, [pc, #528]	; (80011a8 <lfo_process+0x234>)
 8000f96:	4e85      	ldr	r6, [pc, #532]	; (80011ac <lfo_process+0x238>)
	uint8_t i = _lfo_current;
 8000f98:	b2e5      	uxtb	r5, r4
		_lfo_phase[i] += _lfo_ph_inc[i];
 8000f9a:	00a4      	lsls	r4, r4, #2
 8000f9c:	591a      	ldr	r2, [r3, r4]
 8000f9e:	5933      	ldr	r3, [r6, r4]
 8000fa0:	189b      	adds	r3, r3, r2
 8000fa2:	5133      	str	r3, [r6, r4]
		// >> 16 >> 6 << 10
		// >> 16 >> 6 (lfo div) << 13 (lfo bits) << 3 (lfo_current) = >> 6
		int32_t lfoRawValue;

		if(midi_is_connected() && _synth_midisync) {lfoRawValue = lfo_sync_value(1+7-(_lfo_rate[i] >> (12 - 3)));}
 8000fa4:	f000 fb70 	bl	8001688 <midi_is_connected>
 8000fa8:	2800      	cmp	r0, #0
 8000faa:	d004      	beq.n	8000fb6 <lfo_process+0x42>
 8000fac:	4b80      	ldr	r3, [pc, #512]	; (80011b0 <lfo_process+0x23c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d000      	beq.n	8000fb6 <lfo_process+0x42>
 8000fb4:	e0e9      	b.n	800118a <lfo_process+0x216>
		else {lfoRawValue = (_lfo_phase[i] >> 6) & 0x1FFF;}
 8000fb6:	5930      	ldr	r0, [r6, r4]
 8000fb8:	006c      	lsls	r4, r5, #1
 8000fba:	0340      	lsls	r0, r0, #13
 8000fbc:	0cc0      	lsrs	r0, r0, #19

		uint8_t lfoHalfPhase = (lfoRawValue >> 12) & 0b1;
		if (_lfo_wf[i] > 2048 - LFO_POT_NULL && _lfo_wf[i] < 2048 + LFO_POT_NULL) {
 8000fbe:	22fa      	movs	r2, #250	; 0xfa
 8000fc0:	497c      	ldr	r1, [pc, #496]	; (80011b4 <lfo_process+0x240>)
		uint8_t lfoHalfPhase = (lfoRawValue >> 12) & 0b1;
 8000fc2:	04c3      	lsls	r3, r0, #19
		if (_lfo_wf[i] > 2048 - LFO_POT_NULL && _lfo_wf[i] < 2048 + LFO_POT_NULL) {
 8000fc4:	5b0e      	ldrh	r6, [r1, r4]
		uint8_t lfoHalfPhase = (lfoRawValue >> 12) & 0b1;
 8000fc6:	0fdb      	lsrs	r3, r3, #31
		if (_lfo_wf[i] > 2048 - LFO_POT_NULL && _lfo_wf[i] < 2048 + LFO_POT_NULL) {
 8000fc8:	00d2      	lsls	r2, r2, #3
 8000fca:	4296      	cmp	r6, r2
 8000fcc:	d90d      	bls.n	8000fea <lfo_process+0x76>
 8000fce:	5b0e      	ldrh	r6, [r1, r4]
 8000fd0:	3260      	adds	r2, #96	; 0x60
 8000fd2:	4296      	cmp	r6, r2
 8000fd4:	d209      	bcs.n	8000fea <lfo_process+0x76>
			lfoValue[i] = 0;
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4a77      	ldr	r2, [pc, #476]	; (80011b8 <lfo_process+0x244>)
 8000fda:	4878      	ldr	r0, [pc, #480]	; (80011bc <lfo_process+0x248>)
 8000fdc:	5311      	strh	r1, [r2, r4]
			uint16_t lfoSquare = lfoHalfPhase == 1 ? 4095 : 0;
			//lfoValue[i] = (lfoSH-2048) * lfoAmplitude / 1023 + ;
			lfoValue[i] = ((lfoSquare-2048) * (1023-lfoAmplitude) >> 10) + ((lfoSH-2048) * lfoAmplitude >> 10);
		}

		_lfo_prevhp[i] = lfoHalfPhase;
 8000fde:	5543      	strb	r3, [r0, r5]

	//}
}
 8000fe0:	bce0      	pop	{r5, r6, r7}
 8000fe2:	46ba      	mov	sl, r7
 8000fe4:	46b1      	mov	r9, r6
 8000fe6:	46a8      	mov	r8, r5
 8000fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (_lfo_wf[i] < 2048) {
 8000fea:	2280      	movs	r2, #128	; 0x80
 8000fec:	5b0e      	ldrh	r6, [r1, r4]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	4296      	cmp	r6, r2
 8000ff2:	d212      	bcs.n	800101a <lfo_process+0xa6>
			uint16_t lfoAmplitude = 2047 - _lfo_wf[i];
 8000ff4:	5b09      	ldrh	r1, [r1, r4]
 8000ff6:	4a72      	ldr	r2, [pc, #456]	; (80011c0 <lfo_process+0x24c>)
 8000ff8:	1a52      	subs	r2, r2, r1
 8000ffa:	b292      	uxth	r2, r2
			lfoRawValue = lfoHalfPhase ? lfoRawValue & 0xFFF : (4095 - (lfoRawValue & 0xFFF));
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d100      	bne.n	8001002 <lfo_process+0x8e>
 8001000:	e0af      	b.n	8001162 <lfo_process+0x1ee>
			lfoValue[i] = (lfoRawValue-2048) * lfoAmplitude >> 11;
 8001002:	4970      	ldr	r1, [pc, #448]	; (80011c4 <lfo_process+0x250>)
			lfoRawValue = lfoHalfPhase ? lfoRawValue & 0xFFF : (4095 - (lfoRawValue & 0xFFF));
 8001004:	0500      	lsls	r0, r0, #20
			lfoValue[i] = (lfoRawValue-2048) * lfoAmplitude >> 11;
 8001006:	468c      	mov	ip, r1
			lfoRawValue = lfoHalfPhase ? lfoRawValue & 0xFFF : (4095 - (lfoRawValue & 0xFFF));
 8001008:	0d00      	lsrs	r0, r0, #20
			lfoValue[i] = (lfoRawValue-2048) * lfoAmplitude >> 11;
 800100a:	4460      	add	r0, ip
 800100c:	4350      	muls	r0, r2
 800100e:	4a6a      	ldr	r2, [pc, #424]	; (80011b8 <lfo_process+0x244>)
 8001010:	12c0      	asrs	r0, r0, #11
 8001012:	b200      	sxth	r0, r0
 8001014:	5310      	strh	r0, [r2, r4]
 8001016:	4869      	ldr	r0, [pc, #420]	; (80011bc <lfo_process+0x248>)
 8001018:	e7e1      	b.n	8000fde <lfo_process+0x6a>
		} else if (_lfo_wf[i] < 3072) {
 800101a:	22c0      	movs	r2, #192	; 0xc0
 800101c:	5b08      	ldrh	r0, [r1, r4]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	4290      	cmp	r0, r2
 8001022:	d200      	bcs.n	8001026 <lfo_process+0xb2>
 8001024:	e09f      	b.n	8001166 <lfo_process+0x1f2>
			if (_lfo_prevhp[i] != lfoHalfPhase) {
 8001026:	4865      	ldr	r0, [pc, #404]	; (80011bc <lfo_process+0x248>)
 8001028:	5d42      	ldrb	r2, [r0, r5]
 800102a:	429a      	cmp	r2, r3
 800102c:	d100      	bne.n	8001030 <lfo_process+0xbc>
 800102e:	e0b6      	b.n	800119e <lfo_process+0x22a>
					uint16_t lsb = _lfo_random[i] & 0b1;
 8001030:	4a65      	ldr	r2, [pc, #404]	; (80011c8 <lfo_process+0x254>)
 8001032:	5b17      	ldrh	r7, [r2, r4]
					_lfo_random[i] >>= 1;
 8001034:	5b16      	ldrh	r6, [r2, r4]
 8001036:	0876      	lsrs	r6, r6, #1
 8001038:	5316      	strh	r6, [r2, r4]
					_lfo_random[i] ^= (-lsb) & 0xB400;
 800103a:	5b16      	ldrh	r6, [r2, r4]
 800103c:	46b0      	mov	r8, r6
					uint16_t lsb = _lfo_random[i] & 0b1;
 800103e:	2601      	movs	r6, #1
 8001040:	46b1      	mov	r9, r6
 8001042:	4037      	ands	r7, r6
					_lfo_random[i] ^= (-lsb) & 0xB400;
 8001044:	4e61      	ldr	r6, [pc, #388]	; (80011cc <lfo_process+0x258>)
 8001046:	427f      	negs	r7, r7
 8001048:	46b4      	mov	ip, r6
 800104a:	4037      	ands	r7, r6
 800104c:	4646      	mov	r6, r8
 800104e:	4077      	eors	r7, r6
 8001050:	b2bf      	uxth	r7, r7
 8001052:	5317      	strh	r7, [r2, r4]
					uint16_t lsb = _lfo_random[i] & 0b1;
 8001054:	5b17      	ldrh	r7, [r2, r4]
					_lfo_random[i] >>= 1;
 8001056:	5b16      	ldrh	r6, [r2, r4]
 8001058:	0876      	lsrs	r6, r6, #1
 800105a:	5316      	strh	r6, [r2, r4]
					_lfo_random[i] ^= (-lsb) & 0xB400;
 800105c:	5b16      	ldrh	r6, [r2, r4]
 800105e:	46b0      	mov	r8, r6
					uint16_t lsb = _lfo_random[i] & 0b1;
 8001060:	464e      	mov	r6, r9
 8001062:	4037      	ands	r7, r6
					_lfo_random[i] ^= (-lsb) & 0xB400;
 8001064:	4666      	mov	r6, ip
 8001066:	427f      	negs	r7, r7
 8001068:	4037      	ands	r7, r6
 800106a:	4646      	mov	r6, r8
 800106c:	4077      	eors	r7, r6
 800106e:	b2bf      	uxth	r7, r7
 8001070:	5317      	strh	r7, [r2, r4]
					uint16_t lsb = _lfo_random[i] & 0b1;
 8001072:	5b17      	ldrh	r7, [r2, r4]
					_lfo_random[i] >>= 1;
 8001074:	5b16      	ldrh	r6, [r2, r4]
 8001076:	0876      	lsrs	r6, r6, #1
 8001078:	5316      	strh	r6, [r2, r4]
					_lfo_random[i] ^= (-lsb) & 0xB400;
 800107a:	5b16      	ldrh	r6, [r2, r4]
 800107c:	46b0      	mov	r8, r6
					uint16_t lsb = _lfo_random[i] & 0b1;
 800107e:	464e      	mov	r6, r9
 8001080:	4037      	ands	r7, r6
					_lfo_random[i] ^= (-lsb) & 0xB400;
 8001082:	4666      	mov	r6, ip
 8001084:	427f      	negs	r7, r7
 8001086:	4037      	ands	r7, r6
 8001088:	4646      	mov	r6, r8
 800108a:	4077      	eors	r7, r6
 800108c:	b2bf      	uxth	r7, r7
 800108e:	5317      	strh	r7, [r2, r4]
					uint16_t lsb = _lfo_random[i] & 0b1;
 8001090:	5b17      	ldrh	r7, [r2, r4]
					_lfo_random[i] >>= 1;
 8001092:	5b16      	ldrh	r6, [r2, r4]
 8001094:	0876      	lsrs	r6, r6, #1
 8001096:	5316      	strh	r6, [r2, r4]
					_lfo_random[i] ^= (-lsb) & 0xB400;
 8001098:	5b16      	ldrh	r6, [r2, r4]
 800109a:	46b0      	mov	r8, r6
					uint16_t lsb = _lfo_random[i] & 0b1;
 800109c:	464e      	mov	r6, r9
 800109e:	4037      	ands	r7, r6
					_lfo_random[i] ^= (-lsb) & 0xB400;
 80010a0:	4666      	mov	r6, ip
 80010a2:	427f      	negs	r7, r7
 80010a4:	4037      	ands	r7, r6
 80010a6:	4646      	mov	r6, r8
 80010a8:	4077      	eors	r7, r6
 80010aa:	b2bf      	uxth	r7, r7
 80010ac:	5317      	strh	r7, [r2, r4]
					uint16_t lsb = _lfo_random[i] & 0b1;
 80010ae:	5b17      	ldrh	r7, [r2, r4]
					_lfo_random[i] >>= 1;
 80010b0:	5b16      	ldrh	r6, [r2, r4]
 80010b2:	0876      	lsrs	r6, r6, #1
 80010b4:	5316      	strh	r6, [r2, r4]
					_lfo_random[i] ^= (-lsb) & 0xB400;
 80010b6:	5b16      	ldrh	r6, [r2, r4]
 80010b8:	46b0      	mov	r8, r6
					uint16_t lsb = _lfo_random[i] & 0b1;
 80010ba:	464e      	mov	r6, r9
 80010bc:	4037      	ands	r7, r6
					_lfo_random[i] ^= (-lsb) & 0xB400;
 80010be:	4666      	mov	r6, ip
 80010c0:	427f      	negs	r7, r7
 80010c2:	4037      	ands	r7, r6
 80010c4:	4646      	mov	r6, r8
 80010c6:	4077      	eors	r7, r6
 80010c8:	b2bf      	uxth	r7, r7
 80010ca:	5317      	strh	r7, [r2, r4]
					uint16_t lsb = _lfo_random[i] & 0b1;
 80010cc:	5b17      	ldrh	r7, [r2, r4]
					_lfo_random[i] >>= 1;
 80010ce:	5b16      	ldrh	r6, [r2, r4]
 80010d0:	0876      	lsrs	r6, r6, #1
 80010d2:	5316      	strh	r6, [r2, r4]
					_lfo_random[i] ^= (-lsb) & 0xB400;
 80010d4:	5b16      	ldrh	r6, [r2, r4]
 80010d6:	46b0      	mov	r8, r6
					uint16_t lsb = _lfo_random[i] & 0b1;
 80010d8:	464e      	mov	r6, r9
 80010da:	4037      	ands	r7, r6
					_lfo_random[i] ^= (-lsb) & 0xB400;
 80010dc:	4666      	mov	r6, ip
 80010de:	427f      	negs	r7, r7
 80010e0:	4037      	ands	r7, r6
 80010e2:	4646      	mov	r6, r8
 80010e4:	4077      	eors	r7, r6
 80010e6:	b2bf      	uxth	r7, r7
 80010e8:	5317      	strh	r7, [r2, r4]
					uint16_t lsb = _lfo_random[i] & 0b1;
 80010ea:	5b17      	ldrh	r7, [r2, r4]
					_lfo_random[i] >>= 1;
 80010ec:	5b16      	ldrh	r6, [r2, r4]
 80010ee:	0876      	lsrs	r6, r6, #1
 80010f0:	5316      	strh	r6, [r2, r4]
					_lfo_random[i] ^= (-lsb) & 0xB400;
 80010f2:	5b16      	ldrh	r6, [r2, r4]
 80010f4:	46b0      	mov	r8, r6
					uint16_t lsb = _lfo_random[i] & 0b1;
 80010f6:	464e      	mov	r6, r9
 80010f8:	4037      	ands	r7, r6
					_lfo_random[i] ^= (-lsb) & 0xB400;
 80010fa:	4666      	mov	r6, ip
 80010fc:	427f      	negs	r7, r7
 80010fe:	4037      	ands	r7, r6
 8001100:	4646      	mov	r6, r8
 8001102:	4077      	eors	r7, r6
 8001104:	b2bf      	uxth	r7, r7
 8001106:	5317      	strh	r7, [r2, r4]
					uint16_t lsb = _lfo_random[i] & 0b1;
 8001108:	5b16      	ldrh	r6, [r2, r4]
					_lfo_random[i] >>= 1;
 800110a:	5b17      	ldrh	r7, [r2, r4]
					uint16_t lsb = _lfo_random[i] & 0b1;
 800110c:	46b0      	mov	r8, r6
					_lfo_random[i] >>= 1;
 800110e:	087f      	lsrs	r7, r7, #1
 8001110:	5317      	strh	r7, [r2, r4]
					_lfo_random[i] ^= (-lsb) & 0xB400;
 8001112:	5b16      	ldrh	r6, [r2, r4]
					uint16_t lsb = _lfo_random[i] & 0b1;
 8001114:	464f      	mov	r7, r9
					_lfo_random[i] ^= (-lsb) & 0xB400;
 8001116:	46b2      	mov	sl, r6
					uint16_t lsb = _lfo_random[i] & 0b1;
 8001118:	4646      	mov	r6, r8
 800111a:	4037      	ands	r7, r6
					_lfo_random[i] ^= (-lsb) & 0xB400;
 800111c:	427e      	negs	r6, r7
 800111e:	4667      	mov	r7, ip
 8001120:	403e      	ands	r6, r7
 8001122:	4657      	mov	r7, sl
 8001124:	407e      	eors	r6, r7
 8001126:	b2b6      	uxth	r6, r6
 8001128:	5316      	strh	r6, [r2, r4]
			uint16_t lfoSH = (_lfo_random[i] >> 4) & (0xFF << 4);
 800112a:	5b16      	ldrh	r6, [r2, r4]
 800112c:	22ff      	movs	r2, #255	; 0xff
 800112e:	0936      	lsrs	r6, r6, #4
 8001130:	0112      	lsls	r2, r2, #4
 8001132:	4016      	ands	r6, r2
			uint16_t lfoAmplitude = (_lfo_wf[i] - 3072);
 8001134:	4a26      	ldr	r2, [pc, #152]	; (80011d0 <lfo_process+0x25c>)
 8001136:	5b09      	ldrh	r1, [r1, r4]
 8001138:	4694      	mov	ip, r2
			uint16_t lfoSquare = lfoHalfPhase == 1 ? 4095 : 0;
 800113a:	4f22      	ldr	r7, [pc, #136]	; (80011c4 <lfo_process+0x250>)
			uint16_t lfoAmplitude = (_lfo_wf[i] - 3072);
 800113c:	4461      	add	r1, ip
			uint16_t lfoSquare = lfoHalfPhase == 1 ? 4095 : 0;
 800113e:	46bc      	mov	ip, r7
 8001140:	425a      	negs	r2, r3
			lfoValue[i] = ((lfoSquare-2048) * (1023-lfoAmplitude) >> 10) + ((lfoSH-2048) * lfoAmplitude >> 10);
 8001142:	4f24      	ldr	r7, [pc, #144]	; (80011d4 <lfo_process+0x260>)
			uint16_t lfoSquare = lfoHalfPhase == 1 ? 4095 : 0;
 8001144:	0512      	lsls	r2, r2, #20
			uint16_t lfoAmplitude = (_lfo_wf[i] - 3072);
 8001146:	b289      	uxth	r1, r1
			uint16_t lfoSquare = lfoHalfPhase == 1 ? 4095 : 0;
 8001148:	0d12      	lsrs	r2, r2, #20
			lfoValue[i] = ((lfoSquare-2048) * (1023-lfoAmplitude) >> 10) + ((lfoSH-2048) * lfoAmplitude >> 10);
 800114a:	1a7f      	subs	r7, r7, r1
			uint16_t lfoSquare = lfoHalfPhase == 1 ? 4095 : 0;
 800114c:	4462      	add	r2, ip
			lfoValue[i] = ((lfoSquare-2048) * (1023-lfoAmplitude) >> 10) + ((lfoSH-2048) * lfoAmplitude >> 10);
 800114e:	4466      	add	r6, ip
 8001150:	437a      	muls	r2, r7
 8001152:	4371      	muls	r1, r6
 8001154:	1292      	asrs	r2, r2, #10
 8001156:	1289      	asrs	r1, r1, #10
 8001158:	1852      	adds	r2, r2, r1
 800115a:	4917      	ldr	r1, [pc, #92]	; (80011b8 <lfo_process+0x244>)
 800115c:	b212      	sxth	r2, r2
 800115e:	530a      	strh	r2, [r1, r4]
 8001160:	e73d      	b.n	8000fde <lfo_process+0x6a>
			lfoRawValue = lfoHalfPhase ? lfoRawValue & 0xFFF : (4095 - (lfoRawValue & 0xFFF));
 8001162:	43c0      	mvns	r0, r0
 8001164:	e74d      	b.n	8001002 <lfo_process+0x8e>
			uint16_t lfoAmplitude = _lfo_wf[i] - 2048;
 8001166:	5b0a      	ldrh	r2, [r1, r4]
 8001168:	4916      	ldr	r1, [pc, #88]	; (80011c4 <lfo_process+0x250>)
 800116a:	468c      	mov	ip, r1
 800116c:	4462      	add	r2, ip
 800116e:	b290      	uxth	r0, r2
			lfoRawValue = lfoHalfPhase ? 0 : 4095;
 8001170:	4a19      	ldr	r2, [pc, #100]	; (80011d8 <lfo_process+0x264>)
 8001172:	4259      	negs	r1, r3
 8001174:	400a      	ands	r2, r1
 8001176:	4912      	ldr	r1, [pc, #72]	; (80011c0 <lfo_process+0x24c>)
 8001178:	468c      	mov	ip, r1
 800117a:	4462      	add	r2, ip
			lfoValue[i] = (lfoRawValue-2048) * lfoAmplitude >> 10;
 800117c:	4342      	muls	r2, r0
 800117e:	490e      	ldr	r1, [pc, #56]	; (80011b8 <lfo_process+0x244>)
 8001180:	1292      	asrs	r2, r2, #10
 8001182:	b212      	sxth	r2, r2
 8001184:	480d      	ldr	r0, [pc, #52]	; (80011bc <lfo_process+0x248>)
 8001186:	530a      	strh	r2, [r1, r4]
 8001188:	e729      	b.n	8000fde <lfo_process+0x6a>
		if(midi_is_connected() && _synth_midisync) {lfoRawValue = lfo_sync_value(1+7-(_lfo_rate[i] >> (12 - 3)));}
 800118a:	2008      	movs	r0, #8
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <lfo_process+0x268>)
 800118e:	006c      	lsls	r4, r5, #1
 8001190:	5b1b      	ldrh	r3, [r3, r4]
 8001192:	0a5b      	lsrs	r3, r3, #9
 8001194:	1ac0      	subs	r0, r0, r3
 8001196:	b2c0      	uxtb	r0, r0
 8001198:	f000 f93c 	bl	8001414 <lfo_sync_value>
 800119c:	e70f      	b.n	8000fbe <lfo_process+0x4a>
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <lfo_process+0x254>)
 80011a0:	e7c3      	b.n	800112a <lfo_process+0x1b6>
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	2000014a 	.word	0x2000014a
 80011a8:	200001c0 	.word	0x200001c0
 80011ac:	200001ec 	.word	0x200001ec
 80011b0:	2000019a 	.word	0x2000019a
 80011b4:	2000001c 	.word	0x2000001c
 80011b8:	200001dc 	.word	0x200001dc
 80011bc:	2000014c 	.word	0x2000014c
 80011c0:	000007ff 	.word	0x000007ff
 80011c4:	fffff800 	.word	0xfffff800
 80011c8:	20000004 	.word	0x20000004
 80011cc:	ffffb400 	.word	0xffffb400
 80011d0:	fffff400 	.word	0xfffff400
 80011d4:	000003ff 	.word	0x000003ff
 80011d8:	fffff001 	.word	0xfffff001
 80011dc:	20000010 	.word	0x20000010

080011e0 <lfo_panic>:

void lfo_panic() {
	_lfo_prevRate = adcData[ADC_LFO_RATE];
 80011e0:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <lfo_panic+0x38>)
 80011e2:	4a0e      	ldr	r2, [pc, #56]	; (800121c <lfo_panic+0x3c>)
 80011e4:	8959      	ldrh	r1, [r3, #10]
 80011e6:	8011      	strh	r1, [r2, #0]
	_lfo_prevWf = adcData[ADC_LFO_WF];
 80011e8:	885a      	ldrh	r2, [r3, #2]
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <lfo_panic+0x40>)
	_lfo_rate_active = 0;
	_lfo_wf_active = 0;
	for(uint8_t i = 0; i < 6; i++) {
		_lfo_rate[i] = 2047;
 80011ec:	490d      	ldr	r1, [pc, #52]	; (8001224 <lfo_panic+0x44>)
	_lfo_prevWf = adcData[ADC_LFO_WF];
 80011ee:	801a      	strh	r2, [r3, #0]
	_lfo_rate_active = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <lfo_panic+0x48>)
 80011f4:	7013      	strb	r3, [r2, #0]
	_lfo_wf_active = 0;
 80011f6:	4a0d      	ldr	r2, [pc, #52]	; (800122c <lfo_panic+0x4c>)
 80011f8:	7013      	strb	r3, [r2, #0]
		_lfo_rate[i] = 2047;
 80011fa:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <lfo_panic+0x50>)
		_lfo_wf[i] = 2047;
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <lfo_panic+0x54>)
		_lfo_rate[i] = 2047;
 80011fe:	800b      	strh	r3, [r1, #0]
		_lfo_wf[i] = 2047;
 8001200:	8013      	strh	r3, [r2, #0]
		_lfo_rate[i] = 2047;
 8001202:	804b      	strh	r3, [r1, #2]
		_lfo_wf[i] = 2047;
 8001204:	8053      	strh	r3, [r2, #2]
		_lfo_rate[i] = 2047;
 8001206:	808b      	strh	r3, [r1, #4]
		_lfo_wf[i] = 2047;
 8001208:	8093      	strh	r3, [r2, #4]
		_lfo_rate[i] = 2047;
 800120a:	80cb      	strh	r3, [r1, #6]
		_lfo_wf[i] = 2047;
 800120c:	80d3      	strh	r3, [r2, #6]
		_lfo_rate[i] = 2047;
 800120e:	810b      	strh	r3, [r1, #8]
		_lfo_wf[i] = 2047;
 8001210:	8113      	strh	r3, [r2, #8]
		_lfo_rate[i] = 2047;
 8001212:	814b      	strh	r3, [r1, #10]
		_lfo_wf[i] = 2047;
 8001214:	8153      	strh	r3, [r2, #10]
	}
}
 8001216:	4770      	bx	lr
 8001218:	200001ac 	.word	0x200001ac
 800121c:	200001d8 	.word	0x200001d8
 8001220:	200001e8 	.word	0x200001e8
 8001224:	20000010 	.word	0x20000010
 8001228:	20000152 	.word	0x20000152
 800122c:	20000154 	.word	0x20000154
 8001230:	000007ff 	.word	0x000007ff
 8001234:	2000001c 	.word	0x2000001c

08001238 <lfo_sync_configure>:
volatile uint16_t _lfo_sync_measspd = 0;
volatile uint16_t _lfo_sync_last_spd = 0;

void lfo_sync_configure() {

	RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 8001238:	2280      	movs	r2, #128	; 0x80
 800123a:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <lfo_sync_configure+0x70>)
 800123c:	0052      	lsls	r2, r2, #1
 800123e:	69d9      	ldr	r1, [r3, #28]
void lfo_sync_configure() {
 8001240:	b510      	push	{r4, lr}
	RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 8001242:	430a      	orrs	r2, r1
 8001244:	61da      	str	r2, [r3, #28]
	RCC->APB2ENR |= RCC_APB2ENR_TIM16EN;
 8001246:	2280      	movs	r2, #128	; 0x80
 8001248:	6999      	ldr	r1, [r3, #24]
 800124a:	0292      	lsls	r2, r2, #10
 800124c:	430a      	orrs	r2, r1
 800124e:	619a      	str	r2, [r3, #24]

	// Tim16
	TIM16->PSC = 127;
 8001250:	227f      	movs	r2, #127	; 0x7f
	TIM16->ARR = 65535;
	//TIM16->DIER |= TIM_DIER_UIE;
	TIM16->CR1 |= TIM_CR1_ARPE | TIM_CR1_OPM;
 8001252:	2188      	movs	r1, #136	; 0x88
	TIM16->PSC = 127;
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <lfo_sync_configure+0x74>)
 8001256:	629a      	str	r2, [r3, #40]	; 0x28
	TIM16->ARR = 65535;
 8001258:	4a15      	ldr	r2, [pc, #84]	; (80012b0 <lfo_sync_configure+0x78>)
 800125a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM16->CR1 |= TIM_CR1_ARPE | TIM_CR1_OPM;
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001262:	f3bf 8f4f 	dsb	sy
	__DSB();
	TIM16->CR1 |= TIM_CR1_CEN;
 8001266:	2401      	movs	r4, #1
 8001268:	22c4      	movs	r2, #196	; 0xc4
 800126a:	2080      	movs	r0, #128	; 0x80
 800126c:	6819      	ldr	r1, [r3, #0]
 800126e:	0092      	lsls	r2, r2, #2
 8001270:	4321      	orrs	r1, r4
 8001272:	6019      	str	r1, [r3, #0]
 8001274:	490f      	ldr	r1, [pc, #60]	; (80012b4 <lfo_sync_configure+0x7c>)
 8001276:	05c0      	lsls	r0, r0, #23
 8001278:	588b      	ldr	r3, [r1, r2]
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	4303      	orrs	r3, r0
 8001280:	508b      	str	r3, [r1, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001282:	2380      	movs	r3, #128	; 0x80

	// Tim14
	NVIC_SetPriority(TIM14_IRQn, 1);
	NVIC_EnableIRQ(TIM14_IRQn);

	TIM14->PSC = 15;
 8001284:	220f      	movs	r2, #15
 8001286:	031b      	lsls	r3, r3, #12
 8001288:	600b      	str	r3, [r1, #0]
	TIM14->ARR = 100;
	TIM14->DIER |= TIM_DIER_UIE;
	TIM14->CR1 |= TIM_CR1_ARPE;
 800128a:	2180      	movs	r1, #128	; 0x80
	TIM14->PSC = 15;
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <lfo_sync_configure+0x80>)
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM14->ARR = 100;
 8001290:	3255      	adds	r2, #85	; 0x55
 8001292:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM14->DIER |= TIM_DIER_UIE;
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	4322      	orrs	r2, r4
 8001298:	60da      	str	r2, [r3, #12]
	TIM14->CR1 |= TIM_CR1_ARPE;
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	430a      	orrs	r2, r1
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	f3bf 8f4f 	dsb	sy
	__DSB();
	//TIM14->CR1 |= TIM_CR1_CEN;
}
 80012a4:	bd10      	pop	{r4, pc}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40014400 	.word	0x40014400
 80012b0:	0000ffff 	.word	0x0000ffff
 80012b4:	e000e100 	.word	0xe000e100
 80012b8:	40002000 	.word	0x40002000

080012bc <lfo_sync_start>:

void lfo_sync_start() {
	_lfo_sync_running = 1;
 80012bc:	2001      	movs	r0, #1
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <lfo_sync_start+0x30>)
	_lfo_sync_mticks = 0;
 80012c0:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <lfo_sync_start+0x34>)
	_lfo_sync_running = 1;
 80012c2:	7018      	strb	r0, [r3, #0]
	_lfo_sync_mticks = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	8013      	strh	r3, [r2, #0]
	_lfo_sync_qticks = 0;
 80012c8:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <lfo_sync_start+0x38>)
 80012ca:	8013      	strh	r3, [r2, #0]
	_lfo_sync_subticks = 0;
 80012cc:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <lfo_sync_start+0x3c>)
 80012ce:	6013      	str	r3, [r2, #0]
	_lfo_sync_measspd = _lfo_sync_last_spd;
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <lfo_sync_start+0x40>)
 80012d2:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <lfo_sync_start+0x44>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	8013      	strh	r3, [r2, #0]
	TIM14->ARR = _lfo_sync_measspd;
 80012da:	8811      	ldrh	r1, [r2, #0]
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <lfo_sync_start+0x48>)
 80012de:	b289      	uxth	r1, r1
 80012e0:	62d9      	str	r1, [r3, #44]	; 0x2c
	TIM14->EGR |= TIM_EGR_UG;
 80012e2:	695a      	ldr	r2, [r3, #20]
 80012e4:	4302      	orrs	r2, r0
 80012e6:	615a      	str	r2, [r3, #20]
	//TIM14->CR1 |= TIM_CR1_CEN;
}
 80012e8:	4770      	bx	lr
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	2000015e 	.word	0x2000015e
 80012f0:	2000015a 	.word	0x2000015a
 80012f4:	2000015c 	.word	0x2000015c
 80012f8:	20000160 	.word	0x20000160
 80012fc:	20000156 	.word	0x20000156
 8001300:	20000158 	.word	0x20000158
 8001304:	40002000 	.word	0x40002000

08001308 <lfo_sync_stop>:
void lfo_sync_stop() {
	_lfo_sync_running = 0;
 8001308:	2000      	movs	r0, #0
	TIM16->CR1 &= ~TIM_CR1_CEN;
 800130a:	2101      	movs	r1, #1
	_lfo_sync_running = 0;
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <lfo_sync_stop+0x24>)
void lfo_sync_stop() {
 800130e:	b510      	push	{r4, lr}
	_lfo_sync_running = 0;
 8001310:	7018      	strb	r0, [r3, #0]
	TIM16->CR1 &= ~TIM_CR1_CEN;
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <lfo_sync_stop+0x28>)
	TIM14->CR1 &= ~TIM_CR1_CEN;
 8001314:	4c07      	ldr	r4, [pc, #28]	; (8001334 <lfo_sync_stop+0x2c>)
	TIM16->CR1 &= ~TIM_CR1_CEN;
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	438a      	bics	r2, r1
 800131a:	601a      	str	r2, [r3, #0]
	TIM14->CR1 &= ~TIM_CR1_CEN;
 800131c:	6822      	ldr	r2, [r4, #0]
 800131e:	438a      	bics	r2, r1
 8001320:	6022      	str	r2, [r4, #0]
	TIM16->CNT = 0;
 8001322:	6258      	str	r0, [r3, #36]	; 0x24
	TIM16->EGR |= TIM_EGR_UG;
 8001324:	695a      	ldr	r2, [r3, #20]
 8001326:	430a      	orrs	r2, r1
 8001328:	615a      	str	r2, [r3, #20]
}
 800132a:	bd10      	pop	{r4, pc}
 800132c:	2000015e 	.word	0x2000015e
 8001330:	40014400 	.word	0x40014400
 8001334:	40002000 	.word	0x40002000

08001338 <lfo_sync_continue>:
void lfo_sync_continue() {
	_lfo_sync_running = 1;
 8001338:	2201      	movs	r2, #1
 800133a:	4b01      	ldr	r3, [pc, #4]	; (8001340 <lfo_sync_continue+0x8>)
 800133c:	701a      	strb	r2, [r3, #0]

}
 800133e:	4770      	bx	lr
 8001340:	2000015e 	.word	0x2000015e

08001344 <lfo_sync_tick>:
void lfo_sync_tick() {
 8001344:	b510      	push	{r4, lr}
 8001346:	b082      	sub	sp, #8
		volatile uint16_t spd = TIM16->CNT;
 8001348:	4669      	mov	r1, sp
 800134a:	4b28      	ldr	r3, [pc, #160]	; (80013ec <lfo_sync_tick+0xa8>)
 800134c:	1d88      	adds	r0, r1, #6
 800134e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001350:	b292      	uxth	r2, r2
 8001352:	8002      	strh	r2, [r0, #0]
 8001354:	f3bf 8f4f 	dsb	sy
		__DSB();
		TIM16->EGR |= TIM_EGR_UG;
 8001358:	2101      	movs	r1, #1
 800135a:	695a      	ldr	r2, [r3, #20]
 800135c:	430a      	orrs	r2, r1
 800135e:	615a      	str	r2, [r3, #20]
		TIM16->CNT = 0;
 8001360:	2200      	movs	r2, #0
 8001362:	625a      	str	r2, [r3, #36]	; 0x24
		TIM16->CR1 |= TIM_CR1_CEN;
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	601a      	str	r2, [r3, #0]
		if(_lfo_sync_running && spd != 0 && spd != 65535) {
 800136a:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <lfo_sync_tick+0xac>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <lfo_sync_tick+0x34>
 8001372:	8803      	ldrh	r3, [r0, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d124      	bne.n	80013c2 <lfo_sync_tick+0x7e>
			_lfo_sync_measspd = spd;
			_lfo_sync_last_spd = spd;
			TIM14->CR1 |= TIM_CR1_CEN;
		}

		_lfo_sync_qticks += 1;
 8001378:	4a1e      	ldr	r2, [pc, #120]	; (80013f4 <lfo_sync_tick+0xb0>)
 800137a:	8813      	ldrh	r3, [r2, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	b29b      	uxth	r3, r3
 8001380:	8013      	strh	r3, [r2, #0]
		if(_lfo_sync_qticks >= 24) {_lfo_sync_qticks = 0; _lfo_sync_mticks += 1; }
 8001382:	8813      	ldrh	r3, [r2, #0]
 8001384:	2b17      	cmp	r3, #23
 8001386:	d814      	bhi.n	80013b2 <lfo_sync_tick+0x6e>
 8001388:	491b      	ldr	r1, [pc, #108]	; (80013f8 <lfo_sync_tick+0xb4>)
		if(_lfo_sync_mticks >= 16) {_lfo_sync_mticks = 0;}
 800138a:	880b      	ldrh	r3, [r1, #0]
 800138c:	2b0f      	cmp	r3, #15
 800138e:	d901      	bls.n	8001394 <lfo_sync_tick+0x50>
 8001390:	2300      	movs	r3, #0
 8001392:	800b      	strh	r3, [r1, #0]
		_lfo_sync_subticks = _lfo_sync_qticks * 5461 + (_lfo_sync_mticks << 17);
 8001394:	8810      	ldrh	r0, [r2, #0]
 8001396:	880a      	ldrh	r2, [r1, #0]
		TIM14->EGR |= TIM_EGR_UG;
 8001398:	2101      	movs	r1, #1
		_lfo_sync_subticks = _lfo_sync_qticks * 5461 + (_lfo_sync_mticks << 17);
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <lfo_sync_tick+0xb8>)
 800139c:	0452      	lsls	r2, r2, #17
 800139e:	4343      	muls	r3, r0
 80013a0:	189b      	adds	r3, r3, r2
 80013a2:	4a17      	ldr	r2, [pc, #92]	; (8001400 <lfo_sync_tick+0xbc>)
 80013a4:	6013      	str	r3, [r2, #0]
		TIM14->EGR |= TIM_EGR_UG;
 80013a6:	4a17      	ldr	r2, [pc, #92]	; (8001404 <lfo_sync_tick+0xc0>)
 80013a8:	6953      	ldr	r3, [r2, #20]
 80013aa:	430b      	orrs	r3, r1
 80013ac:	6153      	str	r3, [r2, #20]

}
 80013ae:	b002      	add	sp, #8
 80013b0:	bd10      	pop	{r4, pc}
		if(_lfo_sync_qticks >= 24) {_lfo_sync_qticks = 0; _lfo_sync_mticks += 1; }
 80013b2:	2300      	movs	r3, #0
 80013b4:	4910      	ldr	r1, [pc, #64]	; (80013f8 <lfo_sync_tick+0xb4>)
 80013b6:	8013      	strh	r3, [r2, #0]
 80013b8:	880b      	ldrh	r3, [r1, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	b29b      	uxth	r3, r3
 80013be:	800b      	strh	r3, [r1, #0]
 80013c0:	e7e3      	b.n	800138a <lfo_sync_tick+0x46>
		if(_lfo_sync_running && spd != 0 && spd != 65535) {
 80013c2:	8802      	ldrh	r2, [r0, #0]
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <lfo_sync_tick+0xc4>)
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d0d6      	beq.n	8001378 <lfo_sync_tick+0x34>
			TIM14->ARR = _lfo_sync_measspd;
 80013ca:	4c10      	ldr	r4, [pc, #64]	; (800140c <lfo_sync_tick+0xc8>)
 80013cc:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <lfo_sync_tick+0xc0>)
 80013ce:	8822      	ldrh	r2, [r4, #0]
 80013d0:	b292      	uxth	r2, r2
 80013d2:	62da      	str	r2, [r3, #44]	; 0x2c
			_lfo_sync_measspd = spd;
 80013d4:	8802      	ldrh	r2, [r0, #0]
 80013d6:	b292      	uxth	r2, r2
 80013d8:	8022      	strh	r2, [r4, #0]
			_lfo_sync_last_spd = spd;
 80013da:	8802      	ldrh	r2, [r0, #0]
 80013dc:	480c      	ldr	r0, [pc, #48]	; (8001410 <lfo_sync_tick+0xcc>)
 80013de:	b292      	uxth	r2, r2
 80013e0:	8002      	strh	r2, [r0, #0]
			TIM14->CR1 |= TIM_CR1_CEN;
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4311      	orrs	r1, r2
 80013e6:	6019      	str	r1, [r3, #0]
 80013e8:	e7c6      	b.n	8001378 <lfo_sync_tick+0x34>
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	40014400 	.word	0x40014400
 80013f0:	2000015e 	.word	0x2000015e
 80013f4:	2000015c 	.word	0x2000015c
 80013f8:	2000015a 	.word	0x2000015a
 80013fc:	00001555 	.word	0x00001555
 8001400:	20000160 	.word	0x20000160
 8001404:	40002000 	.word	0x40002000
 8001408:	0000ffff 	.word	0x0000ffff
 800140c:	20000158 	.word	0x20000158
 8001410:	20000156 	.word	0x20000156

08001414 <lfo_sync_value>:

uint16_t lfo_sync_value(uint8_t lfo_spd) {
	return (_lfo_sync_subticks >> lfo_spd) & 0x1FFF;
 8001414:	4b02      	ldr	r3, [pc, #8]	; (8001420 <lfo_sync_value+0xc>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	40c3      	lsrs	r3, r0
 800141a:	04d8      	lsls	r0, r3, #19
 800141c:	0cc0      	lsrs	r0, r0, #19
	// 1/4 note = 16 - 12 = 4
	// 1/2 note = 5
	// 1 measure = 6
	// 2 measures = 7
	// 4 measures = 8
}
 800141e:	4770      	bx	lr
 8001420:	20000160 	.word	0x20000160

08001424 <TIM14_IRQHandler>:
void lfo_sync_process() {

}

void TIM14_IRQHandler() {
	_lfo_sync_subticks += 682;
 8001424:	4905      	ldr	r1, [pc, #20]	; (800143c <TIM14_IRQHandler+0x18>)
 8001426:	4a06      	ldr	r2, [pc, #24]	; (8001440 <TIM14_IRQHandler+0x1c>)
 8001428:	468c      	mov	ip, r1
	TIM14->SR &= ~TIM_SR_UIF;
 800142a:	2101      	movs	r1, #1
	_lfo_sync_subticks += 682;
 800142c:	6813      	ldr	r3, [r2, #0]
 800142e:	4463      	add	r3, ip
 8001430:	6013      	str	r3, [r2, #0]
	TIM14->SR &= ~TIM_SR_UIF;
 8001432:	4a04      	ldr	r2, [pc, #16]	; (8001444 <TIM14_IRQHandler+0x20>)
 8001434:	6913      	ldr	r3, [r2, #16]
 8001436:	438b      	bics	r3, r1
 8001438:	6113      	str	r3, [r2, #16]
}
 800143a:	4770      	bx	lr
 800143c:	000002aa 	.word	0x000002aa
 8001440:	20000160 	.word	0x20000160
 8001444:	40002000 	.word	0x40002000

08001448 <main>:
0x00		// Preset X loaded
};

int main(void)
{
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001448:	2280      	movs	r2, #128	; 0x80
{
 800144a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800144c:	4b54      	ldr	r3, [pc, #336]	; (80015a0 <main+0x158>)
 800144e:	0552      	lsls	r2, r2, #21
 8001450:	69d9      	ldr	r1, [r3, #28]
 8001452:	430a      	orrs	r2, r1
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001454:	2101      	movs	r1, #1
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001456:	61da      	str	r2, [r3, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001458:	699a      	ldr	r2, [r3, #24]
 800145a:	430a      	orrs	r2, r1
 800145c:	619a      	str	r2, [r3, #24]
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 800145e:	2280      	movs	r2, #128	; 0x80
 8001460:	6959      	ldr	r1, [r3, #20]
 8001462:	0292      	lsls	r2, r2, #10
 8001464:	430a      	orrs	r2, r1
 8001466:	615a      	str	r2, [r3, #20]

	clock_configure();
 8001468:	f7ff f9f8 	bl	800085c <clock_configure>

	butled_configure();
 800146c:	f7ff f892 	bl	8000594 <butled_configure>
	_delayMs(10);
 8001470:	200a      	movs	r0, #10
 8001472:	f7ff fa4f 	bl	8000914 <_delayMs>
	adc_configure();
 8001476:	f7fe ffbd 	bl	80003f4 <adc_configure>
	i2c1_init();
 800147a:	f7ff faf3 	bl	8000a64 <i2c1_init>

	 if(but_check(BUTLED_SAVE) && but_check(BUTLED_DRONE)) {
 800147e:	2001      	movs	r0, #1
 8001480:	f7ff f96e 	bl	8000760 <but_check>
 8001484:	2800      	cmp	r0, #0
 8001486:	d004      	beq.n	8001492 <main+0x4a>
 8001488:	2000      	movs	r0, #0
 800148a:	f7ff f969 	bl	8000760 <but_check>
 800148e:	2800      	cmp	r0, #0
 8001490:	d12d      	bne.n	80014ee <main+0xa6>
		if(make_reset) {
			eeprom_write8(EEPROM_HAS_PRESET3, 0);
			butled_animation = 0b11111;
			butled_timer = 500;
		}
	} else if(but_check(BUTLED_M1) && but_check(BUTLED_M2) && but_check(BUTLED_M3)) {
 8001492:	2002      	movs	r0, #2
 8001494:	f7ff f964 	bl	8000760 <but_check>
 8001498:	2800      	cmp	r0, #0
 800149a:	d14b      	bne.n	8001534 <main+0xec>
			butled_animation = 0b11111;
			butled_timer = 500;
		}
	}

	lfo_sync_configure();
 800149c:	f7ff fecc 	bl	8001238 <lfo_sync_configure>
	_midi_own_channel = eeprom_read8(EEPROM_MIDI_CHAN);
 80014a0:	20c2      	movs	r0, #194	; 0xc2
 80014a2:	f7ff fa47 	bl	8000934 <eeprom_read8>
 80014a6:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <main+0x15c>)
 80014a8:	7018      	strb	r0, [r3, #0]
	midi_configure();
 80014aa:	f000 f887 	bl	80015bc <midi_configure>
	synth_reset_midi();
 80014ae:	f000 fcd9 	bl	8001e64 <synth_reset_midi>

	_delayMs(10);
 80014b2:	200a      	movs	r0, #10
 80014b4:	f7ff fa2e 	bl	8000914 <_delayMs>
	if(eeprom_read8(EEPROM_HAS_PRESET3)) {
 80014b8:	20c3      	movs	r0, #195	; 0xc3
 80014ba:	f7ff fa3b 	bl	8000934 <eeprom_read8>
 80014be:	2800      	cmp	r0, #0
 80014c0:	d134      	bne.n	800152c <main+0xe4>
		synth_load_preset(3);
	} else {
		_synth_drone = 1;
 80014c2:	2301      	movs	r3, #1
 80014c4:	4a38      	ldr	r2, [pc, #224]	; (80015a8 <main+0x160>)
 80014c6:	7013      	strb	r3, [r2, #0]
		for(uint8_t i = 0; i < 9; i++) {
			_synth_knob_active[i] = 1;
 80014c8:	4a38      	ldr	r2, [pc, #224]	; (80015ac <main+0x164>)
 80014ca:	7013      	strb	r3, [r2, #0]
 80014cc:	7053      	strb	r3, [r2, #1]
 80014ce:	7093      	strb	r3, [r2, #2]
 80014d0:	70d3      	strb	r3, [r2, #3]
 80014d2:	7113      	strb	r3, [r2, #4]
 80014d4:	7153      	strb	r3, [r2, #5]
 80014d6:	7193      	strb	r3, [r2, #6]
 80014d8:	71d3      	strb	r3, [r2, #7]
 80014da:	7213      	strb	r3, [r2, #8]
			//_synth_knob[i] = adcData[i];
		}
	}


	tick_configure();
 80014dc:	f001 fae6 	bl	8002aac <tick_configure>

	_delayMs(10);
 80014e0:	200a      	movs	r0, #10
 80014e2:	f7ff fa17 	bl	8000914 <_delayMs>
	pwm_configure();
 80014e6:	f000 fa73 	bl	80019d0 <pwm_configure>



    /* Loop forever */
	for(;;) {
		__WFI();
 80014ea:	bf30      	wfi
	for(;;) {
 80014ec:	e7fd      	b.n	80014ea <main+0xa2>
 80014ee:	24fa      	movs	r4, #250	; 0xfa
 80014f0:	00a4      	lsls	r4, r4, #2
			if(!(but_check(BUTLED_SAVE) && but_check(BUTLED_DRONE))) {
 80014f2:	2001      	movs	r0, #1
 80014f4:	f7ff f934 	bl	8000760 <but_check>
 80014f8:	2800      	cmp	r0, #0
 80014fa:	d0cf      	beq.n	800149c <main+0x54>
 80014fc:	2000      	movs	r0, #0
 80014fe:	f7ff f92f 	bl	8000760 <but_check>
 8001502:	2800      	cmp	r0, #0
 8001504:	d0ca      	beq.n	800149c <main+0x54>
			_delayMs(1);
 8001506:	3c01      	subs	r4, #1
 8001508:	2001      	movs	r0, #1
 800150a:	b2a4      	uxth	r4, r4
 800150c:	f7ff fa02 	bl	8000914 <_delayMs>
		for(uint16_t i = 0; i < 1000; i++) {
 8001510:	2c00      	cmp	r4, #0
 8001512:	d1ee      	bne.n	80014f2 <main+0xaa>
			eeprom_write8(EEPROM_HAS_PRESET3, 0);
 8001514:	2100      	movs	r1, #0
 8001516:	20c3      	movs	r0, #195	; 0xc3
 8001518:	f7ff fa34 	bl	8000984 <eeprom_write8>
			butled_animation = 0b11111;
 800151c:	221f      	movs	r2, #31
 800151e:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <main+0x168>)
 8001520:	701a      	strb	r2, [r3, #0]
			butled_timer = 500;
 8001522:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <main+0x16c>)
 8001524:	32d6      	adds	r2, #214	; 0xd6
 8001526:	32ff      	adds	r2, #255	; 0xff
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	e7b7      	b.n	800149c <main+0x54>
		synth_load_preset(3);
 800152c:	2003      	movs	r0, #3
 800152e:	f000 fb6d 	bl	8001c0c <synth_load_preset>
 8001532:	e7d3      	b.n	80014dc <main+0x94>
	} else if(but_check(BUTLED_M1) && but_check(BUTLED_M2) && but_check(BUTLED_M3)) {
 8001534:	2003      	movs	r0, #3
 8001536:	f7ff f913 	bl	8000760 <but_check>
 800153a:	2800      	cmp	r0, #0
 800153c:	d0ae      	beq.n	800149c <main+0x54>
 800153e:	2004      	movs	r0, #4
 8001540:	f7ff f90e 	bl	8000760 <but_check>
 8001544:	2800      	cmp	r0, #0
 8001546:	d0a9      	beq.n	800149c <main+0x54>
 8001548:	24fa      	movs	r4, #250	; 0xfa
			if(!(but_check(BUTLED_M1) && but_check(BUTLED_M2) && but_check(BUTLED_M3))) {
 800154a:	2702      	movs	r7, #2
 800154c:	2603      	movs	r6, #3
 800154e:	2504      	movs	r5, #4
 8001550:	00a4      	lsls	r4, r4, #2
 8001552:	0038      	movs	r0, r7
 8001554:	f7ff f904 	bl	8000760 <but_check>
 8001558:	2800      	cmp	r0, #0
 800155a:	d09f      	beq.n	800149c <main+0x54>
 800155c:	0030      	movs	r0, r6
 800155e:	f7ff f8ff 	bl	8000760 <but_check>
 8001562:	2800      	cmp	r0, #0
 8001564:	d09a      	beq.n	800149c <main+0x54>
 8001566:	0028      	movs	r0, r5
 8001568:	f7ff f8fa 	bl	8000760 <but_check>
 800156c:	2800      	cmp	r0, #0
 800156e:	d095      	beq.n	800149c <main+0x54>
			_delayMs(1);
 8001570:	3c01      	subs	r4, #1
 8001572:	2001      	movs	r0, #1
 8001574:	b2a4      	uxth	r4, r4
 8001576:	f7ff f9cd 	bl	8000914 <_delayMs>
		for(uint16_t i = 0; i < 1000; i++) {
 800157a:	2c00      	cmp	r4, #0
 800157c:	d1e9      	bne.n	8001552 <main+0x10a>
				eeprom_write_buffer(i, eeprom_defaults + i, 16);
 800157e:	2710      	movs	r7, #16
				_delayMs(20);
 8001580:	2614      	movs	r6, #20
 8001582:	4d0d      	ldr	r5, [pc, #52]	; (80015b8 <main+0x170>)
				eeprom_write_buffer(i, eeprom_defaults + i, 16);
 8001584:	0029      	movs	r1, r5
 8001586:	003a      	movs	r2, r7
 8001588:	b2e0      	uxtb	r0, r4
			for(uint16_t i = 0; i < EEPROM_ALIGNED_SIZE; i+= 16) {
 800158a:	3410      	adds	r4, #16
				eeprom_write_buffer(i, eeprom_defaults + i, 16);
 800158c:	f7ff fa18 	bl	80009c0 <eeprom_write_buffer>
			for(uint16_t i = 0; i < EEPROM_ALIGNED_SIZE; i+= 16) {
 8001590:	b2a4      	uxth	r4, r4
				_delayMs(20);
 8001592:	0030      	movs	r0, r6
 8001594:	f7ff f9be 	bl	8000914 <_delayMs>
			for(uint16_t i = 0; i < EEPROM_ALIGNED_SIZE; i+= 16) {
 8001598:	3510      	adds	r5, #16
 800159a:	2cd0      	cmp	r4, #208	; 0xd0
 800159c:	d1f2      	bne.n	8001584 <main+0x13c>
 800159e:	e7bd      	b.n	800151c <main+0xd4>
 80015a0:	40021000 	.word	0x40021000
 80015a4:	20000029 	.word	0x20000029
 80015a8:	2000002a 	.word	0x2000002a
 80015ac:	2000017c 	.word	0x2000017c
 80015b0:	2000019c 	.word	0x2000019c
 80015b4:	200001a0 	.word	0x200001a0
 80015b8:	08003468 	.word	0x08003468

080015bc <midi_configure>:
volatile uint8_t _midi_own_channel = MIDI_ALLCHAN;

#define MIDI_IS_STAT(X) ((X & 0x80) == 0x80)
#define MIDI_IS_DATA(X) ((X & 0x80) == 0)

void midi_configure() {
 80015bc:	b510      	push	{r4, lr}
 80015be:	2280      	movs	r2, #128	; 0x80
 80015c0:	21ff      	movs	r1, #255	; 0xff
 80015c2:	4826      	ldr	r0, [pc, #152]	; (800165c <midi_configure+0xa0>)
 80015c4:	f001 fe08 	bl	80031d8 <memset>
 80015c8:	2280      	movs	r2, #128	; 0x80
 80015ca:	21ff      	movs	r1, #255	; 0xff
 80015cc:	4824      	ldr	r0, [pc, #144]	; (8001660 <midi_configure+0xa4>)
 80015ce:	f001 fe03 	bl	80031d8 <memset>
void midi_stack_clear() {
	for(uint8_t i = 0; i < 128; i++) {
		_midi_stack_forwards[i] = 0xFF;
		_midi_stack_backwards[i] = 0xFF;
	}
	_midi_last_note = 0xFF;
 80015d2:	22ff      	movs	r2, #255	; 0xff
 80015d4:	4b23      	ldr	r3, [pc, #140]	; (8001664 <midi_configure+0xa8>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015d6:	24c6      	movs	r4, #198	; 0xc6
 80015d8:	701a      	strb	r2, [r3, #0]
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80015da:	2280      	movs	r2, #128	; 0x80
 80015dc:	4b22      	ldr	r3, [pc, #136]	; (8001668 <midi_configure+0xac>)
 80015de:	02d2      	lsls	r2, r2, #11
 80015e0:	6959      	ldr	r1, [r3, #20]
 80015e2:	00a4      	lsls	r4, r4, #2
 80015e4:	430a      	orrs	r2, r1
 80015e6:	615a      	str	r2, [r3, #20]
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80015e8:	2280      	movs	r2, #128	; 0x80
 80015ea:	6999      	ldr	r1, [r3, #24]
 80015ec:	01d2      	lsls	r2, r2, #7
 80015ee:	430a      	orrs	r2, r1
 80015f0:	619a      	str	r2, [r3, #24]
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER10_Msk, 0b00 << GPIO_MODER_MODER10_Pos);
 80015f2:	4b1e      	ldr	r3, [pc, #120]	; (800166c <midi_configure+0xb0>)
 80015f4:	491e      	ldr	r1, [pc, #120]	; (8001670 <midi_configure+0xb4>)
 80015f6:	6818      	ldr	r0, [r3, #0]
 80015f8:	4008      	ands	r0, r1
 80015fa:	6018      	str	r0, [r3, #0]
	MODIFY_REG(GPIOB->PUPDR, GPIO_PUPDR_PUPDR10_Msk, 0b10 << GPIO_PUPDR_PUPDR10_Pos);
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	2080      	movs	r0, #128	; 0x80
 8001600:	4011      	ands	r1, r2
 8001602:	2280      	movs	r2, #128	; 0x80
 8001604:	0392      	lsls	r2, r2, #14
 8001606:	430a      	orrs	r2, r1
 8001608:	60da      	str	r2, [r3, #12]
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER7_Msk, 0b10 << GPIO_MODER_MODER7_Pos);
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4919      	ldr	r1, [pc, #100]	; (8001674 <midi_configure+0xb8>)
 800160e:	0600      	lsls	r0, r0, #24
 8001610:	4011      	ands	r1, r2
 8001612:	2280      	movs	r2, #128	; 0x80
 8001614:	0212      	lsls	r2, r2, #8
 8001616:	430a      	orrs	r2, r1
 8001618:	601a      	str	r2, [r3, #0]
	MODIFY_REG(GPIOB->AFR[0] , GPIO_AFRL_AFSEL7_Msk, 0b00 << GPIO_AFRL_AFSEL7_Pos);
 800161a:	6a1a      	ldr	r2, [r3, #32]
	MODIFY_REG(USART1->CR1, USART_CR1_M_Msk | USART_CR1_PCE_Msk | USART_CR1_TE_Msk, USART_CR1_RE);
 800161c:	4916      	ldr	r1, [pc, #88]	; (8001678 <midi_configure+0xbc>)
	MODIFY_REG(GPIOB->AFR[0] , GPIO_AFRL_AFSEL7_Msk, 0b00 << GPIO_AFRL_AFSEL7_Pos);
 800161e:	0112      	lsls	r2, r2, #4
 8001620:	0912      	lsrs	r2, r2, #4
 8001622:	621a      	str	r2, [r3, #32]
	USART1->BRR = 1536; //48000000 / 31250
 8001624:	22c0      	movs	r2, #192	; 0xc0
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <midi_configure+0xc0>)
 8001628:	00d2      	lsls	r2, r2, #3
 800162a:	60da      	str	r2, [r3, #12]
	MODIFY_REG(USART1->CR1, USART_CR1_M_Msk | USART_CR1_PCE_Msk | USART_CR1_TE_Msk, USART_CR1_RE);
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	400a      	ands	r2, r1
 8001630:	2104      	movs	r1, #4
 8001632:	430a      	orrs	r2, r1
 8001634:	601a      	str	r2, [r3, #0]
	MODIFY_REG(USART1->CR2, USART_CR2_STOP_Msk, 0 << USART_CR2_STOP_Pos);
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	4911      	ldr	r1, [pc, #68]	; (8001680 <midi_configure+0xc4>)
 800163a:	400a      	ands	r2, r1
 800163c:	605a      	str	r2, [r3, #4]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163e:	2280      	movs	r2, #128	; 0x80
 8001640:	4910      	ldr	r1, [pc, #64]	; (8001684 <midi_configure+0xc8>)
 8001642:	0512      	lsls	r2, r2, #20
 8001644:	600a      	str	r2, [r1, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001646:	590a      	ldr	r2, [r1, r4]
 8001648:	0212      	lsls	r2, r2, #8
 800164a:	0a12      	lsrs	r2, r2, #8
 800164c:	4302      	orrs	r2, r0
 800164e:	510a      	str	r2, [r1, r4]
	USART1->CR1 |= USART_CR1_UE | USART_CR1_RXNEIE;
 8001650:	2121      	movs	r1, #33	; 0x21
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	601a      	str	r2, [r3, #0]
}
 8001658:	bd10      	pop	{r4, pc}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	20000284 	.word	0x20000284
 8001660:	20000204 	.word	0x20000204
 8001664:	20000028 	.word	0x20000028
 8001668:	40021000 	.word	0x40021000
 800166c:	48000400 	.word	0x48000400
 8001670:	ffcfffff 	.word	0xffcfffff
 8001674:	ffff3fff 	.word	0xffff3fff
 8001678:	ffffebf3 	.word	0xffffebf3
 800167c:	40013800 	.word	0x40013800
 8001680:	ffffcfff 	.word	0xffffcfff
 8001684:	e000e100 	.word	0xe000e100

08001688 <midi_is_connected>:
	return (GPIOB->IDR & GPIO_IDR_10) >> 10;
 8001688:	4b02      	ldr	r3, [pc, #8]	; (8001694 <midi_is_connected+0xc>)
 800168a:	6918      	ldr	r0, [r3, #16]
 800168c:	0540      	lsls	r0, r0, #21
 800168e:	0fc0      	lsrs	r0, r0, #31
}
 8001690:	4770      	bx	lr
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	48000400 	.word	0x48000400

08001698 <midi_get_monophonic>:
}

uint8_t midi_get_monophonic() {
	if(_midi_last_note < 33 || _midi_last_note > 81) {return 0xFF;}
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <midi_get_monophonic+0x14>)
 800169a:	7818      	ldrb	r0, [r3, #0]
 800169c:	0003      	movs	r3, r0
 800169e:	3b21      	subs	r3, #33	; 0x21
 80016a0:	2b30      	cmp	r3, #48	; 0x30
 80016a2:	d800      	bhi.n	80016a6 <midi_get_monophonic+0xe>
	return _midi_last_note;
}
 80016a4:	4770      	bx	lr
	if(_midi_last_note < 33 || _midi_last_note > 81) {return 0xFF;}
 80016a6:	20ff      	movs	r0, #255	; 0xff
 80016a8:	e7fc      	b.n	80016a4 <midi_get_monophonic+0xc>
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	20000028 	.word	0x20000028

080016b0 <handle_midi_message>:

void handle_midi_message(uint8_t cmd, uint8_t fb, uint8_t sb) {
	switch(MIDI_CMD(cmd)) {
 80016b0:	230f      	movs	r3, #15
void handle_midi_message(uint8_t cmd, uint8_t fb, uint8_t sb) {
 80016b2:	b570      	push	{r4, r5, r6, lr}
 80016b4:	4398      	bics	r0, r3
	switch(MIDI_CMD(cmd)) {
 80016b6:	28b0      	cmp	r0, #176	; 0xb0
 80016b8:	d03a      	beq.n	8001730 <handle_midi_message+0x80>
 80016ba:	d81b      	bhi.n	80016f4 <handle_midi_message+0x44>
 80016bc:	2880      	cmp	r0, #128	; 0x80
 80016be:	d020      	beq.n	8001702 <handle_midi_message+0x52>
 80016c0:	2890      	cmp	r0, #144	; 0x90
 80016c2:	d116      	bne.n	80016f2 <handle_midi_message+0x42>
			else if (fb == 79) {synth_set_cc(4, sb);}
			else if(fb == 123) {midi_stack_clear();}			// CC123: All notes off
			break;
		case 0x90:
			// Add note to list.
			if(fb >= 33 && fb <= 81) {_midi_push_note(fb);}
 80016c4:	000b      	movs	r3, r1
 80016c6:	3b21      	subs	r3, #33	; 0x21
 80016c8:	2b30      	cmp	r3, #48	; 0x30
 80016ca:	d812      	bhi.n	80016f2 <handle_midi_message+0x42>
	if(_midi_last_note == note || _midi_stack_backwards[note] != 0xFF || _midi_stack_forwards[note] != 0xFF) {return;}
 80016cc:	4c3a      	ldr	r4, [pc, #232]	; (80017b8 <handle_midi_message+0x108>)
 80016ce:	7820      	ldrb	r0, [r4, #0]
 80016d0:	4281      	cmp	r1, r0
 80016d2:	d00e      	beq.n	80016f2 <handle_midi_message+0x42>
 80016d4:	4b39      	ldr	r3, [pc, #228]	; (80017bc <handle_midi_message+0x10c>)
 80016d6:	5c5a      	ldrb	r2, [r3, r1]
 80016d8:	2aff      	cmp	r2, #255	; 0xff
 80016da:	d10a      	bne.n	80016f2 <handle_midi_message+0x42>
 80016dc:	4a38      	ldr	r2, [pc, #224]	; (80017c0 <handle_midi_message+0x110>)
 80016de:	5c55      	ldrb	r5, [r2, r1]
 80016e0:	2dff      	cmp	r5, #255	; 0xff
 80016e2:	d106      	bne.n	80016f2 <handle_midi_message+0x42>
	if(_midi_last_note != 0xFF) {_midi_stack_forwards[_midi_last_note] = note; _midi_stack_backwards[note] = _midi_last_note;}
 80016e4:	28ff      	cmp	r0, #255	; 0xff
 80016e6:	d000      	beq.n	80016ea <handle_midi_message+0x3a>
 80016e8:	5411      	strb	r1, [r2, r0]
 80016ea:	5458      	strb	r0, [r3, r1]
	_midi_stack_forwards[note] = 0xFF;
 80016ec:	23ff      	movs	r3, #255	; 0xff
	_midi_last_note = note;
 80016ee:	7021      	strb	r1, [r4, #0]
	_midi_stack_forwards[note] = 0xFF;
 80016f0:	5453      	strb	r3, [r2, r1]
		case 0x80:
			// Delete note from list.
			if(fb >= 33 && fb <= 81) {_midi_pop_note(fb);}
			break;
	}
}
 80016f2:	bd70      	pop	{r4, r5, r6, pc}
	switch(MIDI_CMD(cmd)) {
 80016f4:	28e0      	cmp	r0, #224	; 0xe0
 80016f6:	d1fc      	bne.n	80016f2 <handle_midi_message+0x42>
			synth_set_pb((uint16_t)fb + ((uint16_t)sb << 7));
 80016f8:	01d2      	lsls	r2, r2, #7
 80016fa:	1850      	adds	r0, r2, r1
 80016fc:	f000 fba0 	bl	8001e40 <synth_set_pb>
			break;
 8001700:	e7f7      	b.n	80016f2 <handle_midi_message+0x42>
			if(fb >= 33 && fb <= 81) {_midi_pop_note(fb);}
 8001702:	000b      	movs	r3, r1
 8001704:	3b21      	subs	r3, #33	; 0x21
 8001706:	2b30      	cmp	r3, #48	; 0x30
 8001708:	d8f3      	bhi.n	80016f2 <handle_midi_message+0x42>
	if (note ==  _midi_last_note) {
 800170a:	4a2b      	ldr	r2, [pc, #172]	; (80017b8 <handle_midi_message+0x108>)
 800170c:	7813      	ldrb	r3, [r2, #0]
 800170e:	428b      	cmp	r3, r1
 8001710:	d042      	beq.n	8001798 <handle_midi_message+0xe8>
	if(_midi_stack_backwards[note] != 0xFF) {
 8001712:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <handle_midi_message+0x10c>)
		_midi_stack_forwards[_midi_stack_backwards[note]] = _midi_stack_forwards[note];
 8001714:	4a2a      	ldr	r2, [pc, #168]	; (80017c0 <handle_midi_message+0x110>)
	if(_midi_stack_backwards[note] != 0xFF) {
 8001716:	5c58      	ldrb	r0, [r3, r1]
 8001718:	28ff      	cmp	r0, #255	; 0xff
 800171a:	d001      	beq.n	8001720 <handle_midi_message+0x70>
		_midi_stack_forwards[_midi_stack_backwards[note]] = _midi_stack_forwards[note];
 800171c:	5c54      	ldrb	r4, [r2, r1]
 800171e:	5414      	strb	r4, [r2, r0]
	if(_midi_stack_forwards[note] != 0xFF) {
 8001720:	5c54      	ldrb	r4, [r2, r1]
 8001722:	2cff      	cmp	r4, #255	; 0xff
 8001724:	d000      	beq.n	8001728 <handle_midi_message+0x78>
		_midi_stack_backwards[_midi_stack_forwards[note]] = _midi_stack_backwards[note];
 8001726:	5518      	strb	r0, [r3, r4]
	_midi_stack_backwards[note] = 0xFF;
 8001728:	20ff      	movs	r0, #255	; 0xff
 800172a:	5458      	strb	r0, [r3, r1]
	_midi_stack_forwards[note] = 0xFF;
 800172c:	5450      	strb	r0, [r2, r1]
}
 800172e:	e7e0      	b.n	80016f2 <handle_midi_message+0x42>
			if (fb == 1) {synth_set_mod(sb);}			// CC1: Modulation
 8001730:	2901      	cmp	r1, #1
 8001732:	d019      	beq.n	8001768 <handle_midi_message+0xb8>
			else if (fb == 75) {synth_set_cc(0, sb);}
 8001734:	294b      	cmp	r1, #75	; 0x4b
 8001736:	d01b      	beq.n	8001770 <handle_midi_message+0xc0>
			else if (fb == 76) {synth_set_cc(1, sb);}
 8001738:	294c      	cmp	r1, #76	; 0x4c
 800173a:	d01e      	beq.n	800177a <handle_midi_message+0xca>
			else if (fb == 77) {synth_set_cc(2, sb);}
 800173c:	294d      	cmp	r1, #77	; 0x4d
 800173e:	d021      	beq.n	8001784 <handle_midi_message+0xd4>
			else if (fb == 78) {synth_set_cc(3, sb);}
 8001740:	294e      	cmp	r1, #78	; 0x4e
 8001742:	d024      	beq.n	800178e <handle_midi_message+0xde>
			else if (fb == 79) {synth_set_cc(4, sb);}
 8001744:	294f      	cmp	r1, #79	; 0x4f
 8001746:	d032      	beq.n	80017ae <handle_midi_message+0xfe>
			else if(fb == 123) {midi_stack_clear();}			// CC123: All notes off
 8001748:	297b      	cmp	r1, #123	; 0x7b
 800174a:	d1d2      	bne.n	80016f2 <handle_midi_message+0x42>
 800174c:	2280      	movs	r2, #128	; 0x80
 800174e:	3184      	adds	r1, #132	; 0x84
 8001750:	481b      	ldr	r0, [pc, #108]	; (80017c0 <handle_midi_message+0x110>)
 8001752:	f001 fd41 	bl	80031d8 <memset>
 8001756:	2280      	movs	r2, #128	; 0x80
 8001758:	21ff      	movs	r1, #255	; 0xff
 800175a:	4818      	ldr	r0, [pc, #96]	; (80017bc <handle_midi_message+0x10c>)
 800175c:	f001 fd3c 	bl	80031d8 <memset>
	_midi_last_note = 0xFF;
 8001760:	22ff      	movs	r2, #255	; 0xff
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <handle_midi_message+0x108>)
 8001764:	701a      	strb	r2, [r3, #0]
}
 8001766:	e7c4      	b.n	80016f2 <handle_midi_message+0x42>
			if (fb == 1) {synth_set_mod(sb);}			// CC1: Modulation
 8001768:	0010      	movs	r0, r2
 800176a:	f000 fb6f 	bl	8001e4c <synth_set_mod>
 800176e:	e7c0      	b.n	80016f2 <handle_midi_message+0x42>
			else if (fb == 75) {synth_set_cc(0, sb);}
 8001770:	0011      	movs	r1, r2
 8001772:	2000      	movs	r0, #0
 8001774:	f000 fb70 	bl	8001e58 <synth_set_cc>
 8001778:	e7bb      	b.n	80016f2 <handle_midi_message+0x42>
			else if (fb == 76) {synth_set_cc(1, sb);}
 800177a:	0011      	movs	r1, r2
 800177c:	2001      	movs	r0, #1
 800177e:	f000 fb6b 	bl	8001e58 <synth_set_cc>
 8001782:	e7b6      	b.n	80016f2 <handle_midi_message+0x42>
			else if (fb == 77) {synth_set_cc(2, sb);}
 8001784:	0011      	movs	r1, r2
 8001786:	2002      	movs	r0, #2
 8001788:	f000 fb66 	bl	8001e58 <synth_set_cc>
 800178c:	e7b1      	b.n	80016f2 <handle_midi_message+0x42>
			else if (fb == 78) {synth_set_cc(3, sb);}
 800178e:	0011      	movs	r1, r2
 8001790:	2003      	movs	r0, #3
 8001792:	f000 fb61 	bl	8001e58 <synth_set_cc>
 8001796:	e7ac      	b.n	80016f2 <handle_midi_message+0x42>
		_midi_last_note = _midi_stack_backwards[note];
 8001798:	4808      	ldr	r0, [pc, #32]	; (80017bc <handle_midi_message+0x10c>)
 800179a:	5cc1      	ldrb	r1, [r0, r3]
 800179c:	7011      	strb	r1, [r2, #0]
		_midi_stack_backwards[note] = 0xFF;
 800179e:	22ff      	movs	r2, #255	; 0xff
 80017a0:	54c2      	strb	r2, [r0, r3]
		_midi_stack_forwards[note] = 0xFF;
 80017a2:	4807      	ldr	r0, [pc, #28]	; (80017c0 <handle_midi_message+0x110>)
 80017a4:	54c2      	strb	r2, [r0, r3]
		if(_midi_last_note != 0xFF) {_midi_stack_forwards[_midi_last_note] = 0xFF;}
 80017a6:	29ff      	cmp	r1, #255	; 0xff
 80017a8:	d0a3      	beq.n	80016f2 <handle_midi_message+0x42>
 80017aa:	5442      	strb	r2, [r0, r1]
 80017ac:	e7a1      	b.n	80016f2 <handle_midi_message+0x42>
			else if (fb == 79) {synth_set_cc(4, sb);}
 80017ae:	0011      	movs	r1, r2
 80017b0:	2004      	movs	r0, #4
 80017b2:	f000 fb51 	bl	8001e58 <synth_set_cc>
 80017b6:	e79c      	b.n	80016f2 <handle_midi_message+0x42>
 80017b8:	20000028 	.word	0x20000028
 80017bc:	20000204 	.word	0x20000204
 80017c0:	20000284 	.word	0x20000284

080017c4 <USART1_IRQHandler>:
void USART1_IRQHandler() {
 80017c4:	b570      	push	{r4, r5, r6, lr}
	uint8_t rb = USART1->RDR;
 80017c6:	4b53      	ldr	r3, [pc, #332]	; (8001914 <USART1_IRQHandler+0x150>)
 80017c8:	8c98      	ldrh	r0, [r3, #36]	; 0x24
	if(USART1->ISR & USART_ISR_ORE) {
 80017ca:	69db      	ldr	r3, [r3, #28]
	uint8_t rb = USART1->RDR;
 80017cc:	b280      	uxth	r0, r0
	if(USART1->ISR & USART_ISR_ORE) {
 80017ce:	071b      	lsls	r3, r3, #28
 80017d0:	d504      	bpl.n	80017dc <USART1_IRQHandler+0x18>
		_midi_status = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	4a50      	ldr	r2, [pc, #320]	; (8001918 <USART1_IRQHandler+0x154>)
 80017d6:	7013      	strb	r3, [r2, #0]
		_midi_mode = MIDI_MODE_RESET;
 80017d8:	4a50      	ldr	r2, [pc, #320]	; (800191c <USART1_IRQHandler+0x158>)
 80017da:	7013      	strb	r3, [r2, #0]
	USART1->ICR |= USART_ICR_ORECF;
 80017dc:	2108      	movs	r1, #8
 80017de:	4b4d      	ldr	r3, [pc, #308]	; (8001914 <USART1_IRQHandler+0x150>)
 80017e0:	6a1a      	ldr	r2, [r3, #32]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	621a      	str	r2, [r3, #32]
	if(((USART1->ISR) & USART_ISR_ORE) != 0) {
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	4219      	tst	r1, r3
 80017ea:	d133      	bne.n	8001854 <USART1_IRQHandler+0x90>
	uint8_t rb = USART1->RDR;
 80017ec:	b2c3      	uxtb	r3, r0
	if(rb == 0xF8 || rb == 0xFA || rb == 0xFB || rb == 0xFC || rb == 0xFE || rb == 0xFF) {
 80017ee:	2bf8      	cmp	r3, #248	; 0xf8
 80017f0:	d049      	beq.n	8001886 <USART1_IRQHandler+0xc2>
 80017f2:	2bfa      	cmp	r3, #250	; 0xfa
 80017f4:	d032      	beq.n	800185c <USART1_IRQHandler+0x98>
 80017f6:	2bfb      	cmp	r3, #251	; 0xfb
 80017f8:	d048      	beq.n	800188c <USART1_IRQHandler+0xc8>
 80017fa:	2bfc      	cmp	r3, #252	; 0xfc
 80017fc:	d049      	beq.n	8001892 <USART1_IRQHandler+0xce>
 80017fe:	2bfd      	cmp	r3, #253	; 0xfd
 8001800:	d827      	bhi.n	8001852 <USART1_IRQHandler+0x8e>
	if(((_midi_mode == MIDI_MODE_RESET) || (_midi_mode == MIDI_MODE_SYSEX)) && MIDI_IS_DATA(rb)) {
 8001802:	4c46      	ldr	r4, [pc, #280]	; (800191c <USART1_IRQHandler+0x158>)
 8001804:	7822      	ldrb	r2, [r4, #0]
 8001806:	2a00      	cmp	r2, #0
 8001808:	d02b      	beq.n	8001862 <USART1_IRQHandler+0x9e>
 800180a:	7822      	ldrb	r2, [r4, #0]
 800180c:	2a04      	cmp	r2, #4
 800180e:	d028      	beq.n	8001862 <USART1_IRQHandler+0x9e>
	if MIDI_IS_STAT(rb) {
 8001810:	0602      	lsls	r2, r0, #24
 8001812:	d428      	bmi.n	8001866 <USART1_IRQHandler+0xa2>
		if (MIDI_CMD(_midi_status) == 0xF0) {return;} // Just to be sure.
 8001814:	200f      	movs	r0, #15
 8001816:	4940      	ldr	r1, [pc, #256]	; (8001918 <USART1_IRQHandler+0x154>)
 8001818:	780a      	ldrb	r2, [r1, #0]
 800181a:	4382      	bics	r2, r0
 800181c:	2af0      	cmp	r2, #240	; 0xf0
 800181e:	d018      	beq.n	8001852 <USART1_IRQHandler+0x8e>
		if(_midi_mode == MIDI_MODE_1BYTE_WAIT) {
 8001820:	7822      	ldrb	r2, [r4, #0]
 8001822:	2a02      	cmp	r2, #2
 8001824:	d038      	beq.n	8001898 <USART1_IRQHandler+0xd4>
		} else if (_midi_mode == MIDI_MODE_2BYTE_WAIT) {
 8001826:	7822      	ldrb	r2, [r4, #0]
 8001828:	2a03      	cmp	r2, #3
 800182a:	d03d      	beq.n	80018a8 <USART1_IRQHandler+0xe4>
		} else if (_midi_mode == MIDI_MODE_SINGLE_WAIT) {
 800182c:	7822      	ldrb	r2, [r4, #0]
 800182e:	2a01      	cmp	r2, #1
 8001830:	d10f      	bne.n	8001852 <USART1_IRQHandler+0x8e>
			if ((_midi_own_channel == MIDI_ALLCHAN) || (MIDI_CHAN(_midi_status) == _midi_own_channel)) {
 8001832:	483b      	ldr	r0, [pc, #236]	; (8001920 <USART1_IRQHandler+0x15c>)
 8001834:	7802      	ldrb	r2, [r0, #0]
 8001836:	2aff      	cmp	r2, #255	; 0xff
 8001838:	d005      	beq.n	8001846 <USART1_IRQHandler+0x82>
 800183a:	220f      	movs	r2, #15
 800183c:	780c      	ldrb	r4, [r1, #0]
 800183e:	7800      	ldrb	r0, [r0, #0]
 8001840:	4022      	ands	r2, r4
 8001842:	4282      	cmp	r2, r0
 8001844:	d105      	bne.n	8001852 <USART1_IRQHandler+0x8e>
				handle_midi_message(_midi_status, rb, 0);
 8001846:	7808      	ldrb	r0, [r1, #0]
 8001848:	2200      	movs	r2, #0
 800184a:	0019      	movs	r1, r3
 800184c:	b2c0      	uxtb	r0, r0
 800184e:	f7ff ff2f 	bl	80016b0 <handle_midi_message>
}
 8001852:	bd70      	pop	{r4, r5, r6, pc}
		_midi_mode = MIDI_MODE_RESET;
 8001854:	2200      	movs	r2, #0
 8001856:	4b31      	ldr	r3, [pc, #196]	; (800191c <USART1_IRQHandler+0x158>)
 8001858:	701a      	strb	r2, [r3, #0]
		return;
 800185a:	e7fa      	b.n	8001852 <USART1_IRQHandler+0x8e>
		else if(rb == 0xFA) {lfo_sync_start();}
 800185c:	f7ff fd2e 	bl	80012bc <lfo_sync_start>
 8001860:	e7f7      	b.n	8001852 <USART1_IRQHandler+0x8e>
	if(((_midi_mode == MIDI_MODE_RESET) || (_midi_mode == MIDI_MODE_SYSEX)) && MIDI_IS_DATA(rb)) {
 8001862:	0602      	lsls	r2, r0, #24
 8001864:	d5f5      	bpl.n	8001852 <USART1_IRQHandler+0x8e>
		_midi_status = rb;
 8001866:	4a2c      	ldr	r2, [pc, #176]	; (8001918 <USART1_IRQHandler+0x154>)
 8001868:	7013      	strb	r3, [r2, #0]
		if(rb == 0xF0) {_midi_mode = MIDI_MODE_SYSEX;}
 800186a:	2bf0      	cmp	r3, #240	; 0xf0
 800186c:	d019      	beq.n	80018a2 <USART1_IRQHandler+0xde>
		else if(cmd == 0xF0) {_midi_mode = MIDI_MODE_RESET;} // Any other 0xFx message, including sysex end. Start ignoring everything except status bytes
 800186e:	220f      	movs	r2, #15
 8001870:	0019      	movs	r1, r3
 8001872:	4391      	bics	r1, r2
 8001874:	29f0      	cmp	r1, #240	; 0xf0
 8001876:	d032      	beq.n	80018de <USART1_IRQHandler+0x11a>
		else if(cmd == 0xC0 || cmd == 0xD0) {_midi_mode = MIDI_MODE_SINGLE_WAIT;} // Channel and pressure, only non-0xFx messages with one byte
 8001878:	221f      	movs	r2, #31
 800187a:	4393      	bics	r3, r2
 800187c:	2bc0      	cmp	r3, #192	; 0xc0
 800187e:	d02b      	beq.n	80018d8 <USART1_IRQHandler+0x114>
			_midi_mode = MIDI_MODE_1BYTE_WAIT;
 8001880:	2302      	movs	r3, #2
 8001882:	7023      	strb	r3, [r4, #0]
 8001884:	e7e5      	b.n	8001852 <USART1_IRQHandler+0x8e>
		if(rb == 0xF8) {lfo_sync_tick();}
 8001886:	f7ff fd5d 	bl	8001344 <lfo_sync_tick>
 800188a:	e7e2      	b.n	8001852 <USART1_IRQHandler+0x8e>
		else if(rb == 0xFB) {lfo_sync_continue();}
 800188c:	f7ff fd54 	bl	8001338 <lfo_sync_continue>
 8001890:	e7df      	b.n	8001852 <USART1_IRQHandler+0x8e>
		else if(rb == 0xFC) {lfo_sync_stop();}
 8001892:	f7ff fd39 	bl	8001308 <lfo_sync_stop>
 8001896:	e7dc      	b.n	8001852 <USART1_IRQHandler+0x8e>
			_midi_firstbyte = rb;
 8001898:	4a22      	ldr	r2, [pc, #136]	; (8001924 <USART1_IRQHandler+0x160>)
 800189a:	7013      	strb	r3, [r2, #0]
			_midi_mode = MIDI_MODE_2BYTE_WAIT;
 800189c:	2303      	movs	r3, #3
 800189e:	7023      	strb	r3, [r4, #0]
 80018a0:	e7d7      	b.n	8001852 <USART1_IRQHandler+0x8e>
		if(rb == 0xF0) {_midi_mode = MIDI_MODE_SYSEX;}
 80018a2:	3bec      	subs	r3, #236	; 0xec
 80018a4:	7023      	strb	r3, [r4, #0]
 80018a6:	e7d4      	b.n	8001852 <USART1_IRQHandler+0x8e>
			if ((MIDI_CMD(_midi_status) == 0x90) && (rb == 0)) { // Implicit note off
 80018a8:	200f      	movs	r0, #15
 80018aa:	780a      	ldrb	r2, [r1, #0]
 80018ac:	4382      	bics	r2, r0
 80018ae:	2a90      	cmp	r2, #144	; 0x90
 80018b0:	d018      	beq.n	80018e4 <USART1_IRQHandler+0x120>
				if ((_midi_own_channel == MIDI_ALLCHAN) || (MIDI_CHAN(_midi_status) == _midi_own_channel)) {
 80018b2:	481b      	ldr	r0, [pc, #108]	; (8001920 <USART1_IRQHandler+0x15c>)
 80018b4:	7802      	ldrb	r2, [r0, #0]
 80018b6:	2aff      	cmp	r2, #255	; 0xff
 80018b8:	d005      	beq.n	80018c6 <USART1_IRQHandler+0x102>
 80018ba:	220f      	movs	r2, #15
 80018bc:	780d      	ldrb	r5, [r1, #0]
 80018be:	7800      	ldrb	r0, [r0, #0]
 80018c0:	402a      	ands	r2, r5
 80018c2:	4282      	cmp	r2, r0
 80018c4:	d1dc      	bne.n	8001880 <USART1_IRQHandler+0xbc>
					handle_midi_message(_midi_status, _midi_firstbyte, rb);
 80018c6:	4a17      	ldr	r2, [pc, #92]	; (8001924 <USART1_IRQHandler+0x160>)
 80018c8:	7808      	ldrb	r0, [r1, #0]
 80018ca:	7811      	ldrb	r1, [r2, #0]
 80018cc:	b2c0      	uxtb	r0, r0
 80018ce:	001a      	movs	r2, r3
 80018d0:	b2c9      	uxtb	r1, r1
 80018d2:	f7ff feed 	bl	80016b0 <handle_midi_message>
 80018d6:	e7d3      	b.n	8001880 <USART1_IRQHandler+0xbc>
		else if(cmd == 0xC0 || cmd == 0xD0) {_midi_mode = MIDI_MODE_SINGLE_WAIT;} // Channel and pressure, only non-0xFx messages with one byte
 80018d8:	3bbf      	subs	r3, #191	; 0xbf
 80018da:	7023      	strb	r3, [r4, #0]
 80018dc:	e7b9      	b.n	8001852 <USART1_IRQHandler+0x8e>
		else if(cmd == 0xF0) {_midi_mode = MIDI_MODE_RESET;} // Any other 0xFx message, including sysex end. Start ignoring everything except status bytes
 80018de:	2300      	movs	r3, #0
 80018e0:	7023      	strb	r3, [r4, #0]
 80018e2:	e7b6      	b.n	8001852 <USART1_IRQHandler+0x8e>
			if ((MIDI_CMD(_midi_status) == 0x90) && (rb == 0)) { // Implicit note off
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1e4      	bne.n	80018b2 <USART1_IRQHandler+0xee>
				if ((_midi_own_channel == MIDI_ALLCHAN) || (MIDI_CHAN(_midi_status) == _midi_own_channel)) {
 80018e8:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <USART1_IRQHandler+0x15c>)
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	2aff      	cmp	r2, #255	; 0xff
 80018ee:	d004      	beq.n	80018fa <USART1_IRQHandler+0x136>
 80018f0:	780a      	ldrb	r2, [r1, #0]
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	4010      	ands	r0, r2
 80018f6:	4298      	cmp	r0, r3
 80018f8:	d1c2      	bne.n	8001880 <USART1_IRQHandler+0xbc>
					handle_midi_message(0x80 | MIDI_CHAN(_midi_status), _midi_firstbyte, 0);
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <USART1_IRQHandler+0x160>)
 80018fc:	7808      	ldrb	r0, [r1, #0]
 80018fe:	7819      	ldrb	r1, [r3, #0]
 8001900:	230f      	movs	r3, #15
 8001902:	4018      	ands	r0, r3
 8001904:	3371      	adds	r3, #113	; 0x71
 8001906:	2200      	movs	r2, #0
 8001908:	b2c9      	uxtb	r1, r1
 800190a:	4318      	orrs	r0, r3
 800190c:	f7ff fed0 	bl	80016b0 <handle_midi_message>
 8001910:	e7b6      	b.n	8001880 <USART1_IRQHandler+0xbc>
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	40013800 	.word	0x40013800
 8001918:	20000166 	.word	0x20000166
 800191c:	20000165 	.word	0x20000165
 8001920:	20000029 	.word	0x20000029
 8001924:	20000164 	.word	0x20000164

08001928 <midi_panic>:

void midi_panic() {
 8001928:	b510      	push	{r4, lr}
 800192a:	2280      	movs	r2, #128	; 0x80
 800192c:	21ff      	movs	r1, #255	; 0xff
 800192e:	4809      	ldr	r0, [pc, #36]	; (8001954 <midi_panic+0x2c>)
 8001930:	f001 fc52 	bl	80031d8 <memset>
 8001934:	2280      	movs	r2, #128	; 0x80
 8001936:	21ff      	movs	r1, #255	; 0xff
 8001938:	4807      	ldr	r0, [pc, #28]	; (8001958 <midi_panic+0x30>)
 800193a:	f001 fc4d 	bl	80031d8 <memset>
	_midi_last_note = 0xFF;
 800193e:	22ff      	movs	r2, #255	; 0xff
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <midi_panic+0x34>)
 8001942:	701a      	strb	r2, [r3, #0]
	midi_stack_clear();
	_midi_status = 0x00;
 8001944:	2300      	movs	r3, #0
 8001946:	4a06      	ldr	r2, [pc, #24]	; (8001960 <midi_panic+0x38>)
 8001948:	7013      	strb	r3, [r2, #0]
	_midi_mode = MIDI_MODE_RESET;
 800194a:	4a06      	ldr	r2, [pc, #24]	; (8001964 <midi_panic+0x3c>)
 800194c:	7013      	strb	r3, [r2, #0]
	synth_reset_midi();
 800194e:	f000 fa89 	bl	8001e64 <synth_reset_midi>
}
 8001952:	bd10      	pop	{r4, pc}
 8001954:	20000284 	.word	0x20000284
 8001958:	20000204 	.word	0x20000204
 800195c:	20000028 	.word	0x20000028
 8001960:	20000166 	.word	0x20000166
 8001964:	20000165 	.word	0x20000165

08001968 <midi_reset>:

void midi_reset() {
 8001968:	b510      	push	{r4, lr}
 800196a:	2280      	movs	r2, #128	; 0x80
 800196c:	21ff      	movs	r1, #255	; 0xff
 800196e:	4813      	ldr	r0, [pc, #76]	; (80019bc <midi_reset+0x54>)
 8001970:	f001 fc32 	bl	80031d8 <memset>
 8001974:	21ff      	movs	r1, #255	; 0xff
 8001976:	2280      	movs	r2, #128	; 0x80
 8001978:	4811      	ldr	r0, [pc, #68]	; (80019c0 <midi_reset+0x58>)
 800197a:	f001 fc2d 	bl	80031d8 <memset>
	_midi_last_note = 0xFF;
 800197e:	22ff      	movs	r2, #255	; 0xff
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <midi_reset+0x5c>)
 8001982:	701a      	strb	r2, [r3, #0]
	_midi_status = 0x00;
 8001984:	2300      	movs	r3, #0
 8001986:	4a10      	ldr	r2, [pc, #64]	; (80019c8 <midi_reset+0x60>)
 8001988:	7013      	strb	r3, [r2, #0]
	_midi_mode = MIDI_MODE_RESET;
 800198a:	4a10      	ldr	r2, [pc, #64]	; (80019cc <midi_reset+0x64>)
 800198c:	7013      	strb	r3, [r2, #0]
	synth_reset_midi();
 800198e:	f000 fa69 	bl	8001e64 <synth_reset_midi>
	midi_panic();
	synth_set_cc(0, 0);
 8001992:	2100      	movs	r1, #0
 8001994:	2000      	movs	r0, #0
 8001996:	f000 fa5f 	bl	8001e58 <synth_set_cc>
	synth_set_cc(1, 0);
 800199a:	2100      	movs	r1, #0
 800199c:	2001      	movs	r0, #1
 800199e:	f000 fa5b 	bl	8001e58 <synth_set_cc>
	synth_set_cc(2, 0);
 80019a2:	2100      	movs	r1, #0
 80019a4:	2002      	movs	r0, #2
 80019a6:	f000 fa57 	bl	8001e58 <synth_set_cc>
	synth_set_cc(3, 0);
 80019aa:	2100      	movs	r1, #0
 80019ac:	2003      	movs	r0, #3
 80019ae:	f000 fa53 	bl	8001e58 <synth_set_cc>
	synth_set_cc(4, 0);
 80019b2:	2100      	movs	r1, #0
 80019b4:	2004      	movs	r0, #4
 80019b6:	f000 fa4f 	bl	8001e58 <synth_set_cc>
}
 80019ba:	bd10      	pop	{r4, pc}
 80019bc:	20000284 	.word	0x20000284
 80019c0:	20000204 	.word	0x20000204
 80019c4:	20000028 	.word	0x20000028
 80019c8:	20000166 	.word	0x20000166
 80019cc:	20000165 	.word	0x20000165

080019d0 <pwm_configure>:
 80019d0:	21c3      	movs	r1, #195	; 0xc3

#include <lfo.h>
#include <synth.h>
//#include <adc.h>

void pwm_configure() {
 80019d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d4:	4657      	mov	r7, sl
 80019d6:	464e      	mov	r6, r9
 80019d8:	4645      	mov	r5, r8
 80019da:	46de      	mov	lr, fp
 80019dc:	4b66      	ldr	r3, [pc, #408]	; (8001b78 <pwm_configure+0x1a8>)
 80019de:	0089      	lsls	r1, r1, #2
 80019e0:	585a      	ldr	r2, [r3, r1]
 80019e2:	b5e0      	push	{r5, r6, r7, lr}
 80019e4:	4865      	ldr	r0, [pc, #404]	; (8001b7c <pwm_configure+0x1ac>)
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e6:	2580      	movs	r5, #128	; 0x80
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019e8:	4002      	ands	r2, r0
 80019ea:	505a      	str	r2, [r3, r1]
	GPIOA->BSRR |= GPIO_BSRR_BS_8;
	*/
	NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0);
	NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);

	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80019ec:	2280      	movs	r2, #128	; 0x80
 80019ee:	4964      	ldr	r1, [pc, #400]	; (8001b80 <pwm_configure+0x1b0>)
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f0:	01ad      	lsls	r5, r5, #6
 80019f2:	601d      	str	r5, [r3, #0]
 80019f4:	694b      	ldr	r3, [r1, #20]
 80019f6:	0292      	lsls	r2, r2, #10
 80019f8:	4313      	orrs	r3, r2
 80019fa:	614b      	str	r3, [r1, #20]
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	6948      	ldr	r0, [r1, #20]
 8001a00:	02db      	lsls	r3, r3, #11
 8001a02:	4303      	orrs	r3, r0
 8001a04:	614b      	str	r3, [r1, #20]

	// Set A9-A11 pins to Timer CH1-CH4
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER8_Msk, 0b10 << GPIO_MODER_MODER8_Pos);	// AF
 8001a06:	2390      	movs	r3, #144	; 0x90
 8001a08:	05db      	lsls	r3, r3, #23
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	4c5d      	ldr	r4, [pc, #372]	; (8001b84 <pwm_configure+0x1b4>)
	MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFRH0_Msk, 2 << GPIO_AFRH_AFRH0_Pos); 	// AF2
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER9_Msk, 0b10 << GPIO_MODER_MODER9_Pos);	// AF
	MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFRH1_Msk, 2 << GPIO_AFRH_AFRH1_Pos); 	// AF2
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER10_Msk, 0b10 << GPIO_MODER_MODER10_Pos);	// AF
	MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFRH2_Msk, 2 << GPIO_AFRH_AFRH2_Pos); 	// AF2
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER11_Msk, 0b10 << GPIO_MODER_MODER11_Pos);	// AF
 8001a0e:	4e5e      	ldr	r6, [pc, #376]	; (8001b88 <pwm_configure+0x1b8>)
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER8_Msk, 0b10 << GPIO_MODER_MODER8_Pos);	// AF
 8001a10:	4020      	ands	r0, r4
 8001a12:	4302      	orrs	r2, r0
	MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFRH0_Msk, 2 << GPIO_AFRH_AFRH0_Pos); 	// AF2
 8001a14:	200f      	movs	r0, #15
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER8_Msk, 0b10 << GPIO_MODER_MODER8_Pos);	// AF
 8001a16:	601a      	str	r2, [r3, #0]
	MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFRH0_Msk, 2 << GPIO_AFRH_AFRH0_Pos); 	// AF2
 8001a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFRH1_Msk, 2 << GPIO_AFRH_AFRH1_Pos); 	// AF2
 8001a1a:	24f0      	movs	r4, #240	; 0xf0
	MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFRH0_Msk, 2 << GPIO_AFRH_AFRH0_Pos); 	// AF2
 8001a1c:	4382      	bics	r2, r0
 8001a1e:	380d      	subs	r0, #13
 8001a20:	4302      	orrs	r2, r0
 8001a22:	625a      	str	r2, [r3, #36]	; 0x24
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER9_Msk, 0b10 << GPIO_MODER_MODER9_Pos);	// AF
 8001a24:	681a      	ldr	r2, [r3, #0]
	MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFRH0_Msk, 2 << GPIO_AFRH_AFRH0_Pos); 	// AF2
 8001a26:	4680      	mov	r8, r0
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER9_Msk, 0b10 << GPIO_MODER_MODER9_Pos);	// AF
 8001a28:	4858      	ldr	r0, [pc, #352]	; (8001b8c <pwm_configure+0x1bc>)
 8001a2a:	4010      	ands	r0, r2
 8001a2c:	2280      	movs	r2, #128	; 0x80
 8001a2e:	0312      	lsls	r2, r2, #12
 8001a30:	4302      	orrs	r2, r0
	MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFRH1_Msk, 2 << GPIO_AFRH_AFRH1_Pos); 	// AF2
 8001a32:	2020      	movs	r0, #32
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER9_Msk, 0b10 << GPIO_MODER_MODER9_Pos);	// AF
 8001a34:	601a      	str	r2, [r3, #0]
	MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFRH1_Msk, 2 << GPIO_AFRH_AFRH1_Pos); 	// AF2
 8001a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a38:	43a2      	bics	r2, r4
 8001a3a:	4302      	orrs	r2, r0
 8001a3c:	625a      	str	r2, [r3, #36]	; 0x24
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER10_Msk, 0b10 << GPIO_MODER_MODER10_Pos);	// AF
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4853      	ldr	r0, [pc, #332]	; (8001b90 <pwm_configure+0x1c0>)
 8001a42:	4010      	ands	r0, r2
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	0392      	lsls	r2, r2, #14
 8001a48:	4302      	orrs	r2, r0
 8001a4a:	601a      	str	r2, [r3, #0]
	MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFRH2_Msk, 2 << GPIO_AFRH_AFRH2_Pos); 	// AF2
 8001a4c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001a4e:	4a51      	ldr	r2, [pc, #324]	; (8001b94 <pwm_configure+0x1c4>)
 8001a50:	4010      	ands	r0, r2
 8001a52:	2280      	movs	r2, #128	; 0x80
 8001a54:	0092      	lsls	r2, r2, #2
 8001a56:	4310      	orrs	r0, r2
 8001a58:	6258      	str	r0, [r3, #36]	; 0x24
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER11_Msk, 0b10 << GPIO_MODER_MODER11_Pos);	// AF
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	4006      	ands	r6, r0
 8001a5e:	2080      	movs	r0, #128	; 0x80
 8001a60:	0400      	lsls	r0, r0, #16
 8001a62:	4330      	orrs	r0, r6
 8001a64:	6018      	str	r0, [r3, #0]
	MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFRH3_Msk, 2 << GPIO_AFRH_AFRH3_Pos); 	// AF2
 8001a66:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001a68:	4e4b      	ldr	r6, [pc, #300]	; (8001b98 <pwm_configure+0x1c8>)
 8001a6a:	4030      	ands	r0, r6
 8001a6c:	4305      	orrs	r5, r0

	// Configure Timer 1

	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001a6e:	2080      	movs	r0, #128	; 0x80
	MODIFY_REG(GPIOA->AFR[1], GPIO_AFRH_AFRH3_Msk, 2 << GPIO_AFRH_AFRH3_Pos); 	// AF2
 8001a70:	625d      	str	r5, [r3, #36]	; 0x24
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001a72:	698b      	ldr	r3, [r1, #24]
 8001a74:	0100      	lsls	r0, r0, #4
 8001a76:	4681      	mov	r9, r0
 8001a78:	4303      	orrs	r3, r0
	TIM1->PSC = 0;
 8001a7a:	2000      	movs	r0, #0
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8001a7c:	618b      	str	r3, [r1, #24]
	TIM1->PSC = 0;
 8001a7e:	4b47      	ldr	r3, [pc, #284]	; (8001b9c <pwm_configure+0x1cc>)
 8001a80:	4684      	mov	ip, r0
 8001a82:	6298      	str	r0, [r3, #40]	; 0x28
	TIM1->ARR = 1023;
 8001a84:	4846      	ldr	r0, [pc, #280]	; (8001ba0 <pwm_configure+0x1d0>)
	TIM1->RCR = 3;
	TIM1->DIER |= TIM_DIER_UIE;
 8001a86:	2501      	movs	r5, #1
	TIM1->ARR = 1023;
 8001a88:	62d8      	str	r0, [r3, #44]	; 0x2c
	TIM1->RCR = 3;
 8001a8a:	2003      	movs	r0, #3
 8001a8c:	6318      	str	r0, [r3, #48]	; 0x30
	TIM1->DIER |= TIM_DIER_UIE;
 8001a8e:	68d8      	ldr	r0, [r3, #12]
 8001a90:	4328      	orrs	r0, r5
 8001a92:	60d8      	str	r0, [r3, #12]
	TIM1->CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos) | (0b110 << TIM_CCMR1_OC2M_Pos);
 8001a94:	699e      	ldr	r6, [r3, #24]
 8001a96:	4843      	ldr	r0, [pc, #268]	; (8001ba4 <pwm_configure+0x1d4>)
 8001a98:	4306      	orrs	r6, r0
 8001a9a:	619e      	str	r6, [r3, #24]
	TIM1->CCMR2 |= (0b110 << TIM_CCMR2_OC3M_Pos) | (0b110 << TIM_CCMR2_OC4M_Pos);
 8001a9c:	69de      	ldr	r6, [r3, #28]
 8001a9e:	4306      	orrs	r6, r0
 8001aa0:	61de      	str	r6, [r3, #28]
	TIM1->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E;
 8001aa2:	6a1e      	ldr	r6, [r3, #32]
 8001aa4:	46b2      	mov	sl, r6
 8001aa6:	4657      	mov	r7, sl
 8001aa8:	4e3f      	ldr	r6, [pc, #252]	; (8001ba8 <pwm_configure+0x1d8>)
 8001aaa:	433e      	orrs	r6, r7
 8001aac:	621e      	str	r6, [r3, #32]
	TIM1->CR1 |= TIM_CR1_ARPE;
 8001aae:	681e      	ldr	r6, [r3, #0]
 8001ab0:	46b2      	mov	sl, r6
 8001ab2:	2680      	movs	r6, #128	; 0x80
 8001ab4:	4657      	mov	r7, sl
 8001ab6:	4337      	orrs	r7, r6
 8001ab8:	601f      	str	r7, [r3, #0]
	TIM1->BDTR |= TIM_BDTR_MOE;
 8001aba:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8001abc:	46bb      	mov	fp, r7
 8001abe:	2780      	movs	r7, #128	; 0x80
 8001ac0:	023f      	lsls	r7, r7, #8
 8001ac2:	46ba      	mov	sl, r7
 8001ac4:	465f      	mov	r7, fp
 8001ac6:	4654      	mov	r4, sl
 8001ac8:	4327      	orrs	r7, r4
 8001aca:	645f      	str	r7, [r3, #68]	; 0x44
	TIM1->CR1 |= TIM_CR1_CEN;
 8001acc:	681c      	ldr	r4, [r3, #0]
 8001ace:	0027      	movs	r7, r4
 8001ad0:	432f      	orrs	r7, r5
 8001ad2:	601f      	str	r7, [r3, #0]

	TIM1->CCR1 = 512;
 8001ad4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 512;
 8001ad6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 512;
 8001ad8:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 512;
 8001ada:	641a      	str	r2, [r3, #64]	; 0x40

	// Set PB1 to CH4, PB4 to CH1, PB5 to CH2
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER1_Msk, 0b10 << GPIO_MODER_MODER1_Pos);	// AF
 8001adc:	4b33      	ldr	r3, [pc, #204]	; (8001bac <pwm_configure+0x1dc>)
 8001ade:	681c      	ldr	r4, [r3, #0]
 8001ae0:	46a2      	mov	sl, r4
 8001ae2:	240c      	movs	r4, #12
 8001ae4:	4657      	mov	r7, sl
 8001ae6:	43a7      	bics	r7, r4
 8001ae8:	3c04      	subs	r4, #4
 8001aea:	4327      	orrs	r7, r4
 8001aec:	601f      	str	r7, [r3, #0]
	MODIFY_REG(GPIOB->AFR[0], GPIO_AFRL_AFRL1_Msk, 1 << GPIO_AFRL_AFRL1_Pos); 	// AF1
 8001aee:	6a1c      	ldr	r4, [r3, #32]
 8001af0:	0027      	movs	r7, r4
 8001af2:	24f0      	movs	r4, #240	; 0xf0
 8001af4:	43a7      	bics	r7, r4
 8001af6:	003c      	movs	r4, r7
 8001af8:	2710      	movs	r7, #16
 8001afa:	433c      	orrs	r4, r7
 8001afc:	621c      	str	r4, [r3, #32]
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER4_Msk, 0b10 << GPIO_MODER_MODER4_Pos);	// AF
 8001afe:	681c      	ldr	r4, [r3, #0]
 8001b00:	4f2b      	ldr	r7, [pc, #172]	; (8001bb0 <pwm_configure+0x1e0>)
 8001b02:	403c      	ands	r4, r7
 8001b04:	4314      	orrs	r4, r2
 8001b06:	601c      	str	r4, [r3, #0]
	MODIFY_REG(GPIOB->AFR[0], GPIO_AFRL_AFRL4_Msk, 1 << GPIO_AFRL_AFRL4_Pos); 	// AF1
 8001b08:	6a1c      	ldr	r4, [r3, #32]
 8001b0a:	4f2a      	ldr	r7, [pc, #168]	; (8001bb4 <pwm_configure+0x1e4>)
 8001b0c:	4027      	ands	r7, r4
 8001b0e:	2480      	movs	r4, #128	; 0x80
 8001b10:	0264      	lsls	r4, r4, #9
 8001b12:	433c      	orrs	r4, r7
 8001b14:	621c      	str	r4, [r3, #32]
	MODIFY_REG(GPIOB->MODER, GPIO_MODER_MODER5_Msk, 0b10 << GPIO_MODER_MODER5_Pos);	// AF
 8001b16:	681c      	ldr	r4, [r3, #0]
 8001b18:	4f27      	ldr	r7, [pc, #156]	; (8001bb8 <pwm_configure+0x1e8>)
 8001b1a:	403c      	ands	r4, r7
 8001b1c:	464f      	mov	r7, r9
 8001b1e:	433c      	orrs	r4, r7
 8001b20:	601c      	str	r4, [r3, #0]
	MODIFY_REG(GPIOB->AFR[0], GPIO_AFRL_AFRL5_Msk, 1 << GPIO_AFRL_AFRL5_Pos); 	// AF1
 8001b22:	6a1c      	ldr	r4, [r3, #32]
 8001b24:	4f25      	ldr	r7, [pc, #148]	; (8001bbc <pwm_configure+0x1ec>)
 8001b26:	4027      	ands	r7, r4
 8001b28:	2480      	movs	r4, #128	; 0x80
 8001b2a:	0364      	lsls	r4, r4, #13
 8001b2c:	433c      	orrs	r4, r7
 8001b2e:	621c      	str	r4, [r3, #32]

	// Configure Timer 3

	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001b30:	4644      	mov	r4, r8
 8001b32:	69cb      	ldr	r3, [r1, #28]
 8001b34:	4323      	orrs	r3, r4
 8001b36:	61cb      	str	r3, [r1, #28]
	TIM3->PSC = 0;
 8001b38:	4661      	mov	r1, ip
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <pwm_configure+0x1f0>)
 8001b3c:	6299      	str	r1, [r3, #40]	; 0x28
	TIM3->ARR = 1023;
 8001b3e:	4918      	ldr	r1, [pc, #96]	; (8001ba0 <pwm_configure+0x1d0>)
 8001b40:	62d9      	str	r1, [r3, #44]	; 0x2c
	//TIM3->DIER |= TIM_DIER_UIE;
	TIM3->CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos) | (0b110 << TIM_CCMR1_OC2M_Pos);
 8001b42:	6999      	ldr	r1, [r3, #24]
 8001b44:	4308      	orrs	r0, r1
	TIM3->CCMR2 |= (0b110 << TIM_CCMR2_OC4M_Pos);
 8001b46:	21c0      	movs	r1, #192	; 0xc0
	TIM3->CCMR1 |= (0b110 << TIM_CCMR1_OC1M_Pos) | (0b110 << TIM_CCMR1_OC2M_Pos);
 8001b48:	6198      	str	r0, [r3, #24]
	TIM3->CCMR2 |= (0b110 << TIM_CCMR2_OC4M_Pos);
 8001b4a:	69d8      	ldr	r0, [r3, #28]
 8001b4c:	01c9      	lsls	r1, r1, #7
 8001b4e:	4301      	orrs	r1, r0
 8001b50:	61d9      	str	r1, [r3, #28]
	TIM3->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC4E;
 8001b52:	6a18      	ldr	r0, [r3, #32]
 8001b54:	491b      	ldr	r1, [pc, #108]	; (8001bc4 <pwm_configure+0x1f4>)
 8001b56:	4301      	orrs	r1, r0
 8001b58:	6219      	str	r1, [r3, #32]
	TIM3->CR1 |= TIM_CR1_ARPE;
 8001b5a:	6819      	ldr	r1, [r3, #0]
 8001b5c:	430e      	orrs	r6, r1
 8001b5e:	601e      	str	r6, [r3, #0]
	TIM3->CR1 |= TIM_CR1_CEN;
 8001b60:	6819      	ldr	r1, [r3, #0]
 8001b62:	430d      	orrs	r5, r1
 8001b64:	601d      	str	r5, [r3, #0]

	TIM3->CCR1 = 512;
 8001b66:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 512;
 8001b68:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR4 = 512;
 8001b6a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b6c:	bcf0      	pop	{r4, r5, r6, r7}
 8001b6e:	46bb      	mov	fp, r7
 8001b70:	46b2      	mov	sl, r6
 8001b72:	46a9      	mov	r9, r5
 8001b74:	46a0      	mov	r8, r4
 8001b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b78:	e000e100 	.word	0xe000e100
 8001b7c:	ffff00ff 	.word	0xffff00ff
 8001b80:	40021000 	.word	0x40021000
 8001b84:	fffcffff 	.word	0xfffcffff
 8001b88:	ff3fffff 	.word	0xff3fffff
 8001b8c:	fff3ffff 	.word	0xfff3ffff
 8001b90:	ffcfffff 	.word	0xffcfffff
 8001b94:	fffff0ff 	.word	0xfffff0ff
 8001b98:	ffff0fff 	.word	0xffff0fff
 8001b9c:	40012c00 	.word	0x40012c00
 8001ba0:	000003ff 	.word	0x000003ff
 8001ba4:	00006060 	.word	0x00006060
 8001ba8:	00001111 	.word	0x00001111
 8001bac:	48000400 	.word	0x48000400
 8001bb0:	fffffcff 	.word	0xfffffcff
 8001bb4:	fff0ffff 	.word	0xfff0ffff
 8001bb8:	fffff3ff 	.word	0xfffff3ff
 8001bbc:	ff0fffff 	.word	0xff0fffff
 8001bc0:	40000400 	.word	0x40000400
 8001bc4:	00001011 	.word	0x00001011

08001bc8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

void TIM1_BRK_UP_TRG_COM_IRQHandler(void) {
	GPIOC->BSRR |= GPIO_BSRR_BS_13;
 8001bc8:	2380      	movs	r3, #128	; 0x80
void TIM1_BRK_UP_TRG_COM_IRQHandler(void) {
 8001bca:	b510      	push	{r4, lr}
	GPIOC->BSRR |= GPIO_BSRR_BS_13;
 8001bcc:	4c09      	ldr	r4, [pc, #36]	; (8001bf4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2c>)
 8001bce:	019b      	lsls	r3, r3, #6
 8001bd0:	69a2      	ldr	r2, [r4, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61a3      	str	r3, [r4, #24]
	lfo_process();
 8001bd6:	f7ff f9cd 	bl	8000f74 <lfo_process>
	synth_process();
 8001bda:	f000 fa59 	bl	8002090 <synth_process>

	GPIOC->BSRR |= GPIO_BSRR_BR_13;
 8001bde:	2380      	movs	r3, #128	; 0x80
	TIM1->SR &= ~TIM_SR_UIF;
 8001be0:	2101      	movs	r1, #1
	GPIOC->BSRR |= GPIO_BSRR_BR_13;
 8001be2:	69a2      	ldr	r2, [r4, #24]
 8001be4:	059b      	lsls	r3, r3, #22
 8001be6:	4313      	orrs	r3, r2
	TIM1->SR &= ~TIM_SR_UIF;
 8001be8:	4a03      	ldr	r2, [pc, #12]	; (8001bf8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30>)
	GPIOC->BSRR |= GPIO_BSRR_BR_13;
 8001bea:	61a3      	str	r3, [r4, #24]
	TIM1->SR &= ~TIM_SR_UIF;
 8001bec:	6913      	ldr	r3, [r2, #16]
 8001bee:	438b      	bics	r3, r1
 8001bf0:	6113      	str	r3, [r2, #16]
}
 8001bf2:	bd10      	pop	{r4, pc}
 8001bf4:	48000800 	.word	0x48000800
 8001bf8:	40012c00 	.word	0x40012c00

08001bfc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <NMI_Handler>
 8001bfe:	46c0      	nop			; (mov r8, r8)

08001c00 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <HardFault_Handler>
 8001c02:	46c0      	nop			; (mov r8, r8)

08001c04 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c04:	4770      	bx	lr
 8001c06:	46c0      	nop			; (mov r8, r8)

08001c08 <PendSV_Handler>:
 8001c08:	4770      	bx	lr
 8001c0a:	46c0      	nop			; (mov r8, r8)

08001c0c <synth_load_preset>:
volatile uint8_t _synth_mod = 0;
volatile uint8_t _synth_last_midi = 0xFF;

volatile uint8_t _synth_cc[5];

void synth_load_preset(uint8_t preset) {
 8001c0c:	b530      	push	{r4, r5, lr}
	for(uint8_t i = 0; i < 9; i++) {
		_synth_knob_active[i] = 0;
 8001c0e:	2400      	movs	r4, #0
 8001c10:	494f      	ldr	r1, [pc, #316]	; (8001d50 <synth_load_preset+0x144>)
		_synth_knob_hlast[i] = adcData[i];
 8001c12:	4a50      	ldr	r2, [pc, #320]	; (8001d54 <synth_load_preset+0x148>)
		_synth_knob_active[i] = 0;
 8001c14:	700c      	strb	r4, [r1, #0]
		_synth_knob_hlast[i] = adcData[i];
 8001c16:	8815      	ldrh	r5, [r2, #0]
 8001c18:	4b4f      	ldr	r3, [pc, #316]	; (8001d58 <synth_load_preset+0x14c>)
 8001c1a:	b2ad      	uxth	r5, r5
 8001c1c:	801d      	strh	r5, [r3, #0]
		_synth_knob_active[i] = 0;
 8001c1e:	704c      	strb	r4, [r1, #1]
		_synth_knob_hlast[i] = adcData[i];
 8001c20:	8855      	ldrh	r5, [r2, #2]
void synth_load_preset(uint8_t preset) {
 8001c22:	b08d      	sub	sp, #52	; 0x34
		_synth_knob_hlast[i] = adcData[i];
 8001c24:	b2ad      	uxth	r5, r5
 8001c26:	805d      	strh	r5, [r3, #2]
		_synth_knob_active[i] = 0;
 8001c28:	708c      	strb	r4, [r1, #2]
		_synth_knob_hlast[i] = adcData[i];
 8001c2a:	8895      	ldrh	r5, [r2, #4]
 8001c2c:	b2ad      	uxth	r5, r5
 8001c2e:	809d      	strh	r5, [r3, #4]
		_synth_knob_active[i] = 0;
 8001c30:	70cc      	strb	r4, [r1, #3]
		_synth_knob_hlast[i] = adcData[i];
 8001c32:	88d5      	ldrh	r5, [r2, #6]
 8001c34:	b2ad      	uxth	r5, r5
 8001c36:	80dd      	strh	r5, [r3, #6]
		_synth_knob_active[i] = 0;
 8001c38:	710c      	strb	r4, [r1, #4]
		_synth_knob_hlast[i] = adcData[i];
 8001c3a:	8915      	ldrh	r5, [r2, #8]
 8001c3c:	b2ad      	uxth	r5, r5
 8001c3e:	811d      	strh	r5, [r3, #8]
		_synth_knob_active[i] = 0;
 8001c40:	714c      	strb	r4, [r1, #5]
		_synth_knob_hlast[i] = adcData[i];
 8001c42:	8955      	ldrh	r5, [r2, #10]
 8001c44:	b2ad      	uxth	r5, r5
 8001c46:	815d      	strh	r5, [r3, #10]
		_synth_knob_active[i] = 0;
 8001c48:	718c      	strb	r4, [r1, #6]
		_synth_knob_hlast[i] = adcData[i];
 8001c4a:	8995      	ldrh	r5, [r2, #12]
 8001c4c:	b2ad      	uxth	r5, r5
 8001c4e:	819d      	strh	r5, [r3, #12]
		_synth_knob_active[i] = 0;
 8001c50:	71cc      	strb	r4, [r1, #7]
		_synth_knob_hlast[i] = adcData[i];
 8001c52:	89d5      	ldrh	r5, [r2, #14]
 8001c54:	b2ad      	uxth	r5, r5
 8001c56:	81dd      	strh	r5, [r3, #14]
		_synth_knob_active[i] = 0;
 8001c58:	720c      	strb	r4, [r1, #8]
	}
	uint8_t data[48];
	eeprom_read_buffer(preset * 48, data, 16);
 8001c5a:	2430      	movs	r4, #48	; 0x30
 8001c5c:	4344      	muls	r4, r0
		_synth_knob_hlast[i] = adcData[i];
 8001c5e:	8a12      	ldrh	r2, [r2, #16]
	eeprom_read_buffer(preset * 48, data, 16);
 8001c60:	b2e4      	uxtb	r4, r4
		_synth_knob_hlast[i] = adcData[i];
 8001c62:	b292      	uxth	r2, r2
 8001c64:	821a      	strh	r2, [r3, #16]
	eeprom_read_buffer(preset * 48, data, 16);
 8001c66:	4669      	mov	r1, sp
 8001c68:	2210      	movs	r2, #16
 8001c6a:	0020      	movs	r0, r4
 8001c6c:	f7fe feda 	bl	8000a24 <eeprom_read_buffer>
	eeprom_read_buffer(preset * 48+16, data+16, 16);
 8001c70:	0020      	movs	r0, r4
 8001c72:	3010      	adds	r0, #16
 8001c74:	a904      	add	r1, sp, #16
 8001c76:	2210      	movs	r2, #16
 8001c78:	b2c0      	uxtb	r0, r0
 8001c7a:	f7fe fed3 	bl	8000a24 <eeprom_read_buffer>
	eeprom_read_buffer(preset * 48+32, data+32, 16);
 8001c7e:	0020      	movs	r0, r4
 8001c80:	3020      	adds	r0, #32
 8001c82:	a908      	add	r1, sp, #32
 8001c84:	2210      	movs	r2, #16
 8001c86:	b2c0      	uxtb	r0, r0
 8001c88:	f7fe fecc 	bl	8000a24 <eeprom_read_buffer>

	_synth_knob[ADC_FINE_PITCH] = 	*(uint16_t*)(&data[0]);
 8001c8c:	466b      	mov	r3, sp
 8001c8e:	4c33      	ldr	r4, [pc, #204]	; (8001d5c <synth_load_preset+0x150>)
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	8123      	strh	r3, [r4, #8]
	_synth_knob[ADC_COAR_PITCH] = 	*(uint16_t*)(&data[2]);
 8001c94:	466b      	mov	r3, sp
 8001c96:	885b      	ldrh	r3, [r3, #2]
 8001c98:	80a3      	strh	r3, [r4, #4]
	_synth_knob[ADC_UNI] 		= 	*(uint16_t*)(&data[4]);
 8001c9a:	466b      	mov	r3, sp
 8001c9c:	889b      	ldrh	r3, [r3, #4]
 8001c9e:	80e3      	strh	r3, [r4, #6]
	_synth_knob[ADC_WF] 		= 	*(uint16_t*)(&data[6]);
 8001ca0:	466b      	mov	r3, sp
 8001ca2:	88db      	ldrh	r3, [r3, #6]
 8001ca4:	81e3      	strh	r3, [r4, #14]
	_synth_knob[ADC_SCALE] 		= 	*(uint16_t*)(&data[8]);
 8001ca6:	466b      	mov	r3, sp
 8001ca8:	891b      	ldrh	r3, [r3, #8]
 8001caa:	8223      	strh	r3, [r4, #16]
	_synth_knob[ADC_SPREAD] 	= 	*(uint16_t*)(&data[10]);
 8001cac:	466b      	mov	r3, sp
 8001cae:	895b      	ldrh	r3, [r3, #10]
 8001cb0:	8023      	strh	r3, [r4, #0]

	lfo_panic();
 8001cb2:	f7ff fa95 	bl	80011e0 <lfo_panic>
	for(uint8_t i = 0; i < 6; i++) {
		_lfo_wf[i] = *(uint16_t*)(&data[12+i*4]);
 8001cb6:	466b      	mov	r3, sp
 8001cb8:	4a29      	ldr	r2, [pc, #164]	; (8001d60 <synth_load_preset+0x154>)
 8001cba:	899b      	ldrh	r3, [r3, #12]
 8001cbc:	8013      	strh	r3, [r2, #0]
		_lfo_rate[i] = *(uint16_t*)(&data[12+i*4+2]);
 8001cbe:	466b      	mov	r3, sp
 8001cc0:	89d9      	ldrh	r1, [r3, #14]
 8001cc2:	4b28      	ldr	r3, [pc, #160]	; (8001d64 <synth_load_preset+0x158>)
 8001cc4:	8019      	strh	r1, [r3, #0]
		_lfo_wf[i] = *(uint16_t*)(&data[12+i*4]);
 8001cc6:	4669      	mov	r1, sp
 8001cc8:	8a09      	ldrh	r1, [r1, #16]
 8001cca:	8051      	strh	r1, [r2, #2]
		_lfo_rate[i] = *(uint16_t*)(&data[12+i*4+2]);
 8001ccc:	4669      	mov	r1, sp
 8001cce:	8a49      	ldrh	r1, [r1, #18]
 8001cd0:	8059      	strh	r1, [r3, #2]
		_lfo_wf[i] = *(uint16_t*)(&data[12+i*4]);
 8001cd2:	4669      	mov	r1, sp
 8001cd4:	8a89      	ldrh	r1, [r1, #20]
 8001cd6:	8091      	strh	r1, [r2, #4]
		_lfo_rate[i] = *(uint16_t*)(&data[12+i*4+2]);
 8001cd8:	4669      	mov	r1, sp
 8001cda:	8ac9      	ldrh	r1, [r1, #22]
 8001cdc:	8099      	strh	r1, [r3, #4]
		_lfo_wf[i] = *(uint16_t*)(&data[12+i*4]);
 8001cde:	4669      	mov	r1, sp
 8001ce0:	8b09      	ldrh	r1, [r1, #24]
 8001ce2:	80d1      	strh	r1, [r2, #6]
		_lfo_rate[i] = *(uint16_t*)(&data[12+i*4+2]);
 8001ce4:	4669      	mov	r1, sp
 8001ce6:	8b49      	ldrh	r1, [r1, #26]
 8001ce8:	80d9      	strh	r1, [r3, #6]
		_lfo_wf[i] = *(uint16_t*)(&data[12+i*4]);
 8001cea:	4669      	mov	r1, sp
 8001cec:	8b89      	ldrh	r1, [r1, #28]
 8001cee:	8111      	strh	r1, [r2, #8]
		_lfo_rate[i] = *(uint16_t*)(&data[12+i*4+2]);
 8001cf0:	4669      	mov	r1, sp
 8001cf2:	8bc9      	ldrh	r1, [r1, #30]
 8001cf4:	8119      	strh	r1, [r3, #8]
		_lfo_wf[i] = *(uint16_t*)(&data[12+i*4]);
 8001cf6:	4669      	mov	r1, sp
 8001cf8:	8c09      	ldrh	r1, [r1, #32]
 8001cfa:	8151      	strh	r1, [r2, #10]
		_lfo_rate[i] = *(uint16_t*)(&data[12+i*4+2]);
 8001cfc:	466a      	mov	r2, sp
 8001cfe:	8c52      	ldrh	r2, [r2, #34]	; 0x22
	_synth_midisync = data[37];



	uint16_t spread_r = _synth_knob[ADC_SPREAD];
	uint16_t spread_v = spread_r / OSC_SPREAD_DIV;
 8001d00:	4919      	ldr	r1, [pc, #100]	; (8001d68 <synth_load_preset+0x15c>)
		_lfo_rate[i] = *(uint16_t*)(&data[12+i*4+2]);
 8001d02:	815a      	strh	r2, [r3, #10]
	_synth_drone = data[36];
 8001d04:	2324      	movs	r3, #36	; 0x24
 8001d06:	466a      	mov	r2, sp
 8001d08:	5cd2      	ldrb	r2, [r2, r3]
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <synth_load_preset+0x160>)
 8001d0c:	701a      	strb	r2, [r3, #0]
	_synth_midisync = data[37];
 8001d0e:	2325      	movs	r3, #37	; 0x25
 8001d10:	466a      	mov	r2, sp
 8001d12:	5cd2      	ldrb	r2, [r2, r3]
 8001d14:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <synth_load_preset+0x164>)
 8001d16:	701a      	strb	r2, [r3, #0]
	uint16_t spread_r = _synth_knob[ADC_SPREAD];
 8001d18:	8820      	ldrh	r0, [r4, #0]
 8001d1a:	b280      	uxth	r0, r0
	uint16_t spread_v = spread_r / OSC_SPREAD_DIV;
 8001d1c:	f7fe f9f4 	bl	8000108 <__udivsi3>
	_synth_spread_raw = spread_v * OSC_SPREAD_DIV + OSC_SPREAD_HDIV;
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <synth_load_preset+0x15c>)
	uint16_t spread_v = spread_r / OSC_SPREAD_DIV;
 8001d22:	b280      	uxth	r0, r0
	_synth_spread_raw = spread_v * OSC_SPREAD_DIV + OSC_SPREAD_HDIV;
 8001d24:	4343      	muls	r3, r0
 8001d26:	3356      	adds	r3, #86	; 0x56
 8001d28:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <synth_load_preset+0x168>)
 8001d2a:	33ff      	adds	r3, #255	; 0xff
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	8013      	strh	r3, [r2, #0]
	_synth_spread_prev = spread_v;
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <synth_load_preset+0x16c>)
 8001d32:	b2c0      	uxtb	r0, r0
 8001d34:	7018      	strb	r0, [r3, #0]

	uint16_t scale_r = _synth_knob[ADC_SCALE];
 8001d36:	8a23      	ldrh	r3, [r4, #16]
	uint16_t scale_v = scale_r / OSC_SCALE_DIV;
	_synth_scale_raw = scale_v * OSC_SCALE_DIV + OSC_SCALE_HDIV;
 8001d38:	4910      	ldr	r1, [pc, #64]	; (8001d7c <synth_load_preset+0x170>)
 8001d3a:	0a5b      	lsrs	r3, r3, #9
 8001d3c:	025a      	lsls	r2, r3, #9
 8001d3e:	3201      	adds	r2, #1
 8001d40:	32ff      	adds	r2, #255	; 0xff
 8001d42:	b292      	uxth	r2, r2
 8001d44:	800a      	strh	r2, [r1, #0]
	_synth_scale_prev = scale_v;
 8001d46:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <synth_load_preset+0x174>)
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	7013      	strb	r3, [r2, #0]
}
 8001d4c:	b00d      	add	sp, #52	; 0x34
 8001d4e:	bd30      	pop	{r4, r5, pc}
 8001d50:	2000017c 	.word	0x2000017c
 8001d54:	200001ac 	.word	0x200001ac
 8001d58:	20000188 	.word	0x20000188
 8001d5c:	20000168 	.word	0x20000168
 8001d60:	2000001c 	.word	0x2000001c
 8001d64:	20000010 	.word	0x20000010
 8001d68:	000002ab 	.word	0x000002ab
 8001d6c:	2000002a 	.word	0x2000002a
 8001d70:	2000019a 	.word	0x2000019a
 8001d74:	2000030e 	.word	0x2000030e
 8001d78:	2000002f 	.word	0x2000002f
 8001d7c:	20000304 	.word	0x20000304
 8001d80:	2000002e 	.word	0x2000002e

08001d84 <synth_save_preset>:

void synth_save_preset(uint8_t preset) {
 8001d84:	b510      	push	{r4, lr}
 8001d86:	b08c      	sub	sp, #48	; 0x30
	uint8_t data[48];

	*(uint16_t*)(&data[0]) = _synth_knob[ADC_FINE_PITCH];
 8001d88:	4669      	mov	r1, sp
	*(uint16_t*)(&data[8]) = _synth_knob[ADC_SCALE];
	*(uint16_t*)(&data[10]) = _synth_knob[ADC_SPREAD];

	for(uint8_t i = 0; i < 6; i++) {
		*(uint16_t*)(&data[12+i*4]) = _lfo_wf[i];
		*(uint16_t*)(&data[12+i*4+2]) = _lfo_rate[i];
 8001d8a:	466c      	mov	r4, sp
	*(uint16_t*)(&data[0]) = _synth_knob[ADC_FINE_PITCH];
 8001d8c:	4b27      	ldr	r3, [pc, #156]	; (8001e2c <synth_save_preset+0xa8>)
 8001d8e:	891a      	ldrh	r2, [r3, #8]
 8001d90:	800a      	strh	r2, [r1, #0]
	*(uint16_t*)(&data[2]) = _synth_knob[ADC_COAR_PITCH];
 8001d92:	889a      	ldrh	r2, [r3, #4]
 8001d94:	804a      	strh	r2, [r1, #2]
	*(uint16_t*)(&data[4]) = _synth_knob[ADC_UNI];
 8001d96:	88da      	ldrh	r2, [r3, #6]
 8001d98:	808a      	strh	r2, [r1, #4]
	*(uint16_t*)(&data[6]) = _synth_knob[ADC_WF];
 8001d9a:	89da      	ldrh	r2, [r3, #14]
 8001d9c:	80ca      	strh	r2, [r1, #6]
	*(uint16_t*)(&data[8]) = _synth_knob[ADC_SCALE];
 8001d9e:	8a1a      	ldrh	r2, [r3, #16]
	*(uint16_t*)(&data[10]) = _synth_knob[ADC_SPREAD];
 8001da0:	881b      	ldrh	r3, [r3, #0]
	*(uint16_t*)(&data[8]) = _synth_knob[ADC_SCALE];
 8001da2:	810a      	strh	r2, [r1, #8]
		*(uint16_t*)(&data[12+i*4]) = _lfo_wf[i];
 8001da4:	4a22      	ldr	r2, [pc, #136]	; (8001e30 <synth_save_preset+0xac>)
	*(uint16_t*)(&data[10]) = _synth_knob[ADC_SPREAD];
 8001da6:	814b      	strh	r3, [r1, #10]
		*(uint16_t*)(&data[12+i*4]) = _lfo_wf[i];
 8001da8:	8813      	ldrh	r3, [r2, #0]
 8001daa:	818b      	strh	r3, [r1, #12]
		*(uint16_t*)(&data[12+i*4+2]) = _lfo_rate[i];
 8001dac:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <synth_save_preset+0xb0>)
 8001dae:	8819      	ldrh	r1, [r3, #0]
 8001db0:	81e1      	strh	r1, [r4, #14]
		*(uint16_t*)(&data[12+i*4]) = _lfo_wf[i];
 8001db2:	8851      	ldrh	r1, [r2, #2]
 8001db4:	8221      	strh	r1, [r4, #16]
		*(uint16_t*)(&data[12+i*4+2]) = _lfo_rate[i];
 8001db6:	8859      	ldrh	r1, [r3, #2]
 8001db8:	8261      	strh	r1, [r4, #18]
		*(uint16_t*)(&data[12+i*4]) = _lfo_wf[i];
 8001dba:	8891      	ldrh	r1, [r2, #4]
 8001dbc:	82a1      	strh	r1, [r4, #20]
		*(uint16_t*)(&data[12+i*4+2]) = _lfo_rate[i];
 8001dbe:	8899      	ldrh	r1, [r3, #4]
 8001dc0:	82e1      	strh	r1, [r4, #22]
		*(uint16_t*)(&data[12+i*4]) = _lfo_wf[i];
 8001dc2:	88d1      	ldrh	r1, [r2, #6]
 8001dc4:	8321      	strh	r1, [r4, #24]
		*(uint16_t*)(&data[12+i*4+2]) = _lfo_rate[i];
 8001dc6:	88d9      	ldrh	r1, [r3, #6]
 8001dc8:	8361      	strh	r1, [r4, #26]
		*(uint16_t*)(&data[12+i*4]) = _lfo_wf[i];
 8001dca:	8911      	ldrh	r1, [r2, #8]
 8001dcc:	83a1      	strh	r1, [r4, #28]
		*(uint16_t*)(&data[12+i*4+2]) = _lfo_rate[i];
 8001dce:	8919      	ldrh	r1, [r3, #8]
 8001dd0:	83e1      	strh	r1, [r4, #30]
		*(uint16_t*)(&data[12+i*4]) = _lfo_wf[i];
 8001dd2:	8952      	ldrh	r2, [r2, #10]
 8001dd4:	4669      	mov	r1, sp
 8001dd6:	8422      	strh	r2, [r4, #32]
		*(uint16_t*)(&data[12+i*4+2]) = _lfo_rate[i];
 8001dd8:	895b      	ldrh	r3, [r3, #10]
 8001dda:	8463      	strh	r3, [r4, #34]	; 0x22
	}

	data[36] = _synth_drone;
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <synth_save_preset+0xb4>)
 8001dde:	781a      	ldrb	r2, [r3, #0]
 8001de0:	2324      	movs	r3, #36	; 0x24
 8001de2:	54e2      	strb	r2, [r4, r3]
	data[37] = _synth_midisync;
 8001de4:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <synth_save_preset+0xb8>)
 8001de6:	781a      	ldrb	r2, [r3, #0]
 8001de8:	2325      	movs	r3, #37	; 0x25
 8001dea:	54e2      	strb	r2, [r4, r3]

	eeprom_write_buffer(preset * 48, data, 16);
 8001dec:	2430      	movs	r4, #48	; 0x30
 8001dee:	4344      	muls	r4, r0
 8001df0:	b2e4      	uxtb	r4, r4
 8001df2:	2210      	movs	r2, #16
 8001df4:	0020      	movs	r0, r4
 8001df6:	f7fe fde3 	bl	80009c0 <eeprom_write_buffer>
	_delayMs(30); // TODO: Fix the eeprom_wait function!
 8001dfa:	201e      	movs	r0, #30
 8001dfc:	f7fe fd8a 	bl	8000914 <_delayMs>
	eeprom_write_buffer(preset * 48+16, data + 16, 16);
 8001e00:	0020      	movs	r0, r4
 8001e02:	3010      	adds	r0, #16
 8001e04:	a904      	add	r1, sp, #16
 8001e06:	2210      	movs	r2, #16
 8001e08:	b2c0      	uxtb	r0, r0
 8001e0a:	f7fe fdd9 	bl	80009c0 <eeprom_write_buffer>
	_delayMs(30);
 8001e0e:	201e      	movs	r0, #30
 8001e10:	f7fe fd80 	bl	8000914 <_delayMs>
	eeprom_write_buffer(preset * 48+32, data + 32, 16);
 8001e14:	0020      	movs	r0, r4
 8001e16:	3020      	adds	r0, #32
 8001e18:	2210      	movs	r2, #16
 8001e1a:	a908      	add	r1, sp, #32
 8001e1c:	b2c0      	uxtb	r0, r0
 8001e1e:	f7fe fdcf 	bl	80009c0 <eeprom_write_buffer>
	_delayMs(30);
 8001e22:	201e      	movs	r0, #30
 8001e24:	f7fe fd76 	bl	8000914 <_delayMs>
}
 8001e28:	b00c      	add	sp, #48	; 0x30
 8001e2a:	bd10      	pop	{r4, pc}
 8001e2c:	20000168 	.word	0x20000168
 8001e30:	2000001c 	.word	0x2000001c
 8001e34:	20000010 	.word	0x20000010
 8001e38:	2000002a 	.word	0x2000002a
 8001e3c:	2000019a 	.word	0x2000019a

08001e40 <synth_set_pb>:

void synth_set_pb(uint16_t pb) {
	_synth_pb = pb;
 8001e40:	4b01      	ldr	r3, [pc, #4]	; (8001e48 <synth_set_pb+0x8>)
 8001e42:	8018      	strh	r0, [r3, #0]
}
 8001e44:	4770      	bx	lr
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	2000002c 	.word	0x2000002c

08001e4c <synth_set_mod>:
void synth_set_mod(uint8_t mod) {
	_synth_mod = mod;
 8001e4c:	4b01      	ldr	r3, [pc, #4]	; (8001e54 <synth_set_mod+0x8>)
 8001e4e:	7018      	strb	r0, [r3, #0]
}
 8001e50:	4770      	bx	lr
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	2000019b 	.word	0x2000019b

08001e58 <synth_set_cc>:

void synth_set_cc(uint8_t id, uint8_t cc) {
	_synth_cc[id] = cc;
 8001e58:	4b01      	ldr	r3, [pc, #4]	; (8001e60 <synth_set_cc+0x8>)
 8001e5a:	5419      	strb	r1, [r3, r0]
}
 8001e5c:	4770      	bx	lr
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	20000308 	.word	0x20000308

08001e64 <synth_reset_midi>:

void synth_reset_midi() {
	_synth_pb = 8192;
 8001e64:	2280      	movs	r2, #128	; 0x80
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <synth_reset_midi+0x24>)
 8001e68:	0192      	lsls	r2, r2, #6
 8001e6a:	801a      	strh	r2, [r3, #0]
	_synth_mod = 0;
 8001e6c:	2300      	movs	r3, #0
	_synth_last_midi = 0xFF;
 8001e6e:	21ff      	movs	r1, #255	; 0xff
	_synth_mod = 0;
 8001e70:	4a06      	ldr	r2, [pc, #24]	; (8001e8c <synth_reset_midi+0x28>)
 8001e72:	7013      	strb	r3, [r2, #0]
	_synth_last_midi = 0xFF;
 8001e74:	4a06      	ldr	r2, [pc, #24]	; (8001e90 <synth_reset_midi+0x2c>)
 8001e76:	7011      	strb	r1, [r2, #0]
	for(uint8_t i = 0; i < 5; i++) {
		_synth_cc[i] = 0;
 8001e78:	4a06      	ldr	r2, [pc, #24]	; (8001e94 <synth_reset_midi+0x30>)
 8001e7a:	7013      	strb	r3, [r2, #0]
 8001e7c:	7053      	strb	r3, [r2, #1]
 8001e7e:	7093      	strb	r3, [r2, #2]
 8001e80:	70d3      	strb	r3, [r2, #3]
 8001e82:	7113      	strb	r3, [r2, #4]
	}
}
 8001e84:	4770      	bx	lr
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	2000002c 	.word	0x2000002c
 8001e8c:	2000019b 	.word	0x2000019b
 8001e90:	2000002b 	.word	0x2000002b
 8001e94:	20000308 	.word	0x20000308

08001e98 <synth_update>:

void synth_update() {
	for(uint8_t i = 0; i < 9; i++) {
		int16_t h = adcData[i] - _synth_knob_hlast[i];
 8001e98:	4b73      	ldr	r3, [pc, #460]	; (8002068 <synth_update+0x1d0>)
 8001e9a:	4974      	ldr	r1, [pc, #464]	; (800206c <synth_update+0x1d4>)
 8001e9c:	881a      	ldrh	r2, [r3, #0]
 8001e9e:	8808      	ldrh	r0, [r1, #0]
		if (h > SYNTH_POT_HYST || h < -SYNTH_POT_HYST) {_synth_knob_active[i] = 1;}
 8001ea0:	3296      	adds	r2, #150	; 0x96
 8001ea2:	1a12      	subs	r2, r2, r0
 8001ea4:	2096      	movs	r0, #150	; 0x96
 8001ea6:	b292      	uxth	r2, r2
void synth_update() {
 8001ea8:	b570      	push	{r4, r5, r6, lr}
		if (h > SYNTH_POT_HYST || h < -SYNTH_POT_HYST) {_synth_knob_active[i] = 1;}
 8001eaa:	0040      	lsls	r0, r0, #1
 8001eac:	4282      	cmp	r2, r0
 8001eae:	d900      	bls.n	8001eb2 <synth_update+0x1a>
 8001eb0:	e0d6      	b.n	8002060 <synth_update+0x1c8>
 8001eb2:	4a6f      	ldr	r2, [pc, #444]	; (8002070 <synth_update+0x1d8>)
		if(_synth_knob_active[i]) {_synth_knob[i] = adcData[i];}
 8001eb4:	7810      	ldrb	r0, [r2, #0]
 8001eb6:	2800      	cmp	r0, #0
 8001eb8:	d000      	beq.n	8001ebc <synth_update+0x24>
 8001eba:	e0cc      	b.n	8002056 <synth_update+0x1be>
 8001ebc:	4c6d      	ldr	r4, [pc, #436]	; (8002074 <synth_update+0x1dc>)
		int16_t h = adcData[i] - _synth_knob_hlast[i];
 8001ebe:	8858      	ldrh	r0, [r3, #2]
 8001ec0:	884d      	ldrh	r5, [r1, #2]
		if (h > SYNTH_POT_HYST || h < -SYNTH_POT_HYST) {_synth_knob_active[i] = 1;}
 8001ec2:	3096      	adds	r0, #150	; 0x96
 8001ec4:	1b40      	subs	r0, r0, r5
 8001ec6:	2596      	movs	r5, #150	; 0x96
 8001ec8:	b280      	uxth	r0, r0
 8001eca:	006d      	lsls	r5, r5, #1
 8001ecc:	42a8      	cmp	r0, r5
 8001ece:	d901      	bls.n	8001ed4 <synth_update+0x3c>
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	7050      	strb	r0, [r2, #1]
		if(_synth_knob_active[i]) {_synth_knob[i] = adcData[i];}
 8001ed4:	7850      	ldrb	r0, [r2, #1]
 8001ed6:	2800      	cmp	r0, #0
 8001ed8:	d002      	beq.n	8001ee0 <synth_update+0x48>
 8001eda:	8858      	ldrh	r0, [r3, #2]
 8001edc:	b280      	uxth	r0, r0
 8001ede:	8060      	strh	r0, [r4, #2]
		int16_t h = adcData[i] - _synth_knob_hlast[i];
 8001ee0:	8898      	ldrh	r0, [r3, #4]
 8001ee2:	888d      	ldrh	r5, [r1, #4]
		if (h > SYNTH_POT_HYST || h < -SYNTH_POT_HYST) {_synth_knob_active[i] = 1;}
 8001ee4:	3096      	adds	r0, #150	; 0x96
 8001ee6:	1b40      	subs	r0, r0, r5
 8001ee8:	2596      	movs	r5, #150	; 0x96
 8001eea:	b280      	uxth	r0, r0
 8001eec:	006d      	lsls	r5, r5, #1
 8001eee:	42a8      	cmp	r0, r5
 8001ef0:	d901      	bls.n	8001ef6 <synth_update+0x5e>
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	7090      	strb	r0, [r2, #2]
		if(_synth_knob_active[i]) {_synth_knob[i] = adcData[i];}
 8001ef6:	7890      	ldrb	r0, [r2, #2]
 8001ef8:	2800      	cmp	r0, #0
 8001efa:	d002      	beq.n	8001f02 <synth_update+0x6a>
 8001efc:	8898      	ldrh	r0, [r3, #4]
 8001efe:	b280      	uxth	r0, r0
 8001f00:	80a0      	strh	r0, [r4, #4]
		int16_t h = adcData[i] - _synth_knob_hlast[i];
 8001f02:	88d8      	ldrh	r0, [r3, #6]
 8001f04:	88cd      	ldrh	r5, [r1, #6]
		if (h > SYNTH_POT_HYST || h < -SYNTH_POT_HYST) {_synth_knob_active[i] = 1;}
 8001f06:	3096      	adds	r0, #150	; 0x96
 8001f08:	1b40      	subs	r0, r0, r5
 8001f0a:	2596      	movs	r5, #150	; 0x96
 8001f0c:	b280      	uxth	r0, r0
 8001f0e:	006d      	lsls	r5, r5, #1
 8001f10:	42a8      	cmp	r0, r5
 8001f12:	d901      	bls.n	8001f18 <synth_update+0x80>
 8001f14:	2001      	movs	r0, #1
 8001f16:	70d0      	strb	r0, [r2, #3]
		if(_synth_knob_active[i]) {_synth_knob[i] = adcData[i];}
 8001f18:	78d0      	ldrb	r0, [r2, #3]
 8001f1a:	2800      	cmp	r0, #0
 8001f1c:	d002      	beq.n	8001f24 <synth_update+0x8c>
 8001f1e:	88d8      	ldrh	r0, [r3, #6]
 8001f20:	b280      	uxth	r0, r0
 8001f22:	80e0      	strh	r0, [r4, #6]
		int16_t h = adcData[i] - _synth_knob_hlast[i];
 8001f24:	8918      	ldrh	r0, [r3, #8]
 8001f26:	890d      	ldrh	r5, [r1, #8]
		if (h > SYNTH_POT_HYST || h < -SYNTH_POT_HYST) {_synth_knob_active[i] = 1;}
 8001f28:	3096      	adds	r0, #150	; 0x96
 8001f2a:	1b40      	subs	r0, r0, r5
 8001f2c:	2596      	movs	r5, #150	; 0x96
 8001f2e:	b280      	uxth	r0, r0
 8001f30:	006d      	lsls	r5, r5, #1
 8001f32:	42a8      	cmp	r0, r5
 8001f34:	d901      	bls.n	8001f3a <synth_update+0xa2>
 8001f36:	2001      	movs	r0, #1
 8001f38:	7110      	strb	r0, [r2, #4]
		if(_synth_knob_active[i]) {_synth_knob[i] = adcData[i];}
 8001f3a:	7910      	ldrb	r0, [r2, #4]
 8001f3c:	2800      	cmp	r0, #0
 8001f3e:	d002      	beq.n	8001f46 <synth_update+0xae>
 8001f40:	8918      	ldrh	r0, [r3, #8]
 8001f42:	b280      	uxth	r0, r0
 8001f44:	8120      	strh	r0, [r4, #8]
		int16_t h = adcData[i] - _synth_knob_hlast[i];
 8001f46:	8958      	ldrh	r0, [r3, #10]
 8001f48:	894d      	ldrh	r5, [r1, #10]
		if (h > SYNTH_POT_HYST || h < -SYNTH_POT_HYST) {_synth_knob_active[i] = 1;}
 8001f4a:	3096      	adds	r0, #150	; 0x96
 8001f4c:	1b40      	subs	r0, r0, r5
 8001f4e:	2596      	movs	r5, #150	; 0x96
 8001f50:	b280      	uxth	r0, r0
 8001f52:	006d      	lsls	r5, r5, #1
 8001f54:	42a8      	cmp	r0, r5
 8001f56:	d901      	bls.n	8001f5c <synth_update+0xc4>
 8001f58:	2001      	movs	r0, #1
 8001f5a:	7150      	strb	r0, [r2, #5]
		if(_synth_knob_active[i]) {_synth_knob[i] = adcData[i];}
 8001f5c:	7950      	ldrb	r0, [r2, #5]
 8001f5e:	2800      	cmp	r0, #0
 8001f60:	d002      	beq.n	8001f68 <synth_update+0xd0>
 8001f62:	8958      	ldrh	r0, [r3, #10]
 8001f64:	b280      	uxth	r0, r0
 8001f66:	8160      	strh	r0, [r4, #10]
		int16_t h = adcData[i] - _synth_knob_hlast[i];
 8001f68:	8998      	ldrh	r0, [r3, #12]
 8001f6a:	898d      	ldrh	r5, [r1, #12]
		if (h > SYNTH_POT_HYST || h < -SYNTH_POT_HYST) {_synth_knob_active[i] = 1;}
 8001f6c:	3096      	adds	r0, #150	; 0x96
 8001f6e:	1b40      	subs	r0, r0, r5
 8001f70:	2596      	movs	r5, #150	; 0x96
 8001f72:	b280      	uxth	r0, r0
 8001f74:	006d      	lsls	r5, r5, #1
 8001f76:	42a8      	cmp	r0, r5
 8001f78:	d901      	bls.n	8001f7e <synth_update+0xe6>
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	7190      	strb	r0, [r2, #6]
		if(_synth_knob_active[i]) {_synth_knob[i] = adcData[i];}
 8001f7e:	7990      	ldrb	r0, [r2, #6]
 8001f80:	2800      	cmp	r0, #0
 8001f82:	d002      	beq.n	8001f8a <synth_update+0xf2>
 8001f84:	8998      	ldrh	r0, [r3, #12]
 8001f86:	b280      	uxth	r0, r0
 8001f88:	81a0      	strh	r0, [r4, #12]
		int16_t h = adcData[i] - _synth_knob_hlast[i];
 8001f8a:	89d8      	ldrh	r0, [r3, #14]
 8001f8c:	89cd      	ldrh	r5, [r1, #14]
		if (h > SYNTH_POT_HYST || h < -SYNTH_POT_HYST) {_synth_knob_active[i] = 1;}
 8001f8e:	3096      	adds	r0, #150	; 0x96
 8001f90:	1b40      	subs	r0, r0, r5
 8001f92:	2596      	movs	r5, #150	; 0x96
 8001f94:	b280      	uxth	r0, r0
 8001f96:	006d      	lsls	r5, r5, #1
 8001f98:	42a8      	cmp	r0, r5
 8001f9a:	d901      	bls.n	8001fa0 <synth_update+0x108>
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	71d0      	strb	r0, [r2, #7]
		if(_synth_knob_active[i]) {_synth_knob[i] = adcData[i];}
 8001fa0:	79d0      	ldrb	r0, [r2, #7]
 8001fa2:	2800      	cmp	r0, #0
 8001fa4:	d002      	beq.n	8001fac <synth_update+0x114>
 8001fa6:	89d8      	ldrh	r0, [r3, #14]
 8001fa8:	b280      	uxth	r0, r0
 8001faa:	81e0      	strh	r0, [r4, #14]
		int16_t h = adcData[i] - _synth_knob_hlast[i];
 8001fac:	8a18      	ldrh	r0, [r3, #16]
 8001fae:	8a0d      	ldrh	r5, [r1, #16]
		if (h > SYNTH_POT_HYST || h < -SYNTH_POT_HYST) {_synth_knob_active[i] = 1;}
 8001fb0:	3096      	adds	r0, #150	; 0x96
 8001fb2:	1b41      	subs	r1, r0, r5
 8001fb4:	2096      	movs	r0, #150	; 0x96
 8001fb6:	b289      	uxth	r1, r1
 8001fb8:	0040      	lsls	r0, r0, #1
 8001fba:	4281      	cmp	r1, r0
 8001fbc:	d901      	bls.n	8001fc2 <synth_update+0x12a>
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	7211      	strb	r1, [r2, #8]
		if(_synth_knob_active[i]) {_synth_knob[i] = adcData[i];}
 8001fc2:	7a12      	ldrb	r2, [r2, #8]
 8001fc4:	2a00      	cmp	r2, #0
 8001fc6:	d002      	beq.n	8001fce <synth_update+0x136>
 8001fc8:	8a1b      	ldrh	r3, [r3, #16]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	8223      	strh	r3, [r4, #16]
	}

	uint16_t spread_r = _synth_knob[ADC_SPREAD];
 8001fce:	8826      	ldrh	r6, [r4, #0]
	uint16_t spread_v = spread_r / OSC_SPREAD_DIV;
 8001fd0:	4929      	ldr	r1, [pc, #164]	; (8002078 <synth_update+0x1e0>)
	uint16_t spread_r = _synth_knob[ADC_SPREAD];
 8001fd2:	b2b6      	uxth	r6, r6
	uint16_t spread_v = spread_r / OSC_SPREAD_DIV;
 8001fd4:	0030      	movs	r0, r6
 8001fd6:	f7fe f897 	bl	8000108 <__udivsi3>
	uint16_t spread_h = spread_r % OSC_SPREAD_DIV;
 8001fda:	4927      	ldr	r1, [pc, #156]	; (8002078 <synth_update+0x1e0>)
	uint16_t spread_v = spread_r / OSC_SPREAD_DIV;
 8001fdc:	b285      	uxth	r5, r0
	uint16_t spread_h = spread_r % OSC_SPREAD_DIV;
 8001fde:	0030      	movs	r0, r6
 8001fe0:	f7fe f918 	bl	8000214 <__aeabi_uidivmod>

	if(((spread_h > OSC_SPREAD_HYST) && (spread_h < OSC_SPREAD_DIV - OSC_SPREAD_HYST) && _synth_spread_prev != spread_v ) || (first_time == 1)) {
 8001fe4:	238d      	movs	r3, #141	; 0x8d
 8001fe6:	39c9      	subs	r1, #201	; 0xc9
 8001fe8:	b289      	uxth	r1, r1
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4299      	cmp	r1, r3
 8001fee:	d227      	bcs.n	8002040 <synth_update+0x1a8>
 8001ff0:	4a22      	ldr	r2, [pc, #136]	; (800207c <synth_update+0x1e4>)
 8001ff2:	7813      	ldrb	r3, [r2, #0]
 8001ff4:	42ab      	cmp	r3, r5
 8001ff6:	d023      	beq.n	8002040 <synth_update+0x1a8>
 8001ff8:	4921      	ldr	r1, [pc, #132]	; (8002080 <synth_update+0x1e8>)
		_synth_spread_raw = spread_v * OSC_SPREAD_DIV + OSC_SPREAD_HDIV;
 8001ffa:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <synth_update+0x1e0>)
 8001ffc:	4821      	ldr	r0, [pc, #132]	; (8002084 <synth_update+0x1ec>)
 8001ffe:	436b      	muls	r3, r5
 8002000:	3356      	adds	r3, #86	; 0x56
 8002002:	33ff      	adds	r3, #255	; 0xff
 8002004:	b29b      	uxth	r3, r3
		_synth_spread_prev = spread_v;
 8002006:	b2ed      	uxtb	r5, r5
		_synth_spread_raw = spread_v * OSC_SPREAD_DIV + OSC_SPREAD_HDIV;
 8002008:	8003      	strh	r3, [r0, #0]
		_synth_spread_prev = spread_v;
 800200a:	7015      	strb	r5, [r2, #0]
	}

	uint16_t scale_r = _synth_knob[ADC_SCALE];
 800200c:	8a23      	ldrh	r3, [r4, #16]
	uint16_t scale_v = scale_r / OSC_SCALE_DIV;
	uint16_t scale_h = scale_r % OSC_SCALE_DIV;

	if(((scale_h > OSC_SCALE_HYST) && (scale_h < OSC_SCALE_DIV - OSC_SCALE_HYST) && _synth_scale_prev != scale_v) || (first_time == 1)) {
 800200e:	249b      	movs	r4, #155	; 0x9b
	uint16_t scale_v = scale_r / OSC_SCALE_DIV;
 8002010:	0a5a      	lsrs	r2, r3, #9
	uint16_t scale_h = scale_r % OSC_SCALE_DIV;
 8002012:	05db      	lsls	r3, r3, #23
 8002014:	0ddb      	lsrs	r3, r3, #23
	if(((scale_h > OSC_SCALE_HYST) && (scale_h < OSC_SCALE_DIV - OSC_SCALE_HYST) && _synth_scale_prev != scale_v) || (first_time == 1)) {
 8002016:	3b65      	subs	r3, #101	; 0x65
 8002018:	b29b      	uxth	r3, r3
	uint16_t scale_v = scale_r / OSC_SCALE_DIV;
 800201a:	0010      	movs	r0, r2
	if(((scale_h > OSC_SCALE_HYST) && (scale_h < OSC_SCALE_DIV - OSC_SCALE_HYST) && _synth_scale_prev != scale_v) || (first_time == 1)) {
 800201c:	0064      	lsls	r4, r4, #1
 800201e:	42a3      	cmp	r3, r4
 8002020:	d814      	bhi.n	800204c <synth_update+0x1b4>
 8002022:	4b19      	ldr	r3, [pc, #100]	; (8002088 <synth_update+0x1f0>)
 8002024:	781c      	ldrb	r4, [r3, #0]
 8002026:	4294      	cmp	r4, r2
 8002028:	d010      	beq.n	800204c <synth_update+0x1b4>
		_synth_scale_raw = scale_v * OSC_SCALE_DIV + OSC_SCALE_HDIV;
 800202a:	0252      	lsls	r2, r2, #9
 800202c:	3201      	adds	r2, #1
 800202e:	4c17      	ldr	r4, [pc, #92]	; (800208c <synth_update+0x1f4>)
 8002030:	32ff      	adds	r2, #255	; 0xff
 8002032:	b292      	uxth	r2, r2
		_synth_scale_prev = scale_v;
 8002034:	b2c0      	uxtb	r0, r0
		_synth_scale_raw = scale_v * OSC_SCALE_DIV + OSC_SCALE_HDIV;
 8002036:	8022      	strh	r2, [r4, #0]
		_synth_scale_prev = scale_v;
 8002038:	7018      	strb	r0, [r3, #0]
	}



	first_time = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	700b      	strb	r3, [r1, #0]
}
 800203e:	bd70      	pop	{r4, r5, r6, pc}
	if(((spread_h > OSC_SPREAD_HYST) && (spread_h < OSC_SPREAD_DIV - OSC_SPREAD_HYST) && _synth_spread_prev != spread_v ) || (first_time == 1)) {
 8002040:	490f      	ldr	r1, [pc, #60]	; (8002080 <synth_update+0x1e8>)
 8002042:	780b      	ldrb	r3, [r1, #0]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d1e1      	bne.n	800200c <synth_update+0x174>
 8002048:	4a0c      	ldr	r2, [pc, #48]	; (800207c <synth_update+0x1e4>)
 800204a:	e7d6      	b.n	8001ffa <synth_update+0x162>
	if(((scale_h > OSC_SCALE_HYST) && (scale_h < OSC_SCALE_DIV - OSC_SCALE_HYST) && _synth_scale_prev != scale_v) || (first_time == 1)) {
 800204c:	780b      	ldrb	r3, [r1, #0]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d1f3      	bne.n	800203a <synth_update+0x1a2>
 8002052:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <synth_update+0x1f0>)
 8002054:	e7e9      	b.n	800202a <synth_update+0x192>
		if(_synth_knob_active[i]) {_synth_knob[i] = adcData[i];}
 8002056:	8818      	ldrh	r0, [r3, #0]
 8002058:	4c06      	ldr	r4, [pc, #24]	; (8002074 <synth_update+0x1dc>)
 800205a:	b280      	uxth	r0, r0
 800205c:	8020      	strh	r0, [r4, #0]
 800205e:	e72e      	b.n	8001ebe <synth_update+0x26>
		if (h > SYNTH_POT_HYST || h < -SYNTH_POT_HYST) {_synth_knob_active[i] = 1;}
 8002060:	2001      	movs	r0, #1
 8002062:	4a03      	ldr	r2, [pc, #12]	; (8002070 <synth_update+0x1d8>)
 8002064:	7010      	strb	r0, [r2, #0]
 8002066:	e725      	b.n	8001eb4 <synth_update+0x1c>
 8002068:	200001ac 	.word	0x200001ac
 800206c:	20000188 	.word	0x20000188
 8002070:	2000017c 	.word	0x2000017c
 8002074:	20000168 	.word	0x20000168
 8002078:	000002ab 	.word	0x000002ab
 800207c:	2000002f 	.word	0x2000002f
 8002080:	20000030 	.word	0x20000030
 8002084:	2000030e 	.word	0x2000030e
 8002088:	2000002e 	.word	0x2000002e
 800208c:	20000304 	.word	0x20000304

08002090 <synth_process>:

void synth_process() {
 8002090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002092:	464e      	mov	r6, r9
 8002094:	4645      	mov	r5, r8
 8002096:	46de      	mov	lr, fp
 8002098:	4657      	mov	r7, sl
 800209a:	b5e0      	push	{r5, r6, r7, lr}


	uint32_t so = 0;

	//Waveform
	int16_t raw_wf = _synth_knob[ADC_WF] + lfoValue[LFO_TGT_WF] + (_synth_mod << 5);
 800209c:	4be2      	ldr	r3, [pc, #904]	; (8002428 <synth_process+0x398>)
 800209e:	4ee3      	ldr	r6, [pc, #908]	; (800242c <synth_process+0x39c>)
 80020a0:	89da      	ldrh	r2, [r3, #14]
 80020a2:	4698      	mov	r8, r3
 80020a4:	4be2      	ldr	r3, [pc, #904]	; (8002430 <synth_process+0x3a0>)
 80020a6:	88f1      	ldrh	r1, [r6, #6]
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	b209      	sxth	r1, r1
 80020ac:	1852      	adds	r2, r2, r1
 80020ae:	015b      	lsls	r3, r3, #5
 80020b0:	18d2      	adds	r2, r2, r3
 80020b2:	2380      	movs	r3, #128	; 0x80
 80020b4:	1c11      	adds	r1, r2, #0
 80020b6:	b212      	sxth	r2, r2
void synth_process() {
 80020b8:	b085      	sub	sp, #20
 80020ba:	015b      	lsls	r3, r3, #5
 80020bc:	429a      	cmp	r2, r3
 80020be:	db01      	blt.n	80020c4 <synth_process+0x34>
 80020c0:	4bdc      	ldr	r3, [pc, #880]	; (8002434 <synth_process+0x3a4>)
 80020c2:	1c19      	adds	r1, r3, #0
	if (raw_wf < 0) {raw_wf = 0;}
	else if (raw_wf > 4095) {raw_wf = 4095;}
	uint16_t wf = 1023;
	wf = 1023-(raw_wf >> 2);
 80020c4:	b20b      	sxth	r3, r1
 80020c6:	43db      	mvns	r3, r3
 80020c8:	17db      	asrs	r3, r3, #31
 80020ca:	400b      	ands	r3, r1
 80020cc:	4ada      	ldr	r2, [pc, #872]	; (8002438 <synth_process+0x3a8>)
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	109b      	asrs	r3, r3, #2
 80020d2:	1ad3      	subs	r3, r2, r3
	wf = wf_lut[wf];
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	4ad9      	ldr	r2, [pc, #868]	; (800243c <synth_process+0x3ac>)
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	5a9f      	ldrh	r7, [r3, r2]
	int16_t coarsePitch = _synth_knob[ADC_COAR_PITCH] + lfoValue[LFO_TGT_COARSE];
	if(coarsePitch < 0) {coarsePitch = 0;}
	if(coarsePitch > 4095) {coarsePitch = 4095;}
	uint8_t coarseIndex = coarsePitch >> 7;
	*/
	if(midi_get_monophonic() != 0xFF) {_synth_last_midi = midi_get_monophonic();}
 80020dc:	f7ff fadc 	bl	8001698 <midi_get_monophonic>
 80020e0:	28ff      	cmp	r0, #255	; 0xff
 80020e2:	d000      	beq.n	80020e6 <synth_process+0x56>
 80020e4:	e2fb      	b.n	80026de <synth_process+0x64e>
 80020e6:	4bd6      	ldr	r3, [pc, #856]	; (8002440 <synth_process+0x3b0>)
	uint32_t basePitch = midi_lut[24];
	if(_synth_last_midi != 0xFF) {basePitch = midi_lut[_synth_last_midi-33];}
 80020e8:	781a      	ldrb	r2, [r3, #0]
 80020ea:	2aff      	cmp	r2, #255	; 0xff
 80020ec:	d100      	bne.n	80020f0 <synth_process+0x60>
 80020ee:	e2fe      	b.n	80026ee <synth_process+0x65e>
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	4ad4      	ldr	r2, [pc, #848]	; (8002444 <synth_process+0x3b4>)
 80020f4:	3b21      	subs	r3, #33	; 0x21
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	5a9c      	ldrh	r4, [r3, r2]

	//uint32_t basePitch = coarse_lut[coarseIndex];

	//Fine pitch
	int32_t finePitch = _synth_knob[ADC_FINE_PITCH] + lfoValue[LFO_TGT_FINE] + (_synth_cc[SYNTH_CC_FINE] << 5);
 80020fa:	4643      	mov	r3, r8
 80020fc:	4ad2      	ldr	r2, [pc, #840]	; (8002448 <synth_process+0x3b8>)
 80020fe:	891b      	ldrh	r3, [r3, #8]
 8002100:	8871      	ldrh	r1, [r6, #2]
 8002102:	4693      	mov	fp, r2
 8002104:	7852      	ldrb	r2, [r2, #1]
 8002106:	b209      	sxth	r1, r1
 8002108:	0152      	lsls	r2, r2, #5
 800210a:	185b      	adds	r3, r3, r1
 800210c:	189b      	adds	r3, r3, r2
 800210e:	2280      	movs	r2, #128	; 0x80
 8002110:	0152      	lsls	r2, r2, #5
 8002112:	4293      	cmp	r3, r2
 8002114:	da00      	bge.n	8002118 <synth_process+0x88>
 8002116:	e1ba      	b.n	800248e <synth_process+0x3fe>
 8002118:	4ac6      	ldr	r2, [pc, #792]	; (8002434 <synth_process+0x3a4>)
	if(finePitch < 0) {finePitch = 0;}
	else if(finePitch > 4095) {finePitch = 4095;}
	uint16_t lut_fine_low = fine_lut[finePitch >> 4];
 800211a:	1113      	asrs	r3, r2, #4
 800211c:	48cb      	ldr	r0, [pc, #812]	; (800244c <synth_process+0x3bc>)
 800211e:	0059      	lsls	r1, r3, #1
	uint16_t lut_fine_high = fine_lut[(finePitch >> 4) + 1];
 8002120:	3301      	adds	r3, #1
 8002122:	005b      	lsls	r3, r3, #1
	uint16_t lut_fine_low = fine_lut[finePitch >> 4];
 8002124:	5a09      	ldrh	r1, [r1, r0]
	uint16_t fp_ready = lut_fine_low + ((lut_fine_low - lut_fine_high) * (finePitch & 0b1111) >> 4);
 8002126:	5a18      	ldrh	r0, [r3, r0]
 8002128:	230f      	movs	r3, #15
 800212a:	1a08      	subs	r0, r1, r0
 800212c:	4013      	ands	r3, r2
 800212e:	4343      	muls	r3, r0
 8002130:	111b      	asrs	r3, r3, #4
 8002132:	18cb      	adds	r3, r1, r3
	basePitch = basePitch * fp_ready >> 14;
 8002134:	b29b      	uxth	r3, r3
 8002136:	435c      	muls	r4, r3

	//Coarse
	int32_t coarsePitch = (_synth_knob[ADC_COAR_PITCH]) + lfoValue[LFO_TGT_COARSE] + (_synth_cc[SYNTH_CC_COARSE] << 5);
 8002138:	4643      	mov	r3, r8
 800213a:	8898      	ldrh	r0, [r3, #4]
 800213c:	465b      	mov	r3, fp
 800213e:	8832      	ldrh	r2, [r6, #0]
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	b212      	sxth	r2, r2
 8002144:	015b      	lsls	r3, r3, #5
 8002146:	1880      	adds	r0, r0, r2
 8002148:	18c0      	adds	r0, r0, r3
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	015b      	lsls	r3, r3, #5
 800214e:	4298      	cmp	r0, r3
 8002150:	db00      	blt.n	8002154 <synth_process+0xc4>
 8002152:	48b8      	ldr	r0, [pc, #736]	; (8002434 <synth_process+0x3a4>)
	if(coarsePitch < 0) {coarsePitch = 0;}
	else if(coarsePitch > 4095) {coarsePitch = 4095;}
	uint8_t cp_ready = coarsePitch / 164;
 8002154:	43c3      	mvns	r3, r0
 8002156:	17db      	asrs	r3, r3, #31
 8002158:	21a4      	movs	r1, #164	; 0xa4
 800215a:	4018      	ands	r0, r3
 800215c:	f7fe f85e 	bl	800021c <__divsi3>
	if(cp_ready > 24) {cp_ready = 24;}
	basePitch = basePitch * coarse_lut[cp_ready] >> 14;
 8002160:	4bbb      	ldr	r3, [pc, #748]	; (8002450 <synth_process+0x3c0>)
 8002162:	0040      	lsls	r0, r0, #1
 8002164:	5ac5      	ldrh	r5, [r0, r3]


	//Pitchbend
	finePitch = _synth_pb >> 2;
 8002166:	4bbb      	ldr	r3, [pc, #748]	; (8002454 <synth_process+0x3c4>)
	basePitch = basePitch * fp_ready >> 14;
 8002168:	0ba4      	lsrs	r4, r4, #14
	finePitch = _synth_pb >> 2;
 800216a:	8819      	ldrh	r1, [r3, #0]
 800216c:	2380      	movs	r3, #128	; 0x80
	basePitch = basePitch * coarse_lut[cp_ready] >> 14;
 800216e:	436c      	muls	r4, r5
	finePitch = _synth_pb >> 2;
 8002170:	0889      	lsrs	r1, r1, #2
	if(finePitch < 0) {finePitch = 0;}
	else if(finePitch > 4095) {finePitch = 4095;}
 8002172:	015b      	lsls	r3, r3, #5
 8002174:	4299      	cmp	r1, r3
 8002176:	db00      	blt.n	800217a <synth_process+0xea>
 8002178:	49ae      	ldr	r1, [pc, #696]	; (8002434 <synth_process+0x3a4>)
	lut_fine_low = pitchbend_lut[finePitch >> 4];
 800217a:	110a      	asrs	r2, r1, #4
 800217c:	4bb6      	ldr	r3, [pc, #728]	; (8002458 <synth_process+0x3c8>)
 800217e:	0050      	lsls	r0, r2, #1
	lut_fine_high = pitchbend_lut[(finePitch >> 4) + 1];
 8002180:	3201      	adds	r2, #1
 8002182:	0052      	lsls	r2, r2, #1
	lut_fine_low = pitchbend_lut[finePitch >> 4];
 8002184:	5ac5      	ldrh	r5, [r0, r3]
	fp_ready = lut_fine_low + ((lut_fine_low - lut_fine_high) * (finePitch & 0b1111) >> 4);
 8002186:	5ad2      	ldrh	r2, [r2, r3]
 8002188:	230f      	movs	r3, #15
 800218a:	1aaa      	subs	r2, r5, r2
 800218c:	400b      	ands	r3, r1
 800218e:	4353      	muls	r3, r2
 8002190:	111b      	asrs	r3, r3, #4
 8002192:	18eb      	adds	r3, r5, r3
	basePitch = basePitch * fp_ready >> 14;
 8002194:	b29b      	uxth	r3, r3
	basePitch = basePitch * coarse_lut[cp_ready] >> 14;
 8002196:	0ba5      	lsrs	r5, r4, #14
	basePitch = basePitch * fp_ready >> 14;
 8002198:	435d      	muls	r5, r3

	//Unison
	int16_t unison = _synth_knob[ADC_UNI] + lfoValue[LFO_TGT_UNI] + (_synth_cc[SYNTH_CC_UNISON] << 5);
 800219a:	4643      	mov	r3, r8
 800219c:	465a      	mov	r2, fp
 800219e:	88db      	ldrh	r3, [r3, #6]
 80021a0:	88b1      	ldrh	r1, [r6, #4]
 80021a2:	7892      	ldrb	r2, [r2, #2]
 80021a4:	b209      	sxth	r1, r1
 80021a6:	0152      	lsls	r2, r2, #5
 80021a8:	185b      	adds	r3, r3, r1
 80021aa:	189b      	adds	r3, r3, r2
 80021ac:	b21a      	sxth	r2, r3
 80021ae:	4691      	mov	r9, r2
	basePitch = basePitch * fp_ready >> 14;
 80021b0:	0bad      	lsrs	r5, r5, #14
	if(unison < 0) {unison = 0;}
 80021b2:	041b      	lsls	r3, r3, #16
 80021b4:	d500      	bpl.n	80021b8 <synth_process+0x128>
 80021b6:	e29c      	b.n	80026f2 <synth_process+0x662>
	else if (unison > 4095) {unison = 4095;}
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	015b      	lsls	r3, r3, #5
 80021bc:	429a      	cmp	r2, r3
 80021be:	da00      	bge.n	80021c2 <synth_process+0x132>
 80021c0:	e169      	b.n	8002496 <synth_process+0x406>
 80021c2:	2394      	movs	r3, #148	; 0x94
 80021c4:	33ff      	adds	r3, #255	; 0xff
 80021c6:	469a      	mov	sl, r3
 80021c8:	4b9a      	ldr	r3, [pc, #616]	; (8002434 <synth_process+0x3a4>)
 80021ca:	4699      	mov	r9, r3
		uni_spread = (unison - (2048+UNISON_NULL)) >> 2;
		uni_spread = uni_lut[uni_spread];
	}

	//Spread
	int16_t spread_v = _synth_spread_raw + lfoValue[LFO_TGT_SPREAD] + (_synth_cc[SYNTH_CC_SPREAD] << 5);
 80021cc:	465a      	mov	r2, fp
 80021ce:	4ba3      	ldr	r3, [pc, #652]	; (800245c <synth_process+0x3cc>)
 80021d0:	8971      	ldrh	r1, [r6, #10]
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	b209      	sxth	r1, r1
 80021d6:	185b      	adds	r3, r3, r1
 80021d8:	2180      	movs	r1, #128	; 0x80
 80021da:	7912      	ldrb	r2, [r2, #4]
	if(spread_v < 0) {spread_v = 0;}
 80021dc:	0149      	lsls	r1, r1, #5
	int16_t spread_v = _synth_spread_raw + lfoValue[LFO_TGT_SPREAD] + (_synth_cc[SYNTH_CC_SPREAD] << 5);
 80021de:	0152      	lsls	r2, r2, #5
 80021e0:	189b      	adds	r3, r3, r2
 80021e2:	1c1a      	adds	r2, r3, #0
 80021e4:	b21b      	sxth	r3, r3
 80021e6:	428b      	cmp	r3, r1
 80021e8:	db01      	blt.n	80021ee <synth_process+0x15e>
 80021ea:	4b92      	ldr	r3, [pc, #584]	; (8002434 <synth_process+0x3a4>)
 80021ec:	1c1a      	adds	r2, r3, #0
 80021ee:	b210      	sxth	r0, r2
 80021f0:	43c0      	mvns	r0, r0
 80021f2:	17c0      	asrs	r0, r0, #31
 80021f4:	4010      	ands	r0, r2
	else if (spread_v > 4095) {spread_v = 4095;}
	spread_v /= OSC_SPREAD_DIV;

	//Scale
	int16_t scale_v = _synth_scale_raw + lfoValue[LFO_TGT_SCALE] + (_synth_cc[SYNTH_CC_SCALE] << 5);
 80021f6:	465a      	mov	r2, fp
 80021f8:	4b99      	ldr	r3, [pc, #612]	; (8002460 <synth_process+0x3d0>)
 80021fa:	8931      	ldrh	r1, [r6, #8]
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	b209      	sxth	r1, r1
 8002200:	185b      	adds	r3, r3, r1
 8002202:	2180      	movs	r1, #128	; 0x80
 8002204:	78d2      	ldrb	r2, [r2, #3]
 8002206:	b200      	sxth	r0, r0
 8002208:	0152      	lsls	r2, r2, #5
 800220a:	189b      	adds	r3, r3, r2
 800220c:	1c1a      	adds	r2, r3, #0
 800220e:	b21b      	sxth	r3, r3
 8002210:	0149      	lsls	r1, r1, #5
 8002212:	428b      	cmp	r3, r1
 8002214:	db01      	blt.n	800221a <synth_process+0x18a>
 8002216:	4b87      	ldr	r3, [pc, #540]	; (8002434 <synth_process+0x3a4>)
 8002218:	1c1a      	adds	r2, r3, #0
 800221a:	b214      	sxth	r4, r2
 800221c:	43e4      	mvns	r4, r4
	spread_v /= OSC_SPREAD_DIV;
 800221e:	4991      	ldr	r1, [pc, #580]	; (8002464 <synth_process+0x3d4>)
 8002220:	17e4      	asrs	r4, r4, #31
 8002222:	4014      	ands	r4, r2
 8002224:	f7fd fffa 	bl	800021c <__divsi3>
 8002228:	b203      	sxth	r3, r0
 800222a:	4698      	mov	r8, r3
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	b224      	sxth	r4, r4
	if(scale_v < 0) {scale_v = 0;}
	else if (scale_v > 4095) {scale_v = 4095;}
	scale_v /= OSC_SCALE_DIV;
 8002230:	1264      	asrs	r4, r4, #9


	for(uint8_t i = 0; i < NOSC; i++) {
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	4599      	cmp	r9, r3
 8002236:	da00      	bge.n	800223a <synth_process+0x1aa>
 8002238:	e13b      	b.n	80024b2 <synth_process+0x422>
		//cur_phinc = cur_phinc * (1 + spread_lut[spread_v][i]);

		if(/*i != 0 && unison < 2*/ 0) {
			_synth_phase[i] = _synth_phase[0];
		} else {
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 800223a:	4643      	mov	r3, r8
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	4a8a      	ldr	r2, [pc, #552]	; (8002468 <synth_process+0x3d8>)
 8002240:	9302      	str	r3, [sp, #8]
 8002242:	4443      	add	r3, r8
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	9200      	str	r2, [sp, #0]
 8002248:	5cd2      	ldrb	r2, [r2, r3]
 800224a:	0063      	lsls	r3, r4, #1
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	191b      	adds	r3, r3, r4
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4986      	ldr	r1, [pc, #536]	; (800246c <synth_process+0x3dc>)
 8002254:	189b      	adds	r3, r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	58cb      	ldr	r3, [r1, r3]
 800225a:	9103      	str	r1, [sp, #12]
 800225c:	436b      	muls	r3, r5
 800225e:	0b59      	lsrs	r1, r3, #13
			if(unison >= 2048) {
				cur_phinc = cur_phinc * (1024 + uni_spread * uni_index) >> 10;
 8002260:	4653      	mov	r3, sl
 8002262:	005a      	lsls	r2, r3, #1
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	4252      	negs	r2, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	18d3      	adds	r3, r2, r3
 800226c:	434b      	muls	r3, r1
				uint32_t bp = basePitch * scales_lut[scale_v][0] >> 13;
				//bp += basePitch * scales_lut[scale_v][spread_lut[spread_v][5]] >> 13;
				//bp/=2;
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
			}
			_synth_phase[i] += cur_phinc;
 800226e:	4e80      	ldr	r6, [pc, #512]	; (8002470 <synth_process+0x3e0>)
				cur_phinc = cur_phinc * (1024 + uni_spread * uni_index) >> 10;
 8002270:	0a9b      	lsrs	r3, r3, #10
			_synth_phase[i] += cur_phinc;
 8002272:	6832      	ldr	r2, [r6, #0]
 8002274:	189b      	adds	r3, r3, r2
 8002276:	6033      	str	r3, [r6, #0]
		}


		uint32_t v = (_synth_phase[i] >> 6) & 2047;
 8002278:	6830      	ldr	r0, [r6, #0]
 800227a:	03c0      	lsls	r0, r0, #15
 800227c:	0d40      	lsrs	r0, r0, #21

		#ifdef SAWMODE
			if(v < (wf)) {v = v * 1023 / wf;}
 800227e:	4287      	cmp	r7, r0
 8002280:	d900      	bls.n	8002284 <synth_process+0x1f4>
 8002282:	e35c      	b.n	800293e <synth_process+0x8ae>
			else {v = 1023 - (v-wf)*1023/(2047-wf);}
 8002284:	1bc0      	subs	r0, r0, r7
 8002286:	497b      	ldr	r1, [pc, #492]	; (8002474 <synth_process+0x3e4>)
 8002288:	0283      	lsls	r3, r0, #10
 800228a:	1a18      	subs	r0, r3, r0
 800228c:	1bc9      	subs	r1, r1, r7
 800228e:	f7fd ff3b 	bl	8000108 <__udivsi3>
 8002292:	4b69      	ldr	r3, [pc, #420]	; (8002438 <synth_process+0x3a8>)
 8002294:	1a1b      	subs	r3, r3, r0
 8002296:	4699      	mov	r9, r3
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002298:	9a00      	ldr	r2, [sp, #0]
 800229a:	9b02      	ldr	r3, [sp, #8]
 800229c:	4694      	mov	ip, r2
 800229e:	4443      	add	r3, r8
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4463      	add	r3, ip
 80022a4:	785a      	ldrb	r2, [r3, #1]
 80022a6:	9b01      	ldr	r3, [sp, #4]
 80022a8:	191b      	adds	r3, r3, r4
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	189b      	adds	r3, r3, r2
 80022ae:	9a03      	ldr	r2, [sp, #12]
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	58d3      	ldr	r3, [r2, r3]
				cur_phinc = cur_phinc * (1024 + uni_spread * uni_index) >> 10;
 80022b4:	4652      	mov	r2, sl
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80022b6:	436b      	muls	r3, r5
 80022b8:	0b59      	lsrs	r1, r3, #13
				cur_phinc = cur_phinc * (1024 + uni_spread * uni_index) >> 10;
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	434b      	muls	r3, r1
			_synth_phase[i] += cur_phinc;
 80022c2:	6872      	ldr	r2, [r6, #4]
				cur_phinc = cur_phinc * (1024 + uni_spread * uni_index) >> 10;
 80022c4:	0a9b      	lsrs	r3, r3, #10
			_synth_phase[i] += cur_phinc;
 80022c6:	189b      	adds	r3, r3, r2
 80022c8:	6073      	str	r3, [r6, #4]
		uint32_t v = (_synth_phase[i] >> 6) & 2047;
 80022ca:	6870      	ldr	r0, [r6, #4]
 80022cc:	03c0      	lsls	r0, r0, #15
 80022ce:	0d40      	lsrs	r0, r0, #21
			if(v < (wf)) {v = v * 1023 / wf;}
 80022d0:	4287      	cmp	r7, r0
 80022d2:	d800      	bhi.n	80022d6 <synth_process+0x246>
 80022d4:	e370      	b.n	80029b8 <synth_process+0x928>
 80022d6:	0283      	lsls	r3, r0, #10
 80022d8:	0039      	movs	r1, r7
 80022da:	1a18      	subs	r0, r3, r0
 80022dc:	f7fd ff14 	bl	8000108 <__udivsi3>
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80022e0:	9a00      	ldr	r2, [sp, #0]
 80022e2:	9b02      	ldr	r3, [sp, #8]
 80022e4:	4694      	mov	ip, r2
 80022e6:	4443      	add	r3, r8
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4463      	add	r3, ip
 80022ec:	789a      	ldrb	r2, [r3, #2]
 80022ee:	9b01      	ldr	r3, [sp, #4]

		//if(i == 0) {so = v;}


		if (unison > UNI_PHASE_TRANSITION) {
			so += v;
 80022f0:	4481      	add	r9, r0
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80022f2:	191b      	adds	r3, r3, r4
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	189b      	adds	r3, r3, r2
 80022f8:	9a03      	ldr	r2, [sp, #12]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	58d3      	ldr	r3, [r2, r3]
			_synth_phase[i] += cur_phinc;
 80022fe:	68b2      	ldr	r2, [r6, #8]
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002300:	436b      	muls	r3, r5
				cur_phinc = cur_phinc * (1024 + uni_spread * uni_index) >> 10;
 8002302:	0b5b      	lsrs	r3, r3, #13
			_synth_phase[i] += cur_phinc;
 8002304:	189b      	adds	r3, r3, r2
 8002306:	60b3      	str	r3, [r6, #8]
		uint32_t v = (_synth_phase[i] >> 6) & 2047;
 8002308:	68b0      	ldr	r0, [r6, #8]
 800230a:	03c0      	lsls	r0, r0, #15
 800230c:	0d40      	lsrs	r0, r0, #21
			if(v < (wf)) {v = v * 1023 / wf;}
 800230e:	4287      	cmp	r7, r0
 8002310:	d800      	bhi.n	8002314 <synth_process+0x284>
 8002312:	e347      	b.n	80029a4 <synth_process+0x914>
 8002314:	0283      	lsls	r3, r0, #10
 8002316:	0039      	movs	r1, r7
 8002318:	1a18      	subs	r0, r3, r0
 800231a:	f7fd fef5 	bl	8000108 <__udivsi3>
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 800231e:	9a00      	ldr	r2, [sp, #0]
 8002320:	9b02      	ldr	r3, [sp, #8]
 8002322:	4694      	mov	ip, r2
 8002324:	4443      	add	r3, r8
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4463      	add	r3, ip
 800232a:	78da      	ldrb	r2, [r3, #3]
 800232c:	9b01      	ldr	r3, [sp, #4]
			so += v;
 800232e:	4448      	add	r0, r9
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002330:	191b      	adds	r3, r3, r4
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	189b      	adds	r3, r3, r2
 8002336:	9a03      	ldr	r2, [sp, #12]
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	58d3      	ldr	r3, [r2, r3]
			so += v;
 800233c:	4683      	mov	fp, r0
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 800233e:	436b      	muls	r3, r5
 8002340:	0b5a      	lsrs	r2, r3, #13
				cur_phinc = cur_phinc * (1024 + uni_spread * uni_index) >> 10;
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4453      	add	r3, sl
 8002348:	4353      	muls	r3, r2
			_synth_phase[i] += cur_phinc;
 800234a:	68f2      	ldr	r2, [r6, #12]
				cur_phinc = cur_phinc * (1024 + uni_spread * uni_index) >> 10;
 800234c:	0a9b      	lsrs	r3, r3, #10
			_synth_phase[i] += cur_phinc;
 800234e:	189b      	adds	r3, r3, r2
 8002350:	60f3      	str	r3, [r6, #12]
		uint32_t v = (_synth_phase[i] >> 6) & 2047;
 8002352:	68f0      	ldr	r0, [r6, #12]
 8002354:	03c0      	lsls	r0, r0, #15
 8002356:	0d40      	lsrs	r0, r0, #21
			if(v < (wf)) {v = v * 1023 / wf;}
 8002358:	4287      	cmp	r7, r0
 800235a:	d800      	bhi.n	800235e <synth_process+0x2ce>
 800235c:	e318      	b.n	8002990 <synth_process+0x900>
 800235e:	0283      	lsls	r3, r0, #10
 8002360:	0039      	movs	r1, r7
 8002362:	1a18      	subs	r0, r3, r0
 8002364:	f7fd fed0 	bl	8000108 <__udivsi3>
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002368:	9a00      	ldr	r2, [sp, #0]
 800236a:	9b02      	ldr	r3, [sp, #8]
 800236c:	4694      	mov	ip, r2
 800236e:	4443      	add	r3, r8
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4463      	add	r3, ip
 8002374:	791a      	ldrb	r2, [r3, #4]
 8002376:	9b01      	ldr	r3, [sp, #4]
			so += v;
 8002378:	4483      	add	fp, r0
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 800237a:	191b      	adds	r3, r3, r4
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	189b      	adds	r3, r3, r2
 8002380:	9a03      	ldr	r2, [sp, #12]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	58d3      	ldr	r3, [r2, r3]
 8002386:	436b      	muls	r3, r5
 8002388:	0b5a      	lsrs	r2, r3, #13
				cur_phinc = cur_phinc * (1024 + uni_spread * uni_index) >> 10;
 800238a:	4653      	mov	r3, sl
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4699      	mov	r9, r3
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	444b      	add	r3, r9
 8002396:	4353      	muls	r3, r2
			_synth_phase[i] += cur_phinc;
 8002398:	6932      	ldr	r2, [r6, #16]
				cur_phinc = cur_phinc * (1024 + uni_spread * uni_index) >> 10;
 800239a:	0a9b      	lsrs	r3, r3, #10
			_synth_phase[i] += cur_phinc;
 800239c:	189b      	adds	r3, r3, r2
 800239e:	6133      	str	r3, [r6, #16]
		uint32_t v = (_synth_phase[i] >> 6) & 2047;
 80023a0:	6930      	ldr	r0, [r6, #16]
 80023a2:	03c0      	lsls	r0, r0, #15
 80023a4:	0d40      	lsrs	r0, r0, #21
			if(v < (wf)) {v = v * 1023 / wf;}
 80023a6:	4287      	cmp	r7, r0
 80023a8:	d800      	bhi.n	80023ac <synth_process+0x31c>
 80023aa:	e2e7      	b.n	800297c <synth_process+0x8ec>
 80023ac:	0283      	lsls	r3, r0, #10
 80023ae:	0039      	movs	r1, r7
 80023b0:	1a18      	subs	r0, r3, r0
 80023b2:	f7fd fea9 	bl	8000108 <__udivsi3>
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80023b6:	9b02      	ldr	r3, [sp, #8]
			so += v;
 80023b8:	4483      	add	fp, r0
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80023ba:	4443      	add	r3, r8
 80023bc:	0058      	lsls	r0, r3, #1
 80023be:	9b00      	ldr	r3, [sp, #0]
 80023c0:	9a01      	ldr	r2, [sp, #4]
 80023c2:	469c      	mov	ip, r3
 80023c4:	4460      	add	r0, ip
 80023c6:	4694      	mov	ip, r2
				cur_phinc = cur_phinc * (1024 + uni_spread * uni_index) >> 10;
 80023c8:	2280      	movs	r2, #128	; 0x80
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80023ca:	7943      	ldrb	r3, [r0, #5]
 80023cc:	4464      	add	r4, ip
 80023ce:	0064      	lsls	r4, r4, #1
 80023d0:	18e4      	adds	r4, r4, r3
 80023d2:	9b03      	ldr	r3, [sp, #12]
 80023d4:	00a4      	lsls	r4, r4, #2
 80023d6:	591b      	ldr	r3, [r3, r4]
				cur_phinc = cur_phinc * (1024 + uni_spread * uni_index) >> 10;
 80023d8:	00d2      	lsls	r2, r2, #3
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80023da:	435d      	muls	r5, r3
				cur_phinc = cur_phinc * (1024 + uni_spread * uni_index) >> 10;
 80023dc:	464b      	mov	r3, r9
 80023de:	4694      	mov	ip, r2
 80023e0:	4453      	add	r3, sl
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80023e2:	0b6d      	lsrs	r5, r5, #13
				cur_phinc = cur_phinc * (1024 + uni_spread * uni_index) >> 10;
 80023e4:	4463      	add	r3, ip
 80023e6:	436b      	muls	r3, r5
			_synth_phase[i] += cur_phinc;
 80023e8:	6972      	ldr	r2, [r6, #20]
				cur_phinc = cur_phinc * (1024 + uni_spread * uni_index) >> 10;
 80023ea:	0a9b      	lsrs	r3, r3, #10
			_synth_phase[i] += cur_phinc;
 80023ec:	189b      	adds	r3, r3, r2
 80023ee:	6173      	str	r3, [r6, #20]
		uint32_t v = (_synth_phase[i] >> 6) & 2047;
 80023f0:	6970      	ldr	r0, [r6, #20]
 80023f2:	03c0      	lsls	r0, r0, #15
 80023f4:	0d40      	lsrs	r0, r0, #21
			if(v < (wf)) {v = v * 1023 / wf;}
 80023f6:	42b8      	cmp	r0, r7
 80023f8:	d200      	bcs.n	80023fc <synth_process+0x36c>
 80023fa:	e28c      	b.n	8002916 <synth_process+0x886>
			else {v = 1023 - (v-wf)*1023/(2047-wf);}
 80023fc:	1bc0      	subs	r0, r0, r7
 80023fe:	491d      	ldr	r1, [pc, #116]	; (8002474 <synth_process+0x3e4>)
 8002400:	0283      	lsls	r3, r0, #10
 8002402:	1a18      	subs	r0, r3, r0
 8002404:	1bc9      	subs	r1, r1, r7
 8002406:	f7fd fe7f 	bl	8000108 <__udivsi3>
 800240a:	4c0b      	ldr	r4, [pc, #44]	; (8002438 <synth_process+0x3a8>)
 800240c:	1a24      	subs	r4, r4, r0
				so += (v * unison) >> 8;
			}
		}
	}

	if(_synth_drone || midi_get_monophonic() != 0xFF) {
 800240e:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <synth_process+0x3e8>)
			so += v;
 8002410:	445c      	add	r4, fp
	if(_synth_drone || midi_get_monophonic() != 0xFF) {
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d100      	bne.n	800241a <synth_process+0x38a>
 8002418:	e15b      	b.n	80026d2 <synth_process+0x642>
		PWM_AUDIO_OUT = so / 6;
 800241a:	2106      	movs	r1, #6
 800241c:	0020      	movs	r0, r4
 800241e:	f7fd fe73 	bl	8000108 <__udivsi3>
 8002422:	4b16      	ldr	r3, [pc, #88]	; (800247c <synth_process+0x3ec>)
 8002424:	6358      	str	r0, [r3, #52]	; 0x34
 8002426:	e02b      	b.n	8002480 <synth_process+0x3f0>
 8002428:	20000168 	.word	0x20000168
 800242c:	200001dc 	.word	0x200001dc
 8002430:	2000019b 	.word	0x2000019b
 8002434:	00000fff 	.word	0x00000fff
 8002438:	000003ff 	.word	0x000003ff
 800243c:	08003e24 	.word	0x08003e24
 8002440:	2000002b 	.word	0x2000002b
 8002444:	08003788 	.word	0x08003788
 8002448:	20000308 	.word	0x20000308
 800244c:	08003584 	.word	0x08003584
 8002450:	08003550 	.word	0x08003550
 8002454:	2000002c 	.word	0x2000002c
 8002458:	0800381c 	.word	0x0800381c
 800245c:	2000030e 	.word	0x2000030e
 8002460:	20000304 	.word	0x20000304
 8002464:	000002ab 	.word	0x000002ab
 8002468:	200000f4 	.word	0x200000f4
 800246c:	20000034 	.word	0x20000034
 8002470:	20000310 	.word	0x20000310
 8002474:	000007ff 	.word	0x000007ff
 8002478:	2000002a 	.word	0x2000002a
 800247c:	40012c00 	.word	0x40012c00
	} else {
		//PWM_AUDIO_OUT = 512;
	}
}
 8002480:	b005      	add	sp, #20
 8002482:	bcf0      	pop	{r4, r5, r6, r7}
 8002484:	46bb      	mov	fp, r7
 8002486:	46b2      	mov	sl, r6
 8002488:	46a9      	mov	r9, r5
 800248a:	46a0      	mov	r8, r4
 800248c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800248e:	43da      	mvns	r2, r3
 8002490:	17d2      	asrs	r2, r2, #31
 8002492:	401a      	ands	r2, r3
 8002494:	e641      	b.n	800211a <synth_process+0x8a>
	uint16_t uni_spread = 0;
 8002496:	2200      	movs	r2, #0
	if(unison > (2048+UNISON_NULL)) {
 8002498:	4b98      	ldr	r3, [pc, #608]	; (80026fc <synth_process+0x66c>)
	uint16_t uni_spread = 0;
 800249a:	4692      	mov	sl, r2
	if(unison > (2048+UNISON_NULL)) {
 800249c:	4599      	cmp	r9, r3
 800249e:	dc00      	bgt.n	80024a2 <synth_process+0x412>
 80024a0:	e694      	b.n	80021cc <synth_process+0x13c>
 80024a2:	4b97      	ldr	r3, [pc, #604]	; (8002700 <synth_process+0x670>)
 80024a4:	4a97      	ldr	r2, [pc, #604]	; (8002704 <synth_process+0x674>)
 80024a6:	444b      	add	r3, r9
 80024a8:	109b      	asrs	r3, r3, #2
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	5a9b      	ldrh	r3, [r3, r2]
 80024ae:	469a      	mov	sl, r3
 80024b0:	e68c      	b.n	80021cc <synth_process+0x13c>
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4599      	cmp	r9, r3
 80024b8:	dd00      	ble.n	80024bc <synth_process+0x42c>
 80024ba:	e135      	b.n	8002728 <synth_process+0x698>
				uint32_t bp = basePitch * scales_lut[scale_v][0] >> 13;
 80024bc:	0063      	lsls	r3, r4, #1
 80024be:	4892      	ldr	r0, [pc, #584]	; (8002708 <synth_process+0x678>)
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	191b      	adds	r3, r3, r4
 80024c4:	00da      	lsls	r2, r3, #3
 80024c6:	5882      	ldr	r2, [r0, r2]
			_synth_phase[i] += cur_phinc;
 80024c8:	4e90      	ldr	r6, [pc, #576]	; (800270c <synth_process+0x67c>)
				uint32_t bp = basePitch * scales_lut[scale_v][0] >> 13;
 80024ca:	436a      	muls	r2, r5
 80024cc:	0b52      	lsrs	r2, r2, #13
 80024ce:	4693      	mov	fp, r2
			_synth_phase[i] += cur_phinc;
 80024d0:	6832      	ldr	r2, [r6, #0]
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80024d2:	498f      	ldr	r1, [pc, #572]	; (8002710 <synth_process+0x680>)
			_synth_phase[i] += cur_phinc;
 80024d4:	4694      	mov	ip, r2
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80024d6:	4642      	mov	r2, r8
 80024d8:	0052      	lsls	r2, r2, #1
 80024da:	9100      	str	r1, [sp, #0]
 80024dc:	9202      	str	r2, [sp, #8]
 80024de:	4442      	add	r2, r8
 80024e0:	0051      	lsls	r1, r2, #1
 80024e2:	9a00      	ldr	r2, [sp, #0]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	5c51      	ldrb	r1, [r2, r1]
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 80024e8:	465a      	mov	r2, fp
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80024ea:	185b      	adds	r3, r3, r1
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	58c3      	ldr	r3, [r0, r3]
				uint32_t bp = basePitch * scales_lut[scale_v][0] >> 13;
 80024f0:	9003      	str	r0, [sp, #12]
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80024f2:	436b      	muls	r3, r5
 80024f4:	0b5b      	lsrs	r3, r3, #13
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 80024f6:	1a9b      	subs	r3, r3, r2
 80024f8:	464a      	mov	r2, r9
 80024fa:	4353      	muls	r3, r2
			_synth_phase[i] += cur_phinc;
 80024fc:	4662      	mov	r2, ip
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 80024fe:	0adb      	lsrs	r3, r3, #11
			_synth_phase[i] += cur_phinc;
 8002500:	445a      	add	r2, fp
 8002502:	189b      	adds	r3, r3, r2
 8002504:	6033      	str	r3, [r6, #0]
		uint32_t v = (_synth_phase[i] >> 6) & 2047;
 8002506:	6830      	ldr	r0, [r6, #0]
 8002508:	03c0      	lsls	r0, r0, #15
 800250a:	0d40      	lsrs	r0, r0, #21
			if(v < (wf)) {v = v * 1023 / wf;}
 800250c:	4287      	cmp	r7, r0
 800250e:	d900      	bls.n	8002512 <synth_process+0x482>
 8002510:	e20f      	b.n	8002932 <synth_process+0x8a2>
			else {v = 1023 - (v-wf)*1023/(2047-wf);}
 8002512:	1bc0      	subs	r0, r0, r7
 8002514:	497f      	ldr	r1, [pc, #508]	; (8002714 <synth_process+0x684>)
 8002516:	0283      	lsls	r3, r0, #10
 8002518:	1a18      	subs	r0, r3, r0
 800251a:	1bc9      	subs	r1, r1, r7
 800251c:	f7fd fdf4 	bl	8000108 <__udivsi3>
 8002520:	4b7d      	ldr	r3, [pc, #500]	; (8002718 <synth_process+0x688>)
 8002522:	1a18      	subs	r0, r3, r0
				so += (v * (UNI_PHASE_TRANSITION + (UNI_PHASE_TRANSITION - unison))) >> 8;
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	464a      	mov	r2, r9
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002528:	9900      	ldr	r1, [sp, #0]
				so += (v * (UNI_PHASE_TRANSITION + (UNI_PHASE_TRANSITION - unison))) >> 8;
 800252a:	009b      	lsls	r3, r3, #2
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 800252c:	468c      	mov	ip, r1
				so += (v * (UNI_PHASE_TRANSITION + (UNI_PHASE_TRANSITION - unison))) >> 8;
 800252e:	1a9b      	subs	r3, r3, r2
 8002530:	4358      	muls	r0, r3
 8002532:	0a03      	lsrs	r3, r0, #8
 8002534:	469a      	mov	sl, r3
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002536:	9b02      	ldr	r3, [sp, #8]
			_synth_phase[i] += cur_phinc;
 8002538:	6872      	ldr	r2, [r6, #4]
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 800253a:	4443      	add	r3, r8
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	4463      	add	r3, ip
 8002540:	7859      	ldrb	r1, [r3, #1]
 8002542:	9b01      	ldr	r3, [sp, #4]
			_synth_phase[i] += cur_phinc;
 8002544:	445a      	add	r2, fp
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002546:	191b      	adds	r3, r3, r4
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	185b      	adds	r3, r3, r1
 800254c:	9903      	ldr	r1, [sp, #12]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	58cb      	ldr	r3, [r1, r3]
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 8002552:	4659      	mov	r1, fp
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002554:	436b      	muls	r3, r5
 8002556:	0b5b      	lsrs	r3, r3, #13
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 8002558:	1a5b      	subs	r3, r3, r1
 800255a:	4649      	mov	r1, r9
 800255c:	434b      	muls	r3, r1
 800255e:	0adb      	lsrs	r3, r3, #11
			_synth_phase[i] += cur_phinc;
 8002560:	189b      	adds	r3, r3, r2
 8002562:	6073      	str	r3, [r6, #4]
		uint32_t v = (_synth_phase[i] >> 6) & 2047;
 8002564:	6870      	ldr	r0, [r6, #4]
 8002566:	03c0      	lsls	r0, r0, #15
 8002568:	0d40      	lsrs	r0, r0, #21
			if(v < (wf)) {v = v * 1023 / wf;}
 800256a:	4287      	cmp	r7, r0
 800256c:	d800      	bhi.n	8002570 <synth_process+0x4e0>
 800256e:	e22d      	b.n	80029cc <synth_process+0x93c>
 8002570:	0283      	lsls	r3, r0, #10
 8002572:	0039      	movs	r1, r7
 8002574:	1a18      	subs	r0, r3, r0
 8002576:	f7fd fdc7 	bl	8000108 <__udivsi3>
				so += (v * unison) >> 8;
 800257a:	464b      	mov	r3, r9
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 800257c:	9900      	ldr	r1, [sp, #0]
				so += (v * unison) >> 8;
 800257e:	4358      	muls	r0, r3
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002580:	468c      	mov	ip, r1
 8002582:	9b02      	ldr	r3, [sp, #8]
			_synth_phase[i] += cur_phinc;
 8002584:	68b2      	ldr	r2, [r6, #8]
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002586:	4443      	add	r3, r8
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4463      	add	r3, ip
 800258c:	7899      	ldrb	r1, [r3, #2]
 800258e:	9b01      	ldr	r3, [sp, #4]
			_synth_phase[i] += cur_phinc;
 8002590:	445a      	add	r2, fp
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002592:	191b      	adds	r3, r3, r4
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	185b      	adds	r3, r3, r1
 8002598:	9903      	ldr	r1, [sp, #12]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	58cb      	ldr	r3, [r1, r3]
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 800259e:	4659      	mov	r1, fp
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80025a0:	436b      	muls	r3, r5
 80025a2:	0b5b      	lsrs	r3, r3, #13
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 80025a4:	1a5b      	subs	r3, r3, r1
 80025a6:	4649      	mov	r1, r9
 80025a8:	434b      	muls	r3, r1
 80025aa:	0adb      	lsrs	r3, r3, #11
			_synth_phase[i] += cur_phinc;
 80025ac:	189b      	adds	r3, r3, r2
				so += (v * unison) >> 8;
 80025ae:	0a00      	lsrs	r0, r0, #8
			_synth_phase[i] += cur_phinc;
 80025b0:	60b3      	str	r3, [r6, #8]
				so += (v * unison) >> 8;
 80025b2:	4482      	add	sl, r0
		uint32_t v = (_synth_phase[i] >> 6) & 2047;
 80025b4:	68b0      	ldr	r0, [r6, #8]
 80025b6:	03c0      	lsls	r0, r0, #15
 80025b8:	0d40      	lsrs	r0, r0, #21
			if(v < (wf)) {v = v * 1023 / wf;}
 80025ba:	4287      	cmp	r7, r0
 80025bc:	d800      	bhi.n	80025c0 <synth_process+0x530>
 80025be:	e20f      	b.n	80029e0 <synth_process+0x950>
 80025c0:	0283      	lsls	r3, r0, #10
 80025c2:	0039      	movs	r1, r7
 80025c4:	1a18      	subs	r0, r3, r0
 80025c6:	f7fd fd9f 	bl	8000108 <__udivsi3>
				so += (v * unison) >> 8;
 80025ca:	464b      	mov	r3, r9
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80025cc:	9900      	ldr	r1, [sp, #0]
				so += (v * unison) >> 8;
 80025ce:	4358      	muls	r0, r3
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80025d0:	468c      	mov	ip, r1
 80025d2:	9b02      	ldr	r3, [sp, #8]
			_synth_phase[i] += cur_phinc;
 80025d4:	68f2      	ldr	r2, [r6, #12]
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80025d6:	4443      	add	r3, r8
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4463      	add	r3, ip
 80025dc:	78d9      	ldrb	r1, [r3, #3]
 80025de:	9b01      	ldr	r3, [sp, #4]
			_synth_phase[i] += cur_phinc;
 80025e0:	445a      	add	r2, fp
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80025e2:	191b      	adds	r3, r3, r4
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	185b      	adds	r3, r3, r1
 80025e8:	9903      	ldr	r1, [sp, #12]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	58cb      	ldr	r3, [r1, r3]
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 80025ee:	4659      	mov	r1, fp
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80025f0:	436b      	muls	r3, r5
 80025f2:	0b5b      	lsrs	r3, r3, #13
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 80025f4:	1a5b      	subs	r3, r3, r1
 80025f6:	4649      	mov	r1, r9
 80025f8:	434b      	muls	r3, r1
 80025fa:	0adb      	lsrs	r3, r3, #11
			_synth_phase[i] += cur_phinc;
 80025fc:	189b      	adds	r3, r3, r2
				so += (v * unison) >> 8;
 80025fe:	0a00      	lsrs	r0, r0, #8
			_synth_phase[i] += cur_phinc;
 8002600:	60f3      	str	r3, [r6, #12]
				so += (v * unison) >> 8;
 8002602:	4482      	add	sl, r0
		uint32_t v = (_synth_phase[i] >> 6) & 2047;
 8002604:	68f0      	ldr	r0, [r6, #12]
 8002606:	03c0      	lsls	r0, r0, #15
 8002608:	0d40      	lsrs	r0, r0, #21
			if(v < (wf)) {v = v * 1023 / wf;}
 800260a:	4287      	cmp	r7, r0
 800260c:	d800      	bhi.n	8002610 <synth_process+0x580>
 800260e:	e1f1      	b.n	80029f4 <synth_process+0x964>
 8002610:	0283      	lsls	r3, r0, #10
 8002612:	0039      	movs	r1, r7
 8002614:	1a18      	subs	r0, r3, r0
 8002616:	f7fd fd77 	bl	8000108 <__udivsi3>
				so += (v * unison) >> 8;
 800261a:	464b      	mov	r3, r9
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 800261c:	9900      	ldr	r1, [sp, #0]
				so += (v * unison) >> 8;
 800261e:	4358      	muls	r0, r3
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002620:	468c      	mov	ip, r1
 8002622:	9b02      	ldr	r3, [sp, #8]
			_synth_phase[i] += cur_phinc;
 8002624:	6932      	ldr	r2, [r6, #16]
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002626:	4443      	add	r3, r8
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4463      	add	r3, ip
 800262c:	7919      	ldrb	r1, [r3, #4]
 800262e:	9b01      	ldr	r3, [sp, #4]
			_synth_phase[i] += cur_phinc;
 8002630:	445a      	add	r2, fp
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002632:	191b      	adds	r3, r3, r4
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	185b      	adds	r3, r3, r1
 8002638:	9903      	ldr	r1, [sp, #12]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	58cb      	ldr	r3, [r1, r3]
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 800263e:	4659      	mov	r1, fp
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002640:	436b      	muls	r3, r5
 8002642:	0b5b      	lsrs	r3, r3, #13
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 8002644:	1a5b      	subs	r3, r3, r1
 8002646:	4649      	mov	r1, r9
 8002648:	434b      	muls	r3, r1
 800264a:	0adb      	lsrs	r3, r3, #11
			_synth_phase[i] += cur_phinc;
 800264c:	189b      	adds	r3, r3, r2
				so += (v * unison) >> 8;
 800264e:	0a00      	lsrs	r0, r0, #8
			_synth_phase[i] += cur_phinc;
 8002650:	6133      	str	r3, [r6, #16]
				so += (v * unison) >> 8;
 8002652:	4482      	add	sl, r0
		uint32_t v = (_synth_phase[i] >> 6) & 2047;
 8002654:	6930      	ldr	r0, [r6, #16]
 8002656:	03c0      	lsls	r0, r0, #15
 8002658:	0d40      	lsrs	r0, r0, #21
			if(v < (wf)) {v = v * 1023 / wf;}
 800265a:	4287      	cmp	r7, r0
 800265c:	d800      	bhi.n	8002660 <synth_process+0x5d0>
 800265e:	e1d3      	b.n	8002a08 <synth_process+0x978>
 8002660:	0283      	lsls	r3, r0, #10
 8002662:	0039      	movs	r1, r7
 8002664:	1a18      	subs	r0, r3, r0
 8002666:	f7fd fd4f 	bl	8000108 <__udivsi3>
				so += (v * unison) >> 8;
 800266a:	464b      	mov	r3, r9
 800266c:	4358      	muls	r0, r3
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 800266e:	9b02      	ldr	r3, [sp, #8]
				so += (v * unison) >> 8;
 8002670:	0a00      	lsrs	r0, r0, #8
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002672:	4443      	add	r3, r8
				so += (v * unison) >> 8;
 8002674:	4482      	add	sl, r0
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002676:	0058      	lsls	r0, r3, #1
 8002678:	9b00      	ldr	r3, [sp, #0]
 800267a:	9a01      	ldr	r2, [sp, #4]
 800267c:	469c      	mov	ip, r3
 800267e:	4460      	add	r0, ip
 8002680:	4694      	mov	ip, r2
 8002682:	7943      	ldrb	r3, [r0, #5]
 8002684:	4464      	add	r4, ip
 8002686:	0064      	lsls	r4, r4, #1
 8002688:	18e4      	adds	r4, r4, r3
 800268a:	9b03      	ldr	r3, [sp, #12]
 800268c:	00a4      	lsls	r4, r4, #2
 800268e:	591b      	ldr	r3, [r3, r4]
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 8002690:	464a      	mov	r2, r9
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002692:	435d      	muls	r5, r3
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 8002694:	465b      	mov	r3, fp
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002696:	0b6d      	lsrs	r5, r5, #13
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 8002698:	1aeb      	subs	r3, r5, r3
 800269a:	4353      	muls	r3, r2
			_synth_phase[i] += cur_phinc;
 800269c:	6971      	ldr	r1, [r6, #20]
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 800269e:	0ada      	lsrs	r2, r3, #11
			_synth_phase[i] += cur_phinc;
 80026a0:	000b      	movs	r3, r1
 80026a2:	445b      	add	r3, fp
 80026a4:	18d3      	adds	r3, r2, r3
 80026a6:	6173      	str	r3, [r6, #20]
		uint32_t v = (_synth_phase[i] >> 6) & 2047;
 80026a8:	6970      	ldr	r0, [r6, #20]
 80026aa:	03c0      	lsls	r0, r0, #15
 80026ac:	0d40      	lsrs	r0, r0, #21
			if(v < (wf)) {v = v * 1023 / wf;}
 80026ae:	4287      	cmp	r7, r0
 80026b0:	d800      	bhi.n	80026b4 <synth_process+0x624>
 80026b2:	e1b3      	b.n	8002a1c <synth_process+0x98c>
 80026b4:	0283      	lsls	r3, r0, #10
 80026b6:	0039      	movs	r1, r7
 80026b8:	1a18      	subs	r0, r3, r0
 80026ba:	f7fd fd25 	bl	8000108 <__udivsi3>
 80026be:	0004      	movs	r4, r0
				so += (v * unison) >> 8;
 80026c0:	464b      	mov	r3, r9
 80026c2:	435c      	muls	r4, r3
	if(_synth_drone || midi_get_monophonic() != 0xFF) {
 80026c4:	4b15      	ldr	r3, [pc, #84]	; (800271c <synth_process+0x68c>)
				so += (v * unison) >> 8;
 80026c6:	0a24      	lsrs	r4, r4, #8
	if(_synth_drone || midi_get_monophonic() != 0xFF) {
 80026c8:	781b      	ldrb	r3, [r3, #0]
				so += (v * unison) >> 8;
 80026ca:	4454      	add	r4, sl
	if(_synth_drone || midi_get_monophonic() != 0xFF) {
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d000      	beq.n	80026d2 <synth_process+0x642>
 80026d0:	e6a3      	b.n	800241a <synth_process+0x38a>
 80026d2:	f7fe ffe1 	bl	8001698 <midi_get_monophonic>
 80026d6:	28ff      	cmp	r0, #255	; 0xff
 80026d8:	d000      	beq.n	80026dc <synth_process+0x64c>
 80026da:	e69e      	b.n	800241a <synth_process+0x38a>
 80026dc:	e6d0      	b.n	8002480 <synth_process+0x3f0>
	if(midi_get_monophonic() != 0xFF) {_synth_last_midi = midi_get_monophonic();}
 80026de:	f7fe ffdb 	bl	8001698 <midi_get_monophonic>
 80026e2:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <synth_process+0x690>)
 80026e4:	7018      	strb	r0, [r3, #0]
	if(_synth_last_midi != 0xFF) {basePitch = midi_lut[_synth_last_midi-33];}
 80026e6:	781a      	ldrb	r2, [r3, #0]
 80026e8:	2aff      	cmp	r2, #255	; 0xff
 80026ea:	d000      	beq.n	80026ee <synth_process+0x65e>
 80026ec:	e500      	b.n	80020f0 <synth_process+0x60>
	uint32_t basePitch = midi_lut[24];
 80026ee:	4c0d      	ldr	r4, [pc, #52]	; (8002724 <synth_process+0x694>)
 80026f0:	e503      	b.n	80020fa <synth_process+0x6a>
	if(unison < 0) {unison = 0;}
 80026f2:	2300      	movs	r3, #0
 80026f4:	4699      	mov	r9, r3
	uint16_t uni_spread = 0;
 80026f6:	469a      	mov	sl, r3
 80026f8:	e568      	b.n	80021cc <synth_process+0x13c>
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	00000864 	.word	0x00000864
 8002700:	fffff79c 	.word	0xfffff79c
 8002704:	08003a20 	.word	0x08003a20
 8002708:	20000034 	.word	0x20000034
 800270c:	20000310 	.word	0x20000310
 8002710:	200000f4 	.word	0x200000f4
 8002714:	000007ff 	.word	0x000007ff
 8002718:	000003ff 	.word	0x000003ff
 800271c:	2000002a 	.word	0x2000002a
 8002720:	2000002b 	.word	0x2000002b
 8002724:	0000099d 	.word	0x0000099d
				uint32_t bp = basePitch * scales_lut[scale_v][0] >> 13;
 8002728:	0063      	lsls	r3, r4, #1
 800272a:	48c1      	ldr	r0, [pc, #772]	; (8002a30 <synth_process+0x9a0>)
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	191b      	adds	r3, r3, r4
 8002730:	00da      	lsls	r2, r3, #3
 8002732:	5882      	ldr	r2, [r0, r2]
			_synth_phase[i] += cur_phinc;
 8002734:	4ebf      	ldr	r6, [pc, #764]	; (8002a34 <synth_process+0x9a4>)
				uint32_t bp = basePitch * scales_lut[scale_v][0] >> 13;
 8002736:	436a      	muls	r2, r5
 8002738:	0b52      	lsrs	r2, r2, #13
 800273a:	4692      	mov	sl, r2
			_synth_phase[i] += cur_phinc;
 800273c:	6832      	ldr	r2, [r6, #0]
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 800273e:	49be      	ldr	r1, [pc, #760]	; (8002a38 <synth_process+0x9a8>)
			_synth_phase[i] += cur_phinc;
 8002740:	4694      	mov	ip, r2
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002742:	4642      	mov	r2, r8
 8002744:	0052      	lsls	r2, r2, #1
 8002746:	9100      	str	r1, [sp, #0]
 8002748:	9202      	str	r2, [sp, #8]
 800274a:	4442      	add	r2, r8
 800274c:	0051      	lsls	r1, r2, #1
 800274e:	9a00      	ldr	r2, [sp, #0]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	5c51      	ldrb	r1, [r2, r1]
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 8002754:	4652      	mov	r2, sl
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002756:	185b      	adds	r3, r3, r1
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	58c3      	ldr	r3, [r0, r3]
				uint32_t bp = basePitch * scales_lut[scale_v][0] >> 13;
 800275c:	9003      	str	r0, [sp, #12]
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 800275e:	436b      	muls	r3, r5
 8002760:	0b5b      	lsrs	r3, r3, #13
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	464a      	mov	r2, r9
 8002766:	4353      	muls	r3, r2
			_synth_phase[i] += cur_phinc;
 8002768:	4662      	mov	r2, ip
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 800276a:	0adb      	lsrs	r3, r3, #11
			_synth_phase[i] += cur_phinc;
 800276c:	4452      	add	r2, sl
 800276e:	189b      	adds	r3, r3, r2
 8002770:	6033      	str	r3, [r6, #0]
		uint32_t v = (_synth_phase[i] >> 6) & 2047;
 8002772:	6830      	ldr	r0, [r6, #0]
 8002774:	03c0      	lsls	r0, r0, #15
 8002776:	0d40      	lsrs	r0, r0, #21
			if(v < (wf)) {v = v * 1023 / wf;}
 8002778:	4287      	cmp	r7, r0
 800277a:	d900      	bls.n	800277e <synth_process+0x6ee>
 800277c:	e0d2      	b.n	8002924 <synth_process+0x894>
			else {v = 1023 - (v-wf)*1023/(2047-wf);}
 800277e:	1bc0      	subs	r0, r0, r7
 8002780:	49ae      	ldr	r1, [pc, #696]	; (8002a3c <synth_process+0x9ac>)
 8002782:	0283      	lsls	r3, r0, #10
 8002784:	1a18      	subs	r0, r3, r0
 8002786:	1bc9      	subs	r1, r1, r7
 8002788:	f7fd fcbe 	bl	8000108 <__udivsi3>
 800278c:	4bac      	ldr	r3, [pc, #688]	; (8002a40 <synth_process+0x9b0>)
 800278e:	1a1b      	subs	r3, r3, r0
 8002790:	469b      	mov	fp, r3
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002792:	9900      	ldr	r1, [sp, #0]
 8002794:	9b02      	ldr	r3, [sp, #8]
 8002796:	468c      	mov	ip, r1
 8002798:	4443      	add	r3, r8
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	4463      	add	r3, ip
 800279e:	7859      	ldrb	r1, [r3, #1]
 80027a0:	9b01      	ldr	r3, [sp, #4]
			_synth_phase[i] += cur_phinc;
 80027a2:	6872      	ldr	r2, [r6, #4]
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80027a4:	191b      	adds	r3, r3, r4
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	185b      	adds	r3, r3, r1
 80027aa:	9903      	ldr	r1, [sp, #12]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	58cb      	ldr	r3, [r1, r3]
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 80027b0:	4651      	mov	r1, sl
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80027b2:	436b      	muls	r3, r5
 80027b4:	0b5b      	lsrs	r3, r3, #13
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 80027b6:	1a5b      	subs	r3, r3, r1
 80027b8:	4649      	mov	r1, r9
 80027ba:	434b      	muls	r3, r1
			_synth_phase[i] += cur_phinc;
 80027bc:	4452      	add	r2, sl
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 80027be:	0adb      	lsrs	r3, r3, #11
			_synth_phase[i] += cur_phinc;
 80027c0:	189b      	adds	r3, r3, r2
 80027c2:	6073      	str	r3, [r6, #4]
		uint32_t v = (_synth_phase[i] >> 6) & 2047;
 80027c4:	6870      	ldr	r0, [r6, #4]
 80027c6:	03c0      	lsls	r0, r0, #15
 80027c8:	0d40      	lsrs	r0, r0, #21
			if(v < (wf)) {v = v * 1023 / wf;}
 80027ca:	4287      	cmp	r7, r0
 80027cc:	d900      	bls.n	80027d0 <synth_process+0x740>
 80027ce:	e0c3      	b.n	8002958 <synth_process+0x8c8>
			else {v = 1023 - (v-wf)*1023/(2047-wf);}
 80027d0:	1bc0      	subs	r0, r0, r7
 80027d2:	499a      	ldr	r1, [pc, #616]	; (8002a3c <synth_process+0x9ac>)
 80027d4:	0283      	lsls	r3, r0, #10
 80027d6:	1a18      	subs	r0, r3, r0
 80027d8:	1bc9      	subs	r1, r1, r7
 80027da:	f7fd fc95 	bl	8000108 <__udivsi3>
 80027de:	4b98      	ldr	r3, [pc, #608]	; (8002a40 <synth_process+0x9b0>)
 80027e0:	1a18      	subs	r0, r3, r0
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80027e2:	9900      	ldr	r1, [sp, #0]
 80027e4:	9b02      	ldr	r3, [sp, #8]
 80027e6:	468c      	mov	ip, r1
 80027e8:	4443      	add	r3, r8
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	4463      	add	r3, ip
 80027ee:	7899      	ldrb	r1, [r3, #2]
 80027f0:	9b01      	ldr	r3, [sp, #4]
			_synth_phase[i] += cur_phinc;
 80027f2:	68b2      	ldr	r2, [r6, #8]
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80027f4:	191b      	adds	r3, r3, r4
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	185b      	adds	r3, r3, r1
 80027fa:	9903      	ldr	r1, [sp, #12]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	58cb      	ldr	r3, [r1, r3]
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 8002800:	4651      	mov	r1, sl
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002802:	436b      	muls	r3, r5
 8002804:	0b5b      	lsrs	r3, r3, #13
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 8002806:	1a5b      	subs	r3, r3, r1
 8002808:	4649      	mov	r1, r9
 800280a:	434b      	muls	r3, r1
			_synth_phase[i] += cur_phinc;
 800280c:	4452      	add	r2, sl
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 800280e:	0adb      	lsrs	r3, r3, #11
			_synth_phase[i] += cur_phinc;
 8002810:	189b      	adds	r3, r3, r2
 8002812:	60b3      	str	r3, [r6, #8]
			so += v;
 8002814:	4483      	add	fp, r0
		uint32_t v = (_synth_phase[i] >> 6) & 2047;
 8002816:	68b0      	ldr	r0, [r6, #8]
 8002818:	03c0      	lsls	r0, r0, #15
 800281a:	0d40      	lsrs	r0, r0, #21
			if(v < (wf)) {v = v * 1023 / wf;}
 800281c:	4287      	cmp	r7, r0
 800281e:	d900      	bls.n	8002822 <synth_process+0x792>
 8002820:	e0a6      	b.n	8002970 <synth_process+0x8e0>
			else {v = 1023 - (v-wf)*1023/(2047-wf);}
 8002822:	1bc0      	subs	r0, r0, r7
 8002824:	4985      	ldr	r1, [pc, #532]	; (8002a3c <synth_process+0x9ac>)
 8002826:	0283      	lsls	r3, r0, #10
 8002828:	1a18      	subs	r0, r3, r0
 800282a:	1bc9      	subs	r1, r1, r7
 800282c:	f7fd fc6c 	bl	8000108 <__udivsi3>
 8002830:	4b83      	ldr	r3, [pc, #524]	; (8002a40 <synth_process+0x9b0>)
 8002832:	1a18      	subs	r0, r3, r0
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002834:	9900      	ldr	r1, [sp, #0]
 8002836:	9b02      	ldr	r3, [sp, #8]
 8002838:	468c      	mov	ip, r1
 800283a:	4443      	add	r3, r8
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4463      	add	r3, ip
 8002840:	78d9      	ldrb	r1, [r3, #3]
 8002842:	9b01      	ldr	r3, [sp, #4]
			_synth_phase[i] += cur_phinc;
 8002844:	68f2      	ldr	r2, [r6, #12]
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002846:	191b      	adds	r3, r3, r4
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	185b      	adds	r3, r3, r1
 800284c:	9903      	ldr	r1, [sp, #12]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	58cb      	ldr	r3, [r1, r3]
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 8002852:	4651      	mov	r1, sl
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002854:	436b      	muls	r3, r5
 8002856:	0b5b      	lsrs	r3, r3, #13
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 8002858:	1a5b      	subs	r3, r3, r1
 800285a:	4649      	mov	r1, r9
 800285c:	434b      	muls	r3, r1
			_synth_phase[i] += cur_phinc;
 800285e:	4452      	add	r2, sl
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 8002860:	0adb      	lsrs	r3, r3, #11
			_synth_phase[i] += cur_phinc;
 8002862:	189b      	adds	r3, r3, r2
 8002864:	60f3      	str	r3, [r6, #12]
			so += v;
 8002866:	4483      	add	fp, r0
		uint32_t v = (_synth_phase[i] >> 6) & 2047;
 8002868:	68f0      	ldr	r0, [r6, #12]
 800286a:	03c0      	lsls	r0, r0, #15
 800286c:	0d40      	lsrs	r0, r0, #21
			if(v < (wf)) {v = v * 1023 / wf;}
 800286e:	4287      	cmp	r7, r0
 8002870:	d878      	bhi.n	8002964 <synth_process+0x8d4>
			else {v = 1023 - (v-wf)*1023/(2047-wf);}
 8002872:	1bc0      	subs	r0, r0, r7
 8002874:	4971      	ldr	r1, [pc, #452]	; (8002a3c <synth_process+0x9ac>)
 8002876:	0283      	lsls	r3, r0, #10
 8002878:	1a18      	subs	r0, r3, r0
 800287a:	1bc9      	subs	r1, r1, r7
 800287c:	f7fd fc44 	bl	8000108 <__udivsi3>
 8002880:	4b6f      	ldr	r3, [pc, #444]	; (8002a40 <synth_process+0x9b0>)
 8002882:	1a18      	subs	r0, r3, r0
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002884:	9900      	ldr	r1, [sp, #0]
 8002886:	9b02      	ldr	r3, [sp, #8]
 8002888:	468c      	mov	ip, r1
 800288a:	4443      	add	r3, r8
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	4463      	add	r3, ip
 8002890:	7919      	ldrb	r1, [r3, #4]
 8002892:	9b01      	ldr	r3, [sp, #4]
			_synth_phase[i] += cur_phinc;
 8002894:	6932      	ldr	r2, [r6, #16]
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 8002896:	191b      	adds	r3, r3, r4
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	185b      	adds	r3, r3, r1
 800289c:	9903      	ldr	r1, [sp, #12]
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	58cb      	ldr	r3, [r1, r3]
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 80028a2:	4651      	mov	r1, sl
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80028a4:	436b      	muls	r3, r5
 80028a6:	0b5b      	lsrs	r3, r3, #13
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 80028a8:	1a5b      	subs	r3, r3, r1
 80028aa:	4649      	mov	r1, r9
 80028ac:	434b      	muls	r3, r1
			_synth_phase[i] += cur_phinc;
 80028ae:	4452      	add	r2, sl
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 80028b0:	0adb      	lsrs	r3, r3, #11
			_synth_phase[i] += cur_phinc;
 80028b2:	189b      	adds	r3, r3, r2
 80028b4:	6133      	str	r3, [r6, #16]
			so += v;
 80028b6:	4483      	add	fp, r0
		uint32_t v = (_synth_phase[i] >> 6) & 2047;
 80028b8:	6930      	ldr	r0, [r6, #16]
 80028ba:	03c0      	lsls	r0, r0, #15
 80028bc:	0d40      	lsrs	r0, r0, #21
			if(v < (wf)) {v = v * 1023 / wf;}
 80028be:	4287      	cmp	r7, r0
 80028c0:	d844      	bhi.n	800294c <synth_process+0x8bc>
			else {v = 1023 - (v-wf)*1023/(2047-wf);}
 80028c2:	1bc0      	subs	r0, r0, r7
 80028c4:	495d      	ldr	r1, [pc, #372]	; (8002a3c <synth_process+0x9ac>)
 80028c6:	0283      	lsls	r3, r0, #10
 80028c8:	1a18      	subs	r0, r3, r0
 80028ca:	1bc9      	subs	r1, r1, r7
 80028cc:	f7fd fc1c 	bl	8000108 <__udivsi3>
 80028d0:	4b5b      	ldr	r3, [pc, #364]	; (8002a40 <synth_process+0x9b0>)
 80028d2:	1a18      	subs	r0, r3, r0
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80028d4:	9b02      	ldr	r3, [sp, #8]
			so += v;
 80028d6:	4483      	add	fp, r0
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80028d8:	4443      	add	r3, r8
 80028da:	0058      	lsls	r0, r3, #1
 80028dc:	9b00      	ldr	r3, [sp, #0]
 80028de:	9901      	ldr	r1, [sp, #4]
 80028e0:	469c      	mov	ip, r3
 80028e2:	4460      	add	r0, ip
 80028e4:	468c      	mov	ip, r1
 80028e6:	7943      	ldrb	r3, [r0, #5]
 80028e8:	4464      	add	r4, ip
 80028ea:	0064      	lsls	r4, r4, #1
 80028ec:	18e4      	adds	r4, r4, r3
 80028ee:	9b03      	ldr	r3, [sp, #12]
 80028f0:	00a4      	lsls	r4, r4, #2
 80028f2:	591b      	ldr	r3, [r3, r4]
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 80028f4:	4649      	mov	r1, r9
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80028f6:	435d      	muls	r5, r3
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 80028f8:	4653      	mov	r3, sl
			cur_phinc = cur_phinc * scales_lut[scale_v][spread_lut[spread_v][i]] >> 13;
 80028fa:	0b6d      	lsrs	r5, r5, #13
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 80028fc:	1aeb      	subs	r3, r5, r3
 80028fe:	4359      	muls	r1, r3
			_synth_phase[i] += cur_phinc;
 8002900:	6972      	ldr	r2, [r6, #20]
				cur_phinc = bp + ((cur_phinc - bp)*(unison) >> 11);
 8002902:	0acb      	lsrs	r3, r1, #11
			_synth_phase[i] += cur_phinc;
 8002904:	4452      	add	r2, sl
 8002906:	189b      	adds	r3, r3, r2
 8002908:	6173      	str	r3, [r6, #20]
		uint32_t v = (_synth_phase[i] >> 6) & 2047;
 800290a:	6970      	ldr	r0, [r6, #20]
 800290c:	03c0      	lsls	r0, r0, #15
 800290e:	0d40      	lsrs	r0, r0, #21
			if(v < (wf)) {v = v * 1023 / wf;}
 8002910:	42b8      	cmp	r0, r7
 8002912:	d300      	bcc.n	8002916 <synth_process+0x886>
 8002914:	e572      	b.n	80023fc <synth_process+0x36c>
 8002916:	0283      	lsls	r3, r0, #10
 8002918:	0039      	movs	r1, r7
 800291a:	1a18      	subs	r0, r3, r0
 800291c:	f7fd fbf4 	bl	8000108 <__udivsi3>
 8002920:	0004      	movs	r4, r0
 8002922:	e574      	b.n	800240e <synth_process+0x37e>
 8002924:	0283      	lsls	r3, r0, #10
 8002926:	0039      	movs	r1, r7
 8002928:	1a18      	subs	r0, r3, r0
 800292a:	f7fd fbed 	bl	8000108 <__udivsi3>
 800292e:	4683      	mov	fp, r0
 8002930:	e72f      	b.n	8002792 <synth_process+0x702>
 8002932:	0283      	lsls	r3, r0, #10
 8002934:	0039      	movs	r1, r7
 8002936:	1a18      	subs	r0, r3, r0
 8002938:	f7fd fbe6 	bl	8000108 <__udivsi3>
 800293c:	e5f2      	b.n	8002524 <synth_process+0x494>
 800293e:	0283      	lsls	r3, r0, #10
 8002940:	0039      	movs	r1, r7
 8002942:	1a18      	subs	r0, r3, r0
 8002944:	f7fd fbe0 	bl	8000108 <__udivsi3>
 8002948:	4681      	mov	r9, r0
 800294a:	e4a5      	b.n	8002298 <synth_process+0x208>
 800294c:	0283      	lsls	r3, r0, #10
 800294e:	0039      	movs	r1, r7
 8002950:	1a18      	subs	r0, r3, r0
 8002952:	f7fd fbd9 	bl	8000108 <__udivsi3>
 8002956:	e7bd      	b.n	80028d4 <synth_process+0x844>
 8002958:	0283      	lsls	r3, r0, #10
 800295a:	0039      	movs	r1, r7
 800295c:	1a18      	subs	r0, r3, r0
 800295e:	f7fd fbd3 	bl	8000108 <__udivsi3>
 8002962:	e73e      	b.n	80027e2 <synth_process+0x752>
 8002964:	0283      	lsls	r3, r0, #10
 8002966:	0039      	movs	r1, r7
 8002968:	1a18      	subs	r0, r3, r0
 800296a:	f7fd fbcd 	bl	8000108 <__udivsi3>
 800296e:	e789      	b.n	8002884 <synth_process+0x7f4>
 8002970:	0283      	lsls	r3, r0, #10
 8002972:	0039      	movs	r1, r7
 8002974:	1a18      	subs	r0, r3, r0
 8002976:	f7fd fbc7 	bl	8000108 <__udivsi3>
 800297a:	e75b      	b.n	8002834 <synth_process+0x7a4>
			else {v = 1023 - (v-wf)*1023/(2047-wf);}
 800297c:	1bc0      	subs	r0, r0, r7
 800297e:	492f      	ldr	r1, [pc, #188]	; (8002a3c <synth_process+0x9ac>)
 8002980:	0283      	lsls	r3, r0, #10
 8002982:	1a18      	subs	r0, r3, r0
 8002984:	1bc9      	subs	r1, r1, r7
 8002986:	f7fd fbbf 	bl	8000108 <__udivsi3>
 800298a:	4b2d      	ldr	r3, [pc, #180]	; (8002a40 <synth_process+0x9b0>)
 800298c:	1a18      	subs	r0, r3, r0
 800298e:	e512      	b.n	80023b6 <synth_process+0x326>
 8002990:	1bc0      	subs	r0, r0, r7
 8002992:	492a      	ldr	r1, [pc, #168]	; (8002a3c <synth_process+0x9ac>)
 8002994:	0283      	lsls	r3, r0, #10
 8002996:	1a18      	subs	r0, r3, r0
 8002998:	1bc9      	subs	r1, r1, r7
 800299a:	f7fd fbb5 	bl	8000108 <__udivsi3>
 800299e:	4b28      	ldr	r3, [pc, #160]	; (8002a40 <synth_process+0x9b0>)
 80029a0:	1a18      	subs	r0, r3, r0
 80029a2:	e4e1      	b.n	8002368 <synth_process+0x2d8>
 80029a4:	1bc0      	subs	r0, r0, r7
 80029a6:	4925      	ldr	r1, [pc, #148]	; (8002a3c <synth_process+0x9ac>)
 80029a8:	0283      	lsls	r3, r0, #10
 80029aa:	1a18      	subs	r0, r3, r0
 80029ac:	1bc9      	subs	r1, r1, r7
 80029ae:	f7fd fbab 	bl	8000108 <__udivsi3>
 80029b2:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <synth_process+0x9b0>)
 80029b4:	1a18      	subs	r0, r3, r0
 80029b6:	e4b2      	b.n	800231e <synth_process+0x28e>
 80029b8:	1bc0      	subs	r0, r0, r7
 80029ba:	4920      	ldr	r1, [pc, #128]	; (8002a3c <synth_process+0x9ac>)
 80029bc:	0283      	lsls	r3, r0, #10
 80029be:	1a18      	subs	r0, r3, r0
 80029c0:	1bc9      	subs	r1, r1, r7
 80029c2:	f7fd fba1 	bl	8000108 <__udivsi3>
 80029c6:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <synth_process+0x9b0>)
 80029c8:	1a18      	subs	r0, r3, r0
 80029ca:	e489      	b.n	80022e0 <synth_process+0x250>
 80029cc:	1bc0      	subs	r0, r0, r7
 80029ce:	491b      	ldr	r1, [pc, #108]	; (8002a3c <synth_process+0x9ac>)
 80029d0:	0283      	lsls	r3, r0, #10
 80029d2:	1a18      	subs	r0, r3, r0
 80029d4:	1bc9      	subs	r1, r1, r7
 80029d6:	f7fd fb97 	bl	8000108 <__udivsi3>
 80029da:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <synth_process+0x9b0>)
 80029dc:	1a18      	subs	r0, r3, r0
 80029de:	e5cc      	b.n	800257a <synth_process+0x4ea>
 80029e0:	1bc0      	subs	r0, r0, r7
 80029e2:	4916      	ldr	r1, [pc, #88]	; (8002a3c <synth_process+0x9ac>)
 80029e4:	0283      	lsls	r3, r0, #10
 80029e6:	1a18      	subs	r0, r3, r0
 80029e8:	1bc9      	subs	r1, r1, r7
 80029ea:	f7fd fb8d 	bl	8000108 <__udivsi3>
 80029ee:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <synth_process+0x9b0>)
 80029f0:	1a18      	subs	r0, r3, r0
 80029f2:	e5ea      	b.n	80025ca <synth_process+0x53a>
 80029f4:	1bc0      	subs	r0, r0, r7
 80029f6:	4911      	ldr	r1, [pc, #68]	; (8002a3c <synth_process+0x9ac>)
 80029f8:	0283      	lsls	r3, r0, #10
 80029fa:	1a18      	subs	r0, r3, r0
 80029fc:	1bc9      	subs	r1, r1, r7
 80029fe:	f7fd fb83 	bl	8000108 <__udivsi3>
 8002a02:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <synth_process+0x9b0>)
 8002a04:	1a18      	subs	r0, r3, r0
 8002a06:	e608      	b.n	800261a <synth_process+0x58a>
 8002a08:	1bc0      	subs	r0, r0, r7
 8002a0a:	490c      	ldr	r1, [pc, #48]	; (8002a3c <synth_process+0x9ac>)
 8002a0c:	0283      	lsls	r3, r0, #10
 8002a0e:	1a18      	subs	r0, r3, r0
 8002a10:	1bc9      	subs	r1, r1, r7
 8002a12:	f7fd fb79 	bl	8000108 <__udivsi3>
 8002a16:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <synth_process+0x9b0>)
 8002a18:	1a18      	subs	r0, r3, r0
 8002a1a:	e626      	b.n	800266a <synth_process+0x5da>
 8002a1c:	1bc0      	subs	r0, r0, r7
 8002a1e:	4907      	ldr	r1, [pc, #28]	; (8002a3c <synth_process+0x9ac>)
 8002a20:	0283      	lsls	r3, r0, #10
 8002a22:	1a18      	subs	r0, r3, r0
 8002a24:	1bc9      	subs	r1, r1, r7
 8002a26:	f7fd fb6f 	bl	8000108 <__udivsi3>
 8002a2a:	4c05      	ldr	r4, [pc, #20]	; (8002a40 <synth_process+0x9b0>)
 8002a2c:	1a24      	subs	r4, r4, r0
 8002a2e:	e647      	b.n	80026c0 <synth_process+0x630>
 8002a30:	20000034 	.word	0x20000034
 8002a34:	20000310 	.word	0x20000310
 8002a38:	200000f4 	.word	0x200000f4
 8002a3c:	000007ff 	.word	0x000007ff
 8002a40:	000003ff 	.word	0x000003ff

08002a44 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002a44:	4770      	bx	lr
 8002a46:	46c0      	nop			; (mov r8, r8)

08002a48 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate (void)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002a48:	230c      	movs	r3, #12
 8002a4a:	4a14      	ldr	r2, [pc, #80]	; (8002a9c <SystemCoreClockUpdate+0x54>)
{
 8002a4c:	b510      	push	{r4, lr}
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002a4e:	6851      	ldr	r1, [r2, #4]
 8002a50:	400b      	ands	r3, r1

  switch (tmp)
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d00a      	beq.n	8002a6c <SystemCoreClockUpdate+0x24>
 8002a56:	4812      	ldr	r0, [pc, #72]	; (8002aa0 <SystemCoreClockUpdate+0x58>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002a58:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <SystemCoreClockUpdate+0x54>)
 8002a5a:	4a12      	ldr	r2, [pc, #72]	; (8002aa4 <SystemCoreClockUpdate+0x5c>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	061b      	lsls	r3, r3, #24
 8002a60:	0f1b      	lsrs	r3, r3, #28
 8002a62:	5cd3      	ldrb	r3, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8002a64:	40d8      	lsrs	r0, r3
 8002a66:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <SystemCoreClockUpdate+0x60>)
 8002a68:	6018      	str	r0, [r3, #0]
}
 8002a6a:	bd10      	pop	{r4, pc}
      pllmull = ( pllmull >> 18) + 2;
 8002a6c:	210f      	movs	r1, #15
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8002a6e:	6850      	ldr	r0, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8002a70:	6853      	ldr	r3, [r2, #4]
      pllmull = ( pllmull >> 18) + 2;
 8002a72:	0c80      	lsrs	r0, r0, #18
 8002a74:	4008      	ands	r0, r1
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8002a76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmull = ( pllmull >> 18) + 2;
 8002a78:	1c84      	adds	r4, r0, #2
      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002a7a:	03db      	lsls	r3, r3, #15
 8002a7c:	d506      	bpl.n	8002a8c <SystemCoreClockUpdate+0x44>
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8002a7e:	4011      	ands	r1, r2
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8002a80:	4807      	ldr	r0, [pc, #28]	; (8002aa0 <SystemCoreClockUpdate+0x58>)
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8002a82:	3101      	adds	r1, #1
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8002a84:	f7fd fb40 	bl	8000108 <__udivsi3>
 8002a88:	4360      	muls	r0, r4
 8002a8a:	e7e5      	b.n	8002a58 <SystemCoreClockUpdate+0x10>
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8002a8c:	0163      	lsls	r3, r4, #5
 8002a8e:	1b1b      	subs	r3, r3, r4
 8002a90:	0198      	lsls	r0, r3, #6
 8002a92:	1ac0      	subs	r0, r0, r3
 8002a94:	00c0      	lsls	r0, r0, #3
 8002a96:	1900      	adds	r0, r0, r4
 8002a98:	0200      	lsls	r0, r0, #8
 8002a9a:	e7dd      	b.n	8002a58 <SystemCoreClockUpdate+0x10>
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	007a1200 	.word	0x007a1200
 8002aa4:	08004624 	.word	0x08004624
 8002aa8:	20000118 	.word	0x20000118

08002aac <tick_configure>:
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002aac:	20c5      	movs	r0, #197	; 0xc5
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <tick_configure+0x4c>)
 8002ab0:	0080      	lsls	r0, r0, #2
 8002ab2:	581a      	ldr	r2, [r3, r0]
 8002ab4:	4911      	ldr	r1, [pc, #68]	; (8002afc <tick_configure+0x50>)
 8002ab6:	4011      	ands	r1, r2
 8002ab8:	22c0      	movs	r2, #192	; 0xc0
 8002aba:	0412      	lsls	r2, r2, #16
 8002abc:	430a      	orrs	r2, r1
 8002abe:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac0:	2280      	movs	r2, #128	; 0x80
 8002ac2:	03d2      	lsls	r2, r2, #15
 8002ac4:	601a      	str	r2, [r3, #0]

void tick_configure() {
	NVIC_SetPriority(TIM17_IRQn, 3);
	NVIC_EnableIRQ(TIM17_IRQn);

	RCC->APB2ENR |= RCC_APB2ENR_TIM17EN;
 8002ac6:	2380      	movs	r3, #128	; 0x80
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	; (8002b00 <tick_configure+0x54>)
 8002aca:	02db      	lsls	r3, r3, #11
 8002acc:	6991      	ldr	r1, [r2, #24]
	TIM17->PSC = 0;
	TIM17->ARR = 48000;
	TIM17->DIER |= TIM_DIER_UIE;
 8002ace:	2001      	movs	r0, #1
	RCC->APB2ENR |= RCC_APB2ENR_TIM17EN;
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	6193      	str	r3, [r2, #24]
	TIM17->PSC = 0;
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <tick_configure+0x58>)
 8002ad8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM17->ARR = 48000;
 8002ada:	4a0b      	ldr	r2, [pc, #44]	; (8002b08 <tick_configure+0x5c>)
 8002adc:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM17->CR1 |= TIM_CR1_ARPE;
 8002ade:	2280      	movs	r2, #128	; 0x80
	TIM17->DIER |= TIM_DIER_UIE;
 8002ae0:	68d9      	ldr	r1, [r3, #12]
 8002ae2:	4301      	orrs	r1, r0
 8002ae4:	60d9      	str	r1, [r3, #12]
	TIM17->CR1 |= TIM_CR1_ARPE;
 8002ae6:	6819      	ldr	r1, [r3, #0]
 8002ae8:	4311      	orrs	r1, r2
 8002aea:	6019      	str	r1, [r3, #0]
 8002aec:	f3bf 8f4f 	dsb	sy
	__DSB();
	TIM17->CR1 |= TIM_CR1_CEN;
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	4302      	orrs	r2, r0
 8002af4:	601a      	str	r2, [r3, #0]
}
 8002af6:	4770      	bx	lr
 8002af8:	e000e100 	.word	0xe000e100
 8002afc:	ff00ffff 	.word	0xff00ffff
 8002b00:	40021000 	.word	0x40021000
 8002b04:	40014800 	.word	0x40014800
 8002b08:	0000bb80 	.word	0x0000bb80

08002b0c <tick_but_command>:

volatile uint8_t prev_midi_in = 0;

volatile uint16_t midi_chan_blink = 0;

void tick_but_command() {
 8002b0c:	b570      	push	{r4, r5, r6, lr}
	// Check if all are released.
	uint8_t all_released = 1;
	for(uint8_t i = 0; i < 5; i++) {
 8002b0e:	2400      	movs	r4, #0
	uint8_t all_released = 1;
 8002b10:	2501      	movs	r5, #1
		if(but_check(i)) {all_released = 0;}
 8002b12:	0020      	movs	r0, r4
 8002b14:	f7fd fe24 	bl	8000760 <but_check>
 8002b18:	4243      	negs	r3, r0
 8002b1a:	4158      	adcs	r0, r3
	for(uint8_t i = 0; i < 5; i++) {
 8002b1c:	3401      	adds	r4, #1
		if(but_check(i)) {all_released = 0;}
 8002b1e:	4240      	negs	r0, r0
	for(uint8_t i = 0; i < 5; i++) {
 8002b20:	b2e4      	uxtb	r4, r4
		if(but_check(i)) {all_released = 0;}
 8002b22:	4005      	ands	r5, r0
	for(uint8_t i = 0; i < 5; i++) {
 8002b24:	2c05      	cmp	r4, #5
 8002b26:	d1f4      	bne.n	8002b12 <tick_but_command+0x6>
	}

	// When a command is issued, all buttons are ignored until all buttons are released at the same time!
	if(command_issued) {
 8002b28:	4eba      	ldr	r6, [pc, #744]	; (8002e14 <tick_but_command+0x308>)
 8002b2a:	7833      	ldrb	r3, [r6, #0]
 8002b2c:	b2dc      	uxtb	r4, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d004      	beq.n	8002b3c <tick_but_command+0x30>
		if(all_released) {command_issued = 0;}
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	d001      	beq.n	8002b3a <tick_but_command+0x2e>
 8002b36:	2300      	movs	r3, #0
 8002b38:	7033      	strb	r3, [r6, #0]

	// If any of the buttons released at this point, no known command is issued.
	for(uint8_t i = 0; i < 5; i++) {
		if(but_released(i)) {command_issued = 1;}
	}
}
 8002b3a:	bd70      	pop	{r4, r5, r6, pc}
	if(	(but_released(BUTLED_M1) && !but_released(BUTLED_M2) && !but_released(BUTLED_M3) && !but_check(BUTLED_M2) && !but_check(BUTLED_M3)) ||
 8002b3c:	2002      	movs	r0, #2
 8002b3e:	f7fd fe87 	bl	8000850 <but_released>
 8002b42:	2800      	cmp	r0, #0
 8002b44:	d004      	beq.n	8002b50 <tick_but_command+0x44>
 8002b46:	2003      	movs	r0, #3
 8002b48:	f7fd fe82 	bl	8000850 <but_released>
 8002b4c:	2800      	cmp	r0, #0
 8002b4e:	d067      	beq.n	8002c20 <tick_but_command+0x114>
		(but_released(BUTLED_M2) && !but_released(BUTLED_M1) && !but_released(BUTLED_M3) && !but_check(BUTLED_M1) && !but_check(BUTLED_M3)) ||
 8002b50:	2003      	movs	r0, #3
 8002b52:	f7fd fe7d 	bl	8000850 <but_released>
	if(	(but_released(BUTLED_M1) && !but_released(BUTLED_M2) && !but_released(BUTLED_M3) && !but_check(BUTLED_M2) && !but_check(BUTLED_M3)) ||
 8002b56:	2800      	cmp	r0, #0
 8002b58:	d004      	beq.n	8002b64 <tick_but_command+0x58>
		(but_released(BUTLED_M2) && !but_released(BUTLED_M1) && !but_released(BUTLED_M3) && !but_check(BUTLED_M1) && !but_check(BUTLED_M3)) ||
 8002b5a:	2002      	movs	r0, #2
 8002b5c:	f7fd fe78 	bl	8000850 <but_released>
 8002b60:	2800      	cmp	r0, #0
 8002b62:	d04d      	beq.n	8002c00 <tick_but_command+0xf4>
		(but_released(BUTLED_M3) && !but_released(BUTLED_M2) && !but_released(BUTLED_M1) && !but_check(BUTLED_M2) && !but_check(BUTLED_M1)))
 8002b64:	2004      	movs	r0, #4
 8002b66:	f7fd fe73 	bl	8000850 <but_released>
		(but_released(BUTLED_M2) && !but_released(BUTLED_M1) && !but_released(BUTLED_M3) && !but_check(BUTLED_M1) && !but_check(BUTLED_M3)) ||
 8002b6a:	2800      	cmp	r0, #0
 8002b6c:	d004      	beq.n	8002b78 <tick_but_command+0x6c>
		(but_released(BUTLED_M3) && !but_released(BUTLED_M2) && !but_released(BUTLED_M1) && !but_check(BUTLED_M2) && !but_check(BUTLED_M1)))
 8002b6e:	2003      	movs	r0, #3
 8002b70:	f7fd fe6e 	bl	8000850 <but_released>
 8002b74:	2800      	cmp	r0, #0
 8002b76:	d063      	beq.n	8002c40 <tick_but_command+0x134>
	if(but_released(BUTLED_SAVE) && !but_check(BUTLED_DRONE) && !but_check(BUTLED_M1) && !but_check(BUTLED_M2) && !but_check(BUTLED_M3) && !but_released(BUTLED_DRONE)) {
 8002b78:	2001      	movs	r0, #1
 8002b7a:	f7fd fe69 	bl	8000850 <but_released>
 8002b7e:	2800      	cmp	r0, #0
 8002b80:	d005      	beq.n	8002b8e <tick_but_command+0x82>
 8002b82:	2000      	movs	r0, #0
 8002b84:	f7fd fdec 	bl	8000760 <but_check>
 8002b88:	2800      	cmp	r0, #0
 8002b8a:	d100      	bne.n	8002b8e <tick_but_command+0x82>
 8002b8c:	e08d      	b.n	8002caa <tick_but_command+0x19e>
	if(but_released(BUTLED_DRONE) && !but_check(BUTLED_DRONE) && !but_check(BUTLED_M1) && !but_check(BUTLED_M2) && !but_check(BUTLED_M3) && !but_released(BUTLED_SAVE)) {
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f7fd fe5e 	bl	8000850 <but_released>
 8002b94:	2800      	cmp	r0, #0
 8002b96:	d10b      	bne.n	8002bb0 <tick_but_command+0xa4>
		if(but_released(i)) {command_issued = 1;}
 8002b98:	2501      	movs	r5, #1
 8002b9a:	0020      	movs	r0, r4
 8002b9c:	f7fd fe58 	bl	8000850 <but_released>
 8002ba0:	2800      	cmp	r0, #0
 8002ba2:	d000      	beq.n	8002ba6 <tick_but_command+0x9a>
 8002ba4:	7035      	strb	r5, [r6, #0]
	for(uint8_t i = 0; i < 5; i++) {
 8002ba6:	3401      	adds	r4, #1
 8002ba8:	b2e4      	uxtb	r4, r4
 8002baa:	2c05      	cmp	r4, #5
 8002bac:	d1f5      	bne.n	8002b9a <tick_but_command+0x8e>
 8002bae:	e7c4      	b.n	8002b3a <tick_but_command+0x2e>
	if(but_released(BUTLED_DRONE) && !but_check(BUTLED_DRONE) && !but_check(BUTLED_M1) && !but_check(BUTLED_M2) && !but_check(BUTLED_M3) && !but_released(BUTLED_SAVE)) {
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f7fd fdd5 	bl	8000760 <but_check>
 8002bb6:	2800      	cmp	r0, #0
 8002bb8:	d1ee      	bne.n	8002b98 <tick_but_command+0x8c>
 8002bba:	3002      	adds	r0, #2
 8002bbc:	f7fd fdd0 	bl	8000760 <but_check>
 8002bc0:	2800      	cmp	r0, #0
 8002bc2:	d1e9      	bne.n	8002b98 <tick_but_command+0x8c>
 8002bc4:	3003      	adds	r0, #3
 8002bc6:	f7fd fdcb 	bl	8000760 <but_check>
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	d1e4      	bne.n	8002b98 <tick_but_command+0x8c>
 8002bce:	3004      	adds	r0, #4
 8002bd0:	f7fd fdc6 	bl	8000760 <but_check>
 8002bd4:	2800      	cmp	r0, #0
 8002bd6:	d1df      	bne.n	8002b98 <tick_but_command+0x8c>
 8002bd8:	3001      	adds	r0, #1
 8002bda:	f7fd fe39 	bl	8000850 <but_released>
 8002bde:	2800      	cmp	r0, #0
 8002be0:	d1da      	bne.n	8002b98 <tick_but_command+0x8c>
		command_issued = 1;
 8002be2:	2301      	movs	r3, #1
 8002be4:	7033      	strb	r3, [r6, #0]
		if (all_released) {
 8002be6:	2d00      	cmp	r5, #0
 8002be8:	d0a7      	beq.n	8002b3a <tick_but_command+0x2e>
			if(!command_ignore) {
 8002bea:	4b8b      	ldr	r3, [pc, #556]	; (8002e18 <tick_but_command+0x30c>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1a3      	bne.n	8002b3a <tick_but_command+0x2e>
				_synth_drone = !_synth_drone;
 8002bf2:	4a8a      	ldr	r2, [pc, #552]	; (8002e1c <tick_but_command+0x310>)
 8002bf4:	7813      	ldrb	r3, [r2, #0]
 8002bf6:	4259      	negs	r1, r3
 8002bf8:	414b      	adcs	r3, r1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	7013      	strb	r3, [r2, #0]
 8002bfe:	e79c      	b.n	8002b3a <tick_but_command+0x2e>
		(but_released(BUTLED_M2) && !but_released(BUTLED_M1) && !but_released(BUTLED_M3) && !but_check(BUTLED_M1) && !but_check(BUTLED_M3)) ||
 8002c00:	3004      	adds	r0, #4
 8002c02:	f7fd fe25 	bl	8000850 <but_released>
 8002c06:	2800      	cmp	r0, #0
 8002c08:	d1ac      	bne.n	8002b64 <tick_but_command+0x58>
 8002c0a:	3002      	adds	r0, #2
 8002c0c:	f7fd fda8 	bl	8000760 <but_check>
 8002c10:	2800      	cmp	r0, #0
 8002c12:	d1a7      	bne.n	8002b64 <tick_but_command+0x58>
 8002c14:	3004      	adds	r0, #4
 8002c16:	f7fd fda3 	bl	8000760 <but_check>
 8002c1a:	2800      	cmp	r0, #0
 8002c1c:	d1a2      	bne.n	8002b64 <tick_but_command+0x58>
 8002c1e:	e01e      	b.n	8002c5e <tick_but_command+0x152>
	if(	(but_released(BUTLED_M1) && !but_released(BUTLED_M2) && !but_released(BUTLED_M3) && !but_check(BUTLED_M2) && !but_check(BUTLED_M3)) ||
 8002c20:	3004      	adds	r0, #4
 8002c22:	f7fd fe15 	bl	8000850 <but_released>
 8002c26:	2800      	cmp	r0, #0
 8002c28:	d192      	bne.n	8002b50 <tick_but_command+0x44>
 8002c2a:	3003      	adds	r0, #3
 8002c2c:	f7fd fd98 	bl	8000760 <but_check>
 8002c30:	2800      	cmp	r0, #0
 8002c32:	d18d      	bne.n	8002b50 <tick_but_command+0x44>
 8002c34:	3004      	adds	r0, #4
 8002c36:	f7fd fd93 	bl	8000760 <but_check>
 8002c3a:	2800      	cmp	r0, #0
 8002c3c:	d188      	bne.n	8002b50 <tick_but_command+0x44>
 8002c3e:	e00e      	b.n	8002c5e <tick_but_command+0x152>
		(but_released(BUTLED_M3) && !but_released(BUTLED_M2) && !but_released(BUTLED_M1) && !but_check(BUTLED_M2) && !but_check(BUTLED_M1)))
 8002c40:	3002      	adds	r0, #2
 8002c42:	f7fd fe05 	bl	8000850 <but_released>
 8002c46:	2800      	cmp	r0, #0
 8002c48:	d196      	bne.n	8002b78 <tick_but_command+0x6c>
 8002c4a:	3003      	adds	r0, #3
 8002c4c:	f7fd fd88 	bl	8000760 <but_check>
 8002c50:	2800      	cmp	r0, #0
 8002c52:	d191      	bne.n	8002b78 <tick_but_command+0x6c>
 8002c54:	3002      	adds	r0, #2
 8002c56:	f7fd fd83 	bl	8000760 <but_check>
 8002c5a:	2800      	cmp	r0, #0
 8002c5c:	d18c      	bne.n	8002b78 <tick_but_command+0x6c>
		command_issued = 1;
 8002c5e:	2401      	movs	r4, #1
		if(but_check(BUTLED_DRONE) && but_check(BUTLED_SAVE)) {
 8002c60:	2000      	movs	r0, #0
		command_issued = 1;
 8002c62:	7034      	strb	r4, [r6, #0]
		if(but_check(BUTLED_DRONE) && but_check(BUTLED_SAVE)) {
 8002c64:	f7fd fd7c 	bl	8000760 <but_check>
 8002c68:	2800      	cmp	r0, #0
 8002c6a:	d004      	beq.n	8002c76 <tick_but_command+0x16a>
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	f7fd fd77 	bl	8000760 <but_check>
 8002c72:	2800      	cmp	r0, #0
 8002c74:	d163      	bne.n	8002d3e <tick_but_command+0x232>
		} else if (but_check(BUTLED_SAVE)) {
 8002c76:	2001      	movs	r0, #1
 8002c78:	f7fd fd72 	bl	8000760 <but_check>
 8002c7c:	2800      	cmp	r0, #0
 8002c7e:	d047      	beq.n	8002d10 <tick_but_command+0x204>
			if(but_released(BUTLED_M1)) {
 8002c80:	2002      	movs	r0, #2
 8002c82:	f7fd fde5 	bl	8000850 <but_released>
 8002c86:	2800      	cmp	r0, #0
 8002c88:	d06f      	beq.n	8002d6a <tick_but_command+0x25e>
				if(!command_ignore) {
 8002c8a:	4b63      	ldr	r3, [pc, #396]	; (8002e18 <tick_but_command+0x30c>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d000      	beq.n	8002c94 <tick_but_command+0x188>
 8002c92:	e752      	b.n	8002b3a <tick_but_command+0x2e>
					synth_save_preset(0);
 8002c94:	2000      	movs	r0, #0
 8002c96:	f7ff f875 	bl	8001d84 <synth_save_preset>
					butled_animation = BUTLED_ANIM_SAVE | BUTLED_ANIM_M1;
 8002c9a:	2206      	movs	r2, #6
 8002c9c:	4b60      	ldr	r3, [pc, #384]	; (8002e20 <tick_but_command+0x314>)
 8002c9e:	701a      	strb	r2, [r3, #0]
					butled_timer = 500;
 8002ca0:	4b60      	ldr	r3, [pc, #384]	; (8002e24 <tick_but_command+0x318>)
 8002ca2:	32ef      	adds	r2, #239	; 0xef
 8002ca4:	32ff      	adds	r2, #255	; 0xff
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	e747      	b.n	8002b3a <tick_but_command+0x2e>
	if(but_released(BUTLED_SAVE) && !but_check(BUTLED_DRONE) && !but_check(BUTLED_M1) && !but_check(BUTLED_M2) && !but_check(BUTLED_M3) && !but_released(BUTLED_DRONE)) {
 8002caa:	3002      	adds	r0, #2
 8002cac:	f7fd fd58 	bl	8000760 <but_check>
 8002cb0:	2800      	cmp	r0, #0
 8002cb2:	d000      	beq.n	8002cb6 <tick_but_command+0x1aa>
 8002cb4:	e76b      	b.n	8002b8e <tick_but_command+0x82>
 8002cb6:	3003      	adds	r0, #3
 8002cb8:	f7fd fd52 	bl	8000760 <but_check>
 8002cbc:	2800      	cmp	r0, #0
 8002cbe:	d000      	beq.n	8002cc2 <tick_but_command+0x1b6>
 8002cc0:	e765      	b.n	8002b8e <tick_but_command+0x82>
 8002cc2:	3004      	adds	r0, #4
 8002cc4:	f7fd fd4c 	bl	8000760 <but_check>
 8002cc8:	2800      	cmp	r0, #0
 8002cca:	d000      	beq.n	8002cce <tick_but_command+0x1c2>
 8002ccc:	e75f      	b.n	8002b8e <tick_but_command+0x82>
 8002cce:	f7fd fdbf 	bl	8000850 <but_released>
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	d000      	beq.n	8002cd8 <tick_but_command+0x1cc>
 8002cd6:	e75a      	b.n	8002b8e <tick_but_command+0x82>
		command_issued = 1;
 8002cd8:	2401      	movs	r4, #1
 8002cda:	7034      	strb	r4, [r6, #0]
		if(all_released) {
 8002cdc:	2d00      	cmp	r5, #0
 8002cde:	d100      	bne.n	8002ce2 <tick_but_command+0x1d6>
 8002ce0:	e72b      	b.n	8002b3a <tick_but_command+0x2e>
			if(!command_ignore) {
 8002ce2:	4b4d      	ldr	r3, [pc, #308]	; (8002e18 <tick_but_command+0x30c>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d000      	beq.n	8002cec <tick_but_command+0x1e0>
 8002cea:	e726      	b.n	8002b3a <tick_but_command+0x2e>
				synth_save_preset(3);
 8002cec:	3003      	adds	r0, #3
 8002cee:	f7ff f849 	bl	8001d84 <synth_save_preset>
				eeprom_write8(EEPROM_HAS_PRESET3, 1);
 8002cf2:	0021      	movs	r1, r4
 8002cf4:	20c3      	movs	r0, #195	; 0xc3
 8002cf6:	f7fd fe45 	bl	8000984 <eeprom_write8>
				_delayMs(30);
 8002cfa:	201e      	movs	r0, #30
 8002cfc:	f7fd fe0a 	bl	8000914 <_delayMs>
				butled_animation = BUTLED_ANIM_SAVE | BUTLED_ANIM_M1 | BUTLED_ANIM_M2 | BUTLED_ANIM_M3;
 8002d00:	221e      	movs	r2, #30
 8002d02:	4b47      	ldr	r3, [pc, #284]	; (8002e20 <tick_but_command+0x314>)
 8002d04:	701a      	strb	r2, [r3, #0]
				butled_timer = 500;
 8002d06:	4b47      	ldr	r3, [pc, #284]	; (8002e24 <tick_but_command+0x318>)
 8002d08:	32d7      	adds	r2, #215	; 0xd7
 8002d0a:	32ff      	adds	r2, #255	; 0xff
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	e714      	b.n	8002b3a <tick_but_command+0x2e>
		} else if (but_check(BUTLED_DRONE)) {
 8002d10:	2000      	movs	r0, #0
 8002d12:	f7fd fd25 	bl	8000760 <but_check>
 8002d16:	2800      	cmp	r0, #0
 8002d18:	d000      	beq.n	8002d1c <tick_but_command+0x210>
 8002d1a:	e70e      	b.n	8002b3a <tick_but_command+0x2e>
			if(but_released(BUTLED_M1)) {
 8002d1c:	3002      	adds	r0, #2
 8002d1e:	f7fd fd97 	bl	8000850 <but_released>
 8002d22:	2800      	cmp	r0, #0
 8002d24:	d036      	beq.n	8002d94 <tick_but_command+0x288>
				if(!command_ignore) {
 8002d26:	4b3c      	ldr	r3, [pc, #240]	; (8002e18 <tick_but_command+0x30c>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	b2dc      	uxtb	r4, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d000      	beq.n	8002d32 <tick_but_command+0x226>
 8002d30:	e703      	b.n	8002b3a <tick_but_command+0x2e>
					synth_load_preset(0);
 8002d32:	0020      	movs	r0, r4
 8002d34:	f7fe ff6a 	bl	8001c0c <synth_load_preset>
					last_preset = 0;
 8002d38:	4b3b      	ldr	r3, [pc, #236]	; (8002e28 <tick_but_command+0x31c>)
 8002d3a:	701c      	strb	r4, [r3, #0]
 8002d3c:	e6fd      	b.n	8002b3a <tick_but_command+0x2e>
			if(but_released(BUTLED_M1)) {
 8002d3e:	2002      	movs	r0, #2
 8002d40:	f7fd fd86 	bl	8000850 <but_released>
 8002d44:	2800      	cmp	r0, #0
 8002d46:	d053      	beq.n	8002df0 <tick_but_command+0x2e4>
				if      (_midi_own_channel == 0xFF) {_midi_own_channel = 0;}
 8002d48:	4b38      	ldr	r3, [pc, #224]	; (8002e2c <tick_but_command+0x320>)
 8002d4a:	781a      	ldrb	r2, [r3, #0]
 8002d4c:	2aff      	cmp	r2, #255	; 0xff
 8002d4e:	d032      	beq.n	8002db6 <tick_but_command+0x2aa>
				else if (_midi_own_channel == 0) {_midi_own_channel = 1;}
 8002d50:	781a      	ldrb	r2, [r3, #0]
 8002d52:	2a00      	cmp	r2, #0
 8002d54:	d132      	bne.n	8002dbc <tick_but_command+0x2b0>
 8002d56:	701c      	strb	r4, [r3, #0]
				eeprom_write8(EEPROM_MIDI_CHAN, _midi_own_channel);
 8002d58:	7819      	ldrb	r1, [r3, #0]
 8002d5a:	20c2      	movs	r0, #194	; 0xc2
 8002d5c:	b2c9      	uxtb	r1, r1
 8002d5e:	f7fd fe11 	bl	8000984 <eeprom_write8>
				_delayMs(30);
 8002d62:	201e      	movs	r0, #30
 8002d64:	f7fd fdd6 	bl	8000914 <_delayMs>
 8002d68:	e6e7      	b.n	8002b3a <tick_but_command+0x2e>
			} else if (but_released(BUTLED_M2)) {
 8002d6a:	2003      	movs	r0, #3
 8002d6c:	f7fd fd70 	bl	8000850 <but_released>
 8002d70:	2800      	cmp	r0, #0
 8002d72:	d027      	beq.n	8002dc4 <tick_but_command+0x2b8>
				if(!command_ignore) {
 8002d74:	4b28      	ldr	r3, [pc, #160]	; (8002e18 <tick_but_command+0x30c>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d000      	beq.n	8002d7e <tick_but_command+0x272>
 8002d7c:	e6dd      	b.n	8002b3a <tick_but_command+0x2e>
					synth_save_preset(1);
 8002d7e:	2001      	movs	r0, #1
 8002d80:	f7ff f800 	bl	8001d84 <synth_save_preset>
					butled_animation = BUTLED_ANIM_SAVE | BUTLED_ANIM_M2;
 8002d84:	220a      	movs	r2, #10
 8002d86:	4b26      	ldr	r3, [pc, #152]	; (8002e20 <tick_but_command+0x314>)
 8002d88:	701a      	strb	r2, [r3, #0]
					butled_timer = 500;
 8002d8a:	4b26      	ldr	r3, [pc, #152]	; (8002e24 <tick_but_command+0x318>)
 8002d8c:	32eb      	adds	r2, #235	; 0xeb
 8002d8e:	32ff      	adds	r2, #255	; 0xff
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	e6d2      	b.n	8002b3a <tick_but_command+0x2e>
			} else if (but_released(BUTLED_M2)) {
 8002d94:	2003      	movs	r0, #3
 8002d96:	f7fd fd5b 	bl	8000850 <but_released>
 8002d9a:	2800      	cmp	r0, #0
 8002d9c:	d04a      	beq.n	8002e34 <tick_but_command+0x328>
				if(!command_ignore) {
 8002d9e:	4b1e      	ldr	r3, [pc, #120]	; (8002e18 <tick_but_command+0x30c>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d000      	beq.n	8002da8 <tick_but_command+0x29c>
 8002da6:	e6c8      	b.n	8002b3a <tick_but_command+0x2e>
					synth_load_preset(1);
 8002da8:	2001      	movs	r0, #1
 8002daa:	f7fe ff2f 	bl	8001c0c <synth_load_preset>
					last_preset = 1;
 8002dae:	2201      	movs	r2, #1
 8002db0:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <tick_but_command+0x31c>)
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	e6c1      	b.n	8002b3a <tick_but_command+0x2e>
				if      (_midi_own_channel == 0xFF) {_midi_own_channel = 0;}
 8002db6:	2200      	movs	r2, #0
 8002db8:	701a      	strb	r2, [r3, #0]
 8002dba:	e7cd      	b.n	8002d58 <tick_but_command+0x24c>
				else if (_midi_own_channel == 1) {_midi_own_channel = 0xFF;}
 8002dbc:	781a      	ldrb	r2, [r3, #0]
				else {_midi_own_channel = 0xFF;}
 8002dbe:	22ff      	movs	r2, #255	; 0xff
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	e7c9      	b.n	8002d58 <tick_but_command+0x24c>
			} else if (but_released(BUTLED_M3)) {
 8002dc4:	2004      	movs	r0, #4
 8002dc6:	f7fd fd43 	bl	8000850 <but_released>
 8002dca:	2800      	cmp	r0, #0
 8002dcc:	d100      	bne.n	8002dd0 <tick_but_command+0x2c4>
 8002dce:	e6b4      	b.n	8002b3a <tick_but_command+0x2e>
				if(!command_ignore) {
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <tick_but_command+0x30c>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d000      	beq.n	8002dda <tick_but_command+0x2ce>
 8002dd8:	e6af      	b.n	8002b3a <tick_but_command+0x2e>
					synth_save_preset(2);
 8002dda:	2002      	movs	r0, #2
 8002ddc:	f7fe ffd2 	bl	8001d84 <synth_save_preset>
					butled_animation = BUTLED_ANIM_SAVE | BUTLED_ANIM_M3;
 8002de0:	2212      	movs	r2, #18
 8002de2:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <tick_but_command+0x314>)
 8002de4:	701a      	strb	r2, [r3, #0]
					butled_timer = 500;
 8002de6:	4b0f      	ldr	r3, [pc, #60]	; (8002e24 <tick_but_command+0x318>)
 8002de8:	32e3      	adds	r2, #227	; 0xe3
 8002dea:	32ff      	adds	r2, #255	; 0xff
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	e6a4      	b.n	8002b3a <tick_but_command+0x2e>
			} else if (but_released(BUTLED_M2)) {
 8002df0:	2003      	movs	r0, #3
 8002df2:	f7fd fd2d 	bl	8000850 <but_released>
 8002df6:	2800      	cmp	r0, #0
 8002df8:	d02e      	beq.n	8002e58 <tick_but_command+0x34c>
				if(!command_ignore) {
 8002dfa:	4b07      	ldr	r3, [pc, #28]	; (8002e18 <tick_but_command+0x30c>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d000      	beq.n	8002e04 <tick_but_command+0x2f8>
 8002e02:	e69a      	b.n	8002b3a <tick_but_command+0x2e>
					_synth_midisync = !_synth_midisync;
 8002e04:	4a0a      	ldr	r2, [pc, #40]	; (8002e30 <tick_but_command+0x324>)
 8002e06:	7813      	ldrb	r3, [r2, #0]
 8002e08:	4259      	negs	r1, r3
 8002e0a:	414b      	adcs	r3, r1
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	7013      	strb	r3, [r2, #0]
 8002e10:	e693      	b.n	8002b3a <tick_but_command+0x2e>
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	200001a5 	.word	0x200001a5
 8002e18:	200001a4 	.word	0x200001a4
 8002e1c:	2000002a 	.word	0x2000002a
 8002e20:	2000019c 	.word	0x2000019c
 8002e24:	200001a0 	.word	0x200001a0
 8002e28:	2000011c 	.word	0x2000011c
 8002e2c:	20000029 	.word	0x20000029
 8002e30:	2000019a 	.word	0x2000019a
			} else if (but_released(BUTLED_M3)) {
 8002e34:	2004      	movs	r0, #4
 8002e36:	f7fd fd0b 	bl	8000850 <but_released>
 8002e3a:	2800      	cmp	r0, #0
 8002e3c:	d100      	bne.n	8002e40 <tick_but_command+0x334>
 8002e3e:	e67c      	b.n	8002b3a <tick_but_command+0x2e>
				if(!command_ignore) {
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <tick_but_command+0x37c>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d000      	beq.n	8002e4a <tick_but_command+0x33e>
 8002e48:	e677      	b.n	8002b3a <tick_but_command+0x2e>
					synth_load_preset(2);
 8002e4a:	2002      	movs	r0, #2
 8002e4c:	f7fe fede 	bl	8001c0c <synth_load_preset>
					last_preset = 2;
 8002e50:	2202      	movs	r2, #2
 8002e52:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <tick_but_command+0x380>)
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	e670      	b.n	8002b3a <tick_but_command+0x2e>
			} else if (but_released(BUTLED_M3)) {
 8002e58:	2004      	movs	r0, #4
 8002e5a:	f7fd fcf9 	bl	8000850 <but_released>
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	d100      	bne.n	8002e64 <tick_but_command+0x358>
 8002e62:	e66a      	b.n	8002b3a <tick_but_command+0x2e>
				if(!command_ignore) {
 8002e64:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <tick_but_command+0x37c>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d000      	beq.n	8002e6e <tick_but_command+0x362>
 8002e6c:	e665      	b.n	8002b3a <tick_but_command+0x2e>
					lfo_panic();
 8002e6e:	f7fe f9b7 	bl	80011e0 <lfo_panic>
					midi_panic();
 8002e72:	f7fe fd59 	bl	8001928 <midi_panic>
					butled_animation = 0b11111;
 8002e76:	221f      	movs	r2, #31
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <tick_but_command+0x384>)
 8002e7a:	701a      	strb	r2, [r3, #0]
					butled_timer = 500;
 8002e7c:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <tick_but_command+0x388>)
 8002e7e:	32d6      	adds	r2, #214	; 0xd6
 8002e80:	32ff      	adds	r2, #255	; 0xff
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	e659      	b.n	8002b3a <tick_but_command+0x2e>
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	200001a4 	.word	0x200001a4
 8002e8c:	2000011c 	.word	0x2000011c
 8002e90:	2000019c 	.word	0x2000019c
 8002e94:	200001a0 	.word	0x200001a0

08002e98 <TIM17_IRQHandler>:


void TIM17_IRQHandler() {
 8002e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	but_update();
 8002e9a:	f7fd fc71 	bl	8000780 <but_update>

	if(!midi_is_connected() && prev_midi_in) {
 8002e9e:	f7fe fbf3 	bl	8001688 <midi_is_connected>
 8002ea2:	4c98      	ldr	r4, [pc, #608]	; (8003104 <TIM17_IRQHandler+0x26c>)
 8002ea4:	2800      	cmp	r0, #0
 8002ea6:	d103      	bne.n	8002eb0 <TIM17_IRQHandler+0x18>
 8002ea8:	7823      	ldrb	r3, [r4, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d000      	beq.n	8002eb0 <TIM17_IRQHandler+0x18>
 8002eae:	e0c1      	b.n	8003034 <TIM17_IRQHandler+0x19c>
		midi_reset();
	} else if (midi_is_connected() && !prev_midi_in) {
 8002eb0:	f7fe fbea 	bl	8001688 <midi_is_connected>
 8002eb4:	2800      	cmp	r0, #0
 8002eb6:	d000      	beq.n	8002eba <TIM17_IRQHandler+0x22>
 8002eb8:	e0b8      	b.n	800302c <TIM17_IRQHandler+0x194>
		midi_reset();
	}
	prev_midi_in = midi_is_connected();
 8002eba:	f7fe fbe5 	bl	8001688 <midi_is_connected>


	if(pwmled_timer > 0) {
 8002ebe:	4992      	ldr	r1, [pc, #584]	; (8003108 <TIM17_IRQHandler+0x270>)
	prev_midi_in = midi_is_connected();
 8002ec0:	7020      	strb	r0, [r4, #0]
	if(pwmled_timer > 0) {
 8002ec2:	680b      	ldr	r3, [r1, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d072      	beq.n	8002fae <TIM17_IRQHandler+0x116>
		for(uint8_t i = 0; i < 6; i++) {*PWM_LEDS[i] = 0;}
 8002ec8:	2300      	movs	r3, #0
 8002eca:	4a90      	ldr	r2, [pc, #576]	; (800310c <TIM17_IRQHandler+0x274>)
		for(uint8_t i = 0; i < 6; i++) {
			*PWM_LEDS[i] = (2048 + lfoValue[i]) >> 2;
		}
	}

	if(butled_timer > 0) {
 8002ecc:	4d90      	ldr	r5, [pc, #576]	; (8003110 <TIM17_IRQHandler+0x278>)
		for(uint8_t i = 0; i < 6; i++) {*PWM_LEDS[i] = 0;}
 8002ece:	6810      	ldr	r0, [r2, #0]
 8002ed0:	6003      	str	r3, [r0, #0]
 8002ed2:	6850      	ldr	r0, [r2, #4]
 8002ed4:	6003      	str	r3, [r0, #0]
 8002ed6:	6890      	ldr	r0, [r2, #8]
 8002ed8:	6003      	str	r3, [r0, #0]
 8002eda:	68d0      	ldr	r0, [r2, #12]
 8002edc:	6003      	str	r3, [r0, #0]
 8002ede:	6910      	ldr	r0, [r2, #16]
 8002ee0:	6003      	str	r3, [r0, #0]
 8002ee2:	6950      	ldr	r0, [r2, #20]
 8002ee4:	6003      	str	r3, [r0, #0]
		*PWM_LEDS[_lfo_target] = ((pwmled_timer >> 6) & 0b1) == 0 ? 1023 : 0;
 8002ee6:	680b      	ldr	r3, [r1, #0]
 8002ee8:	488a      	ldr	r0, [pc, #552]	; (8003114 <TIM17_IRQHandler+0x27c>)
 8002eea:	065b      	lsls	r3, r3, #25
 8002eec:	7800      	ldrb	r0, [r0, #0]
 8002eee:	0fdb      	lsrs	r3, r3, #31
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	0080      	lsls	r0, r0, #2
 8002ef4:	5812      	ldr	r2, [r2, r0]
 8002ef6:	059b      	lsls	r3, r3, #22
 8002ef8:	0d9b      	lsrs	r3, r3, #22
 8002efa:	6013      	str	r3, [r2, #0]
		pwmled_timer--;
 8002efc:	680b      	ldr	r3, [r1, #0]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	600b      	str	r3, [r1, #0]
	if(butled_timer > 0) {
 8002f02:	682b      	ldr	r3, [r5, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d100      	bne.n	8002f0a <TIM17_IRQHandler+0x72>
 8002f08:	e07f      	b.n	800300a <TIM17_IRQHandler+0x172>
		uint8_t flash = ((butled_timer >> 6) & 0b1) == 0 ? 1 : 0;
 8002f0a:	682b      	ldr	r3, [r5, #0]
 8002f0c:	065b      	lsls	r3, r3, #25
 8002f0e:	0fdc      	lsrs	r4, r3, #31
		for(uint8_t i = 0; i < 5; i++) {
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	da00      	bge.n	8002f16 <TIM17_IRQHandler+0x7e>
 8002f14:	e0b3      	b.n	800307e <TIM17_IRQHandler+0x1e6>
			if (flash && (butled_animation & (0b1 << i))) {butled_on(i);}
 8002f16:	2601      	movs	r6, #1
 8002f18:	4f7f      	ldr	r7, [pc, #508]	; (8003118 <TIM17_IRQHandler+0x280>)
 8002f1a:	783b      	ldrb	r3, [r7, #0]
 8002f1c:	b2e0      	uxtb	r0, r4
 8002f1e:	4123      	asrs	r3, r4
 8002f20:	421e      	tst	r6, r3
 8002f22:	d000      	beq.n	8002f26 <TIM17_IRQHandler+0x8e>
 8002f24:	e089      	b.n	800303a <TIM17_IRQHandler+0x1a2>
			else {butled_off(i);}
 8002f26:	f7fd fc0d 	bl	8000744 <butled_off>
		for(uint8_t i = 0; i < 5; i++) {
 8002f2a:	3401      	adds	r4, #1
 8002f2c:	2c05      	cmp	r4, #5
 8002f2e:	d1f4      	bne.n	8002f1a <TIM17_IRQHandler+0x82>
		}
		command_ignore = 1;
 8002f30:	2201      	movs	r2, #1
 8002f32:	4b7a      	ldr	r3, [pc, #488]	; (800311c <TIM17_IRQHandler+0x284>)
 8002f34:	701a      	strb	r2, [r3, #0]
		butled_timer--;
 8002f36:	682b      	ldr	r3, [r5, #0]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	602b      	str	r3, [r5, #0]
	} else {
		command_ignore = 0;
	}

	tick_but_command();
 8002f3c:	f7ff fde6 	bl	8002b0c <tick_but_command>


	if(butled_timer == 0) {
 8002f40:	682b      	ldr	r3, [r5, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d168      	bne.n	8003018 <TIM17_IRQHandler+0x180>
		if(but_check(BUTLED_DRONE) && but_check(BUTLED_SAVE)) {
 8002f46:	2000      	movs	r0, #0
 8002f48:	f7fd fc0a 	bl	8000760 <but_check>
 8002f4c:	2800      	cmp	r0, #0
 8002f4e:	d100      	bne.n	8002f52 <TIM17_IRQHandler+0xba>
 8002f50:	e076      	b.n	8003040 <TIM17_IRQHandler+0x1a8>
 8002f52:	2001      	movs	r0, #1
 8002f54:	f7fd fc04 	bl	8000760 <but_check>
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d100      	bne.n	8002f5e <TIM17_IRQHandler+0xc6>
 8002f5c:	e070      	b.n	8003040 <TIM17_IRQHandler+0x1a8>
			butled_on(BUTLED_DRONE);
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f7fd fbe2 	bl	8000728 <butled_on>
			butled_on(BUTLED_SAVE);
 8002f64:	2001      	movs	r0, #1
 8002f66:	f7fd fbdf 	bl	8000728 <butled_on>
			if(midi_is_connected()) {butled_on(BUTLED_M3);}
 8002f6a:	f7fe fb8d 	bl	8001688 <midi_is_connected>
 8002f6e:	2800      	cmp	r0, #0
 8002f70:	d000      	beq.n	8002f74 <TIM17_IRQHandler+0xdc>
 8002f72:	e0b1      	b.n	80030d8 <TIM17_IRQHandler+0x240>
			else {butled_off(BUTLED_M3);}
 8002f74:	2004      	movs	r0, #4
 8002f76:	f7fd fbe5 	bl	8000744 <butled_off>

			midi_chan_blink += 1;
 8002f7a:	4a69      	ldr	r2, [pc, #420]	; (8003120 <TIM17_IRQHandler+0x288>)
 8002f7c:	8813      	ldrh	r3, [r2, #0]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	8013      	strh	r3, [r2, #0]

			if(_midi_own_channel == 0xFF) {
 8002f84:	4b67      	ldr	r3, [pc, #412]	; (8003124 <TIM17_IRQHandler+0x28c>)
 8002f86:	7819      	ldrb	r1, [r3, #0]
 8002f88:	29ff      	cmp	r1, #255	; 0xff
 8002f8a:	d100      	bne.n	8002f8e <TIM17_IRQHandler+0xf6>
 8002f8c:	e0b2      	b.n	80030f4 <TIM17_IRQHandler+0x25c>
				if((midi_chan_blink >> 6) & 0b1) {butled_on(BUTLED_M1);}
				else {butled_off(BUTLED_M1);}
			} else if (_midi_own_channel == 0) {butled_off(BUTLED_M1);}
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d000      	beq.n	8002f96 <TIM17_IRQHandler+0xfe>
 8002f94:	e0b2      	b.n	80030fc <TIM17_IRQHandler+0x264>
				else {butled_off(BUTLED_M1);}
 8002f96:	2002      	movs	r0, #2
 8002f98:	f7fd fbd4 	bl	8000744 <butled_off>
			else {butled_on(BUTLED_M1);}

			if(_synth_midisync) {butled_on(BUTLED_M2);}
 8002f9c:	4b62      	ldr	r3, [pc, #392]	; (8003128 <TIM17_IRQHandler+0x290>)
 8002f9e:	2003      	movs	r0, #3
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d100      	bne.n	8002fa8 <TIM17_IRQHandler+0x110>
 8002fa6:	e094      	b.n	80030d2 <TIM17_IRQHandler+0x23a>
			else {butled_off(BUTLED_DRONE);}

			if(last_preset != 0xFF) {
				if(last_preset == 0) {butled_on(BUTLED_M1); butled_off(BUTLED_M2); butled_off(BUTLED_M3);}
				else if (last_preset == 1) {butled_off(BUTLED_M1); butled_on(BUTLED_M2); butled_off(BUTLED_M3);}
				else if (last_preset == 2) {butled_off(BUTLED_M1); butled_off(BUTLED_M2); butled_on(BUTLED_M3);}
 8002fa8:	f7fd fbbe 	bl	8000728 <butled_on>
 8002fac:	e034      	b.n	8003018 <TIM17_IRQHandler+0x180>
			*PWM_LEDS[i] = (2048 + lfoValue[i]) >> 2;
 8002fae:	2480      	movs	r4, #128	; 0x80
 8002fb0:	0124      	lsls	r4, r4, #4
 8002fb2:	46a4      	mov	ip, r4
 8002fb4:	495d      	ldr	r1, [pc, #372]	; (800312c <TIM17_IRQHandler+0x294>)
 8002fb6:	4a55      	ldr	r2, [pc, #340]	; (800310c <TIM17_IRQHandler+0x274>)
 8002fb8:	880b      	ldrh	r3, [r1, #0]
 8002fba:	6810      	ldr	r0, [r2, #0]
 8002fbc:	b21b      	sxth	r3, r3
 8002fbe:	4463      	add	r3, ip
 8002fc0:	109b      	asrs	r3, r3, #2
 8002fc2:	6003      	str	r3, [r0, #0]
 8002fc4:	884b      	ldrh	r3, [r1, #2]
 8002fc6:	6850      	ldr	r0, [r2, #4]
 8002fc8:	b21b      	sxth	r3, r3
 8002fca:	4463      	add	r3, ip
 8002fcc:	109b      	asrs	r3, r3, #2
 8002fce:	6003      	str	r3, [r0, #0]
 8002fd0:	888b      	ldrh	r3, [r1, #4]
 8002fd2:	6890      	ldr	r0, [r2, #8]
 8002fd4:	b21b      	sxth	r3, r3
 8002fd6:	4463      	add	r3, ip
 8002fd8:	109b      	asrs	r3, r3, #2
 8002fda:	6003      	str	r3, [r0, #0]
 8002fdc:	88cb      	ldrh	r3, [r1, #6]
 8002fde:	68d0      	ldr	r0, [r2, #12]
 8002fe0:	b21b      	sxth	r3, r3
 8002fe2:	4463      	add	r3, ip
 8002fe4:	109b      	asrs	r3, r3, #2
 8002fe6:	6003      	str	r3, [r0, #0]
 8002fe8:	890b      	ldrh	r3, [r1, #8]
 8002fea:	6910      	ldr	r0, [r2, #16]
 8002fec:	b21b      	sxth	r3, r3
 8002fee:	4463      	add	r3, ip
 8002ff0:	109b      	asrs	r3, r3, #2
 8002ff2:	6003      	str	r3, [r0, #0]
 8002ff4:	894b      	ldrh	r3, [r1, #10]
 8002ff6:	6952      	ldr	r2, [r2, #20]
 8002ff8:	b21b      	sxth	r3, r3
 8002ffa:	4463      	add	r3, ip
 8002ffc:	109b      	asrs	r3, r3, #2
	if(butled_timer > 0) {
 8002ffe:	4d44      	ldr	r5, [pc, #272]	; (8003110 <TIM17_IRQHandler+0x278>)
			*PWM_LEDS[i] = (2048 + lfoValue[i]) >> 2;
 8003000:	6013      	str	r3, [r2, #0]
	if(butled_timer > 0) {
 8003002:	682b      	ldr	r3, [r5, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d000      	beq.n	800300a <TIM17_IRQHandler+0x172>
 8003008:	e77f      	b.n	8002f0a <TIM17_IRQHandler+0x72>
		command_ignore = 0;
 800300a:	4a44      	ldr	r2, [pc, #272]	; (800311c <TIM17_IRQHandler+0x284>)
 800300c:	7013      	strb	r3, [r2, #0]
	tick_but_command();
 800300e:	f7ff fd7d 	bl	8002b0c <tick_but_command>
	if(butled_timer == 0) {
 8003012:	682b      	ldr	r3, [r5, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d096      	beq.n	8002f46 <TIM17_IRQHandler+0xae>
				butled_off(BUTLED_M3);
			}
		}
	}

	synth_update();
 8003018:	f7fe ff3e 	bl	8001e98 <synth_update>
	lfo_update();
 800301c:	f7fd feb8 	bl	8000d90 <lfo_update>


	TIM17->SR &= ~TIM_SR_UIF;
 8003020:	2101      	movs	r1, #1
 8003022:	4a43      	ldr	r2, [pc, #268]	; (8003130 <TIM17_IRQHandler+0x298>)
 8003024:	6913      	ldr	r3, [r2, #16]
 8003026:	438b      	bics	r3, r1
 8003028:	6113      	str	r3, [r2, #16]
}
 800302a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (midi_is_connected() && !prev_midi_in) {
 800302c:	7823      	ldrb	r3, [r4, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d000      	beq.n	8003034 <TIM17_IRQHandler+0x19c>
 8003032:	e742      	b.n	8002eba <TIM17_IRQHandler+0x22>
		midi_reset();
 8003034:	f7fe fc98 	bl	8001968 <midi_reset>
 8003038:	e73f      	b.n	8002eba <TIM17_IRQHandler+0x22>
			if (flash && (butled_animation & (0b1 << i))) {butled_on(i);}
 800303a:	f7fd fb75 	bl	8000728 <butled_on>
 800303e:	e774      	b.n	8002f2a <TIM17_IRQHandler+0x92>
			butled_off(BUTLED_SAVE);
 8003040:	2001      	movs	r0, #1
 8003042:	f7fd fb7f 	bl	8000744 <butled_off>
			if (_synth_drone) {butled_on(BUTLED_DRONE);}
 8003046:	4b3b      	ldr	r3, [pc, #236]	; (8003134 <TIM17_IRQHandler+0x29c>)
 8003048:	2000      	movs	r0, #0
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d12c      	bne.n	80030aa <TIM17_IRQHandler+0x212>
			else {butled_off(BUTLED_DRONE);}
 8003050:	f7fd fb78 	bl	8000744 <butled_off>
			if(last_preset != 0xFF) {
 8003054:	4b38      	ldr	r3, [pc, #224]	; (8003138 <TIM17_IRQHandler+0x2a0>)
 8003056:	781a      	ldrb	r2, [r3, #0]
 8003058:	2aff      	cmp	r2, #255	; 0xff
 800305a:	d033      	beq.n	80030c4 <TIM17_IRQHandler+0x22c>
				if(last_preset == 0) {butled_on(BUTLED_M1); butled_off(BUTLED_M2); butled_off(BUTLED_M3);}
 800305c:	781a      	ldrb	r2, [r3, #0]
 800305e:	2a00      	cmp	r2, #0
 8003060:	d026      	beq.n	80030b0 <TIM17_IRQHandler+0x218>
				else if (last_preset == 1) {butled_off(BUTLED_M1); butled_on(BUTLED_M2); butled_off(BUTLED_M3);}
 8003062:	781a      	ldrb	r2, [r3, #0]
 8003064:	2a01      	cmp	r2, #1
 8003066:	d03b      	beq.n	80030e0 <TIM17_IRQHandler+0x248>
				else if (last_preset == 2) {butled_off(BUTLED_M1); butled_off(BUTLED_M2); butled_on(BUTLED_M3);}
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d1d4      	bne.n	8003018 <TIM17_IRQHandler+0x180>
 800306e:	2002      	movs	r0, #2
 8003070:	f7fd fb68 	bl	8000744 <butled_off>
 8003074:	2003      	movs	r0, #3
 8003076:	f7fd fb65 	bl	8000744 <butled_off>
 800307a:	2004      	movs	r0, #4
 800307c:	e794      	b.n	8002fa8 <TIM17_IRQHandler+0x110>
			else {butled_off(i);}
 800307e:	2000      	movs	r0, #0
 8003080:	f7fd fb60 	bl	8000744 <butled_off>
 8003084:	2001      	movs	r0, #1
 8003086:	f7fd fb5d 	bl	8000744 <butled_off>
 800308a:	2002      	movs	r0, #2
 800308c:	f7fd fb5a 	bl	8000744 <butled_off>
 8003090:	2003      	movs	r0, #3
 8003092:	f7fd fb57 	bl	8000744 <butled_off>
 8003096:	2004      	movs	r0, #4
 8003098:	f7fd fb54 	bl	8000744 <butled_off>
		command_ignore = 1;
 800309c:	2201      	movs	r2, #1
 800309e:	4b1f      	ldr	r3, [pc, #124]	; (800311c <TIM17_IRQHandler+0x284>)
 80030a0:	701a      	strb	r2, [r3, #0]
		butled_timer--;
 80030a2:	682b      	ldr	r3, [r5, #0]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	602b      	str	r3, [r5, #0]
 80030a8:	e748      	b.n	8002f3c <TIM17_IRQHandler+0xa4>
			if (_synth_drone) {butled_on(BUTLED_DRONE);}
 80030aa:	f7fd fb3d 	bl	8000728 <butled_on>
 80030ae:	e7d1      	b.n	8003054 <TIM17_IRQHandler+0x1bc>
				if(last_preset == 0) {butled_on(BUTLED_M1); butled_off(BUTLED_M2); butled_off(BUTLED_M3);}
 80030b0:	2002      	movs	r0, #2
 80030b2:	f7fd fb39 	bl	8000728 <butled_on>
 80030b6:	2003      	movs	r0, #3
 80030b8:	f7fd fb44 	bl	8000744 <butled_off>
 80030bc:	2004      	movs	r0, #4
 80030be:	f7fd fb41 	bl	8000744 <butled_off>
 80030c2:	e7a9      	b.n	8003018 <TIM17_IRQHandler+0x180>
				butled_off(BUTLED_M1);
 80030c4:	2002      	movs	r0, #2
 80030c6:	f7fd fb3d 	bl	8000744 <butled_off>
				butled_off(BUTLED_M2);
 80030ca:	2003      	movs	r0, #3
 80030cc:	f7fd fb3a 	bl	8000744 <butled_off>
				butled_off(BUTLED_M3);
 80030d0:	2004      	movs	r0, #4
 80030d2:	f7fd fb37 	bl	8000744 <butled_off>
 80030d6:	e79f      	b.n	8003018 <TIM17_IRQHandler+0x180>
			if(midi_is_connected()) {butled_on(BUTLED_M3);}
 80030d8:	2004      	movs	r0, #4
 80030da:	f7fd fb25 	bl	8000728 <butled_on>
 80030de:	e74c      	b.n	8002f7a <TIM17_IRQHandler+0xe2>
				else if (last_preset == 1) {butled_off(BUTLED_M1); butled_on(BUTLED_M2); butled_off(BUTLED_M3);}
 80030e0:	2002      	movs	r0, #2
 80030e2:	f7fd fb2f 	bl	8000744 <butled_off>
 80030e6:	2003      	movs	r0, #3
 80030e8:	f7fd fb1e 	bl	8000728 <butled_on>
 80030ec:	2004      	movs	r0, #4
 80030ee:	f7fd fb29 	bl	8000744 <butled_off>
 80030f2:	e791      	b.n	8003018 <TIM17_IRQHandler+0x180>
				if((midi_chan_blink >> 6) & 0b1) {butled_on(BUTLED_M1);}
 80030f4:	8813      	ldrh	r3, [r2, #0]
 80030f6:	065b      	lsls	r3, r3, #25
 80030f8:	d400      	bmi.n	80030fc <TIM17_IRQHandler+0x264>
 80030fa:	e74c      	b.n	8002f96 <TIM17_IRQHandler+0xfe>
 80030fc:	2002      	movs	r0, #2
 80030fe:	f7fd fb13 	bl	8000728 <butled_on>
 8003102:	e74b      	b.n	8002f9c <TIM17_IRQHandler+0x104>
 8003104:	200001a8 	.word	0x200001a8
 8003108:	20000328 	.word	0x20000328
 800310c:	08003538 	.word	0x08003538
 8003110:	200001a0 	.word	0x200001a0
 8003114:	20000153 	.word	0x20000153
 8003118:	2000019c 	.word	0x2000019c
 800311c:	200001a4 	.word	0x200001a4
 8003120:	200001a6 	.word	0x200001a6
 8003124:	20000029 	.word	0x20000029
 8003128:	2000019a 	.word	0x2000019a
 800312c:	200001dc 	.word	0x200001dc
 8003130:	40014800 	.word	0x40014800
 8003134:	2000002a 	.word	0x2000002a
 8003138:	2000011c 	.word	0x2000011c

0800313c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800313c:	480d      	ldr	r0, [pc, #52]	; (8003174 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800313e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003140:	f7ff fc80 	bl	8002a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003144:	480c      	ldr	r0, [pc, #48]	; (8003178 <LoopForever+0x6>)
  ldr r1, =_edata
 8003146:	490d      	ldr	r1, [pc, #52]	; (800317c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003148:	4a0d      	ldr	r2, [pc, #52]	; (8003180 <LoopForever+0xe>)
  movs r3, #0
 800314a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800314c:	e002      	b.n	8003154 <LoopCopyDataInit>

0800314e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800314e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003152:	3304      	adds	r3, #4

08003154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003158:	d3f9      	bcc.n	800314e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800315a:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <LoopForever+0x12>)
  ldr r4, =_ebss
 800315c:	4c0a      	ldr	r4, [pc, #40]	; (8003188 <LoopForever+0x16>)
  movs r3, #0
 800315e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003160:	e001      	b.n	8003166 <LoopFillZerobss>

08003162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003164:	3204      	adds	r2, #4

08003166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003168:	d3fb      	bcc.n	8003162 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800316a:	f000 f811 	bl	8003190 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800316e:	f7fe f96b 	bl	8001448 <main>

08003172 <LoopForever>:

LoopForever:
    b LoopForever
 8003172:	e7fe      	b.n	8003172 <LoopForever>
  ldr   r0, =_estack
 8003174:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800317c:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8003180:	0800463c 	.word	0x0800463c
  ldr r2, =_sbss
 8003184:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8003188:	2000032c 	.word	0x2000032c

0800318c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800318c:	e7fe      	b.n	800318c <ADC_IRQHandler>
	...

08003190 <__libc_init_array>:
 8003190:	b570      	push	{r4, r5, r6, lr}
 8003192:	2600      	movs	r6, #0
 8003194:	4d0c      	ldr	r5, [pc, #48]	; (80031c8 <__libc_init_array+0x38>)
 8003196:	4c0d      	ldr	r4, [pc, #52]	; (80031cc <__libc_init_array+0x3c>)
 8003198:	1b64      	subs	r4, r4, r5
 800319a:	10a4      	asrs	r4, r4, #2
 800319c:	42a6      	cmp	r6, r4
 800319e:	d109      	bne.n	80031b4 <__libc_init_array+0x24>
 80031a0:	2600      	movs	r6, #0
 80031a2:	f000 f821 	bl	80031e8 <_init>
 80031a6:	4d0a      	ldr	r5, [pc, #40]	; (80031d0 <__libc_init_array+0x40>)
 80031a8:	4c0a      	ldr	r4, [pc, #40]	; (80031d4 <__libc_init_array+0x44>)
 80031aa:	1b64      	subs	r4, r4, r5
 80031ac:	10a4      	asrs	r4, r4, #2
 80031ae:	42a6      	cmp	r6, r4
 80031b0:	d105      	bne.n	80031be <__libc_init_array+0x2e>
 80031b2:	bd70      	pop	{r4, r5, r6, pc}
 80031b4:	00b3      	lsls	r3, r6, #2
 80031b6:	58eb      	ldr	r3, [r5, r3]
 80031b8:	4798      	blx	r3
 80031ba:	3601      	adds	r6, #1
 80031bc:	e7ee      	b.n	800319c <__libc_init_array+0xc>
 80031be:	00b3      	lsls	r3, r6, #2
 80031c0:	58eb      	ldr	r3, [r5, r3]
 80031c2:	4798      	blx	r3
 80031c4:	3601      	adds	r6, #1
 80031c6:	e7f2      	b.n	80031ae <__libc_init_array+0x1e>
 80031c8:	08004634 	.word	0x08004634
 80031cc:	08004634 	.word	0x08004634
 80031d0:	08004634 	.word	0x08004634
 80031d4:	08004638 	.word	0x08004638

080031d8 <memset>:
 80031d8:	0003      	movs	r3, r0
 80031da:	1882      	adds	r2, r0, r2
 80031dc:	4293      	cmp	r3, r2
 80031de:	d100      	bne.n	80031e2 <memset+0xa>
 80031e0:	4770      	bx	lr
 80031e2:	7019      	strb	r1, [r3, #0]
 80031e4:	3301      	adds	r3, #1
 80031e6:	e7f9      	b.n	80031dc <memset+0x4>

080031e8 <_init>:
 80031e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ee:	bc08      	pop	{r3}
 80031f0:	469e      	mov	lr, r3
 80031f2:	4770      	bx	lr

080031f4 <_fini>:
 80031f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031fa:	bc08      	pop	{r3}
 80031fc:	469e      	mov	lr, r3
 80031fe:	4770      	bx	lr
